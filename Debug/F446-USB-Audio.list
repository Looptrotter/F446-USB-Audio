
F446-USB-Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c700  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800c8d0  0800c8d0  0000d8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb78  0800cb78  0000e198  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb78  0800cb78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb80  0800cb80  0000e198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb80  0800cb80  0000db80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb84  0800cb84  0000db84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  0800cb88  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a6c  20000198  0800cd20  0000e198  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  20008c04  0800cd20  0000ec04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a32  00000000  00000000  0000e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004372  00000000  00000000  00025bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00029f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e66  00000000  00000000  0002b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cc0  00000000  00000000  0002c0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbd0  00000000  00000000  00052dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3995  00000000  00000000  0006e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005850  00000000  00000000  00142358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00147ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c8b8 	.word	0x0800c8b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	0800c8b8 	.word	0x0800c8b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b96a 	b.w	8000cc8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	460c      	mov	r4, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14e      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a18:	4694      	mov	ip, r2
 8000a1a:	458c      	cmp	ip, r1
 8000a1c:	4686      	mov	lr, r0
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	d962      	bls.n	8000aea <__udivmoddi4+0xde>
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	4319      	orrs	r1, r3
 8000a36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3e:	fa1f f68c 	uxth.w	r6, ip
 8000a42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a52:	fb04 f106 	mul.w	r1, r4, r6
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a62:	f080 8112 	bcs.w	8000c8a <__udivmoddi4+0x27e>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 810f 	bls.w	8000c8a <__udivmoddi4+0x27e>
 8000a6c:	3c02      	subs	r4, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	fa1f f38e 	uxth.w	r3, lr
 8000a76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb00 f606 	mul.w	r6, r0, r6
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x94>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a92:	f080 80fc 	bcs.w	8000c8e <__udivmoddi4+0x282>
 8000a96:	429e      	cmp	r6, r3
 8000a98:	f240 80f9 	bls.w	8000c8e <__udivmoddi4+0x282>
 8000a9c:	4463      	add	r3, ip
 8000a9e:	3802      	subs	r0, #2
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	b11d      	cbz	r5, 8000ab2 <__udivmoddi4+0xa6>
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d905      	bls.n	8000ac6 <__udivmoddi4+0xba>
 8000aba:	b10d      	cbz	r5, 8000ac0 <__udivmoddi4+0xb4>
 8000abc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e7f5      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000ac6:	fab3 f183 	clz	r1, r3
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d146      	bne.n	8000b5c <__udivmoddi4+0x150>
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xcc>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	f0c0 80f0 	bcc.w	8000cb8 <__udivmoddi4+0x2ac>
 8000ad8:	1a86      	subs	r6, r0, r2
 8000ada:	eb64 0303 	sbc.w	r3, r4, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0e6      	beq.n	8000ab2 <__udivmoddi4+0xa6>
 8000ae4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae8:	e7e3      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8090 	bne.w	8000c10 <__udivmoddi4+0x204>
 8000af0:	eba1 040c 	sub.w	r4, r1, ip
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa1f f78c 	uxth.w	r7, ip
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0e:	fb07 f006 	mul.w	r0, r7, r6
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x11c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x11a>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	f200 80cd 	bhi.w	8000cc0 <__udivmoddi4+0x2b4>
 8000b26:	4626      	mov	r6, r4
 8000b28:	1a1c      	subs	r4, r3, r0
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b32:	fb08 4410 	mls	r4, r8, r0, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb00 f707 	mul.w	r7, r0, r7
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x148>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x146>
 8000b4c:	429f      	cmp	r7, r3
 8000b4e:	f200 80b0 	bhi.w	8000cb2 <__udivmoddi4+0x2a6>
 8000b52:	4620      	mov	r0, r4
 8000b54:	1bdb      	subs	r3, r3, r7
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	e7a5      	b.n	8000aa8 <__udivmoddi4+0x9c>
 8000b5c:	f1c1 0620 	rsb	r6, r1, #32
 8000b60:	408b      	lsls	r3, r1
 8000b62:	fa22 f706 	lsr.w	r7, r2, r6
 8000b66:	431f      	orrs	r7, r3
 8000b68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b70:	ea43 030c 	orr.w	r3, r3, ip
 8000b74:	40f4      	lsrs	r4, r6
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	0c38      	lsrs	r0, r7, #16
 8000b7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b80:	fbb4 fef0 	udiv	lr, r4, r0
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	fb00 441e 	mls	r4, r0, lr, r4
 8000b8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b90:	fb0e f90c 	mul.w	r9, lr, ip
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x1a6>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ba2:	f080 8084 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8081 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000bac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	eba4 0409 	sub.w	r4, r4, r9
 8000bb6:	fa1f f983 	uxth.w	r9, r3
 8000bba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1d2>
 8000bce:	193c      	adds	r4, r7, r4
 8000bd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd4:	d267      	bcs.n	8000ca6 <__udivmoddi4+0x29a>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	d965      	bls.n	8000ca6 <__udivmoddi4+0x29a>
 8000bda:	3b02      	subs	r3, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be2:	fba0 9302 	umull	r9, r3, r0, r2
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	429c      	cmp	r4, r3
 8000bec:	46ce      	mov	lr, r9
 8000bee:	469c      	mov	ip, r3
 8000bf0:	d351      	bcc.n	8000c96 <__udivmoddi4+0x28a>
 8000bf2:	d04e      	beq.n	8000c92 <__udivmoddi4+0x286>
 8000bf4:	b155      	cbz	r5, 8000c0c <__udivmoddi4+0x200>
 8000bf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000c02:	40cb      	lsrs	r3, r1
 8000c04:	431e      	orrs	r6, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e750      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f103 	lsr.w	r1, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	430c      	orrs	r4, r1
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2c:	fa1f f78c 	uxth.w	r7, ip
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3110 	mls	r1, r8, r0, r3
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f107 	mul.w	r1, r0, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x24c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c4e:	d22c      	bcs.n	8000caa <__udivmoddi4+0x29e>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d92a      	bls.n	8000caa <__udivmoddi4+0x29e>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c60:	fb08 3311 	mls	r3, r8, r1, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb01 f307 	mul.w	r3, r1, r7
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x276>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c78:	d213      	bcs.n	8000ca2 <__udivmoddi4+0x296>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d911      	bls.n	8000ca2 <__udivmoddi4+0x296>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4464      	add	r4, ip
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c88:	e739      	b.n	8000afe <__udivmoddi4+0xf2>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	e6f0      	b.n	8000a70 <__udivmoddi4+0x64>
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e706      	b.n	8000aa0 <__udivmoddi4+0x94>
 8000c92:	45c8      	cmp	r8, r9
 8000c94:	d2ae      	bcs.n	8000bf4 <__udivmoddi4+0x1e8>
 8000c96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9e:	3801      	subs	r0, #1
 8000ca0:	e7a8      	b.n	8000bf4 <__udivmoddi4+0x1e8>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e7ed      	b.n	8000c82 <__udivmoddi4+0x276>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e799      	b.n	8000bde <__udivmoddi4+0x1d2>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e7d4      	b.n	8000c58 <__udivmoddi4+0x24c>
 8000cae:	46d6      	mov	lr, sl
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1a6>
 8000cb2:	4463      	add	r3, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e74d      	b.n	8000b54 <__udivmoddi4+0x148>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e70f      	b.n	8000ae0 <__udivmoddi4+0xd4>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	e730      	b.n	8000b28 <__udivmoddi4+0x11c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_DMA_Init+0x5c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a13      	ldr	r2, [pc, #76]	@ (8000d28 <MX_DMA_Init+0x5c>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_DMA_Init+0x5c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2039      	movs	r0, #57	@ 0x39
 8000cf4:	f000 ff7f 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cf8:	2039      	movs	r0, #57	@ 0x39
 8000cfa:	f000 ff98 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	203b      	movs	r0, #59	@ 0x3b
 8000d04:	f000 ff77 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d08:	203b      	movs	r0, #59	@ 0x3b
 8000d0a:	f000 ff90 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	203c      	movs	r0, #60	@ 0x3c
 8000d14:	f000 ff6f 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d18:	203c      	movs	r0, #60	@ 0x3c
 8000d1a:	f000 ff88 	bl	8001c2e <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	@ 0x30
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a52      	ldr	r2, [pc, #328]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b50      	ldr	r3, [pc, #320]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	4b4c      	ldr	r3, [pc, #304]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a4b      	ldr	r2, [pc, #300]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a44      	ldr	r2, [pc, #272]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b42      	ldr	r3, [pc, #264]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b3b      	ldr	r3, [pc, #236]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a36      	ldr	r2, [pc, #216]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b30      	ldr	r3, [pc, #192]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_GPIO_Init+0x168>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e0c:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0x16c>)
 8000e0e:	f001 fca3 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2140      	movs	r1, #64	@ 0x40
 8000e16:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <MX_GPIO_Init+0x170>)
 8000e18:	f001 fc9e 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0x174>)
 8000e34:	f001 fafc 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e38:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_GPIO_Init+0x16c>)
 8000e52:	f001 faed 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <MX_GPIO_Init+0x170>)
 8000e6e:	f001 fadf 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_GPIO_Init+0x170>)
 8000e86:	f001 fad3 	bl	8002430 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	@ 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
DMA_HandleTypeDef hdma_spi1_tx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <MX_I2S1_Init+0x54>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb4:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000eca:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <MX_I2S1_Init+0x58>)
 8000ecc:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_I2S1_Init+0x50>)
 8000ee2:	f001 fc53 	bl	800278c <HAL_I2S_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2S1_Init+0x4c>
  {
    Error_Handler();
 8000eec:	f000 f9f0 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001b4 	.word	0x200001b4
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	00017700 	.word	0x00017700

08000f00 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0a0      	sub	sp, #128	@ 0x80
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	225c      	movs	r2, #92	@ 0x5c
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fee1 	bl	800ace8 <memset>
  if(i2sHandle->Instance==SPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a44      	ldr	r2, [pc, #272]	@ (800103c <HAL_I2S_MspInit+0x13c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	f040 8081 	bne.w	8001034 <HAL_I2S_MspInit+0x134>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f36:	23c0      	movs	r3, #192	@ 0xc0
 8000f38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f9ce 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000f62:	f000 f9b5 	bl	80012d0 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a34      	ldr	r2, [pc, #208]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <HAL_I2S_MspInit+0x140>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f9e:	23b0      	movs	r3, #176	@ 0xb0
 8000fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4822      	ldr	r0, [pc, #136]	@ (8001044 <HAL_I2S_MspInit+0x144>)
 8000fba:	f001 fa39 	bl	8002430 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	@ (800104c <HAL_I2S_MspInit+0x14c>)
 8000fc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fc6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000fca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fce:	2240      	movs	r2, #64	@ 0x40
 8000fd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fde:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000fea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8000ffa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8001002:	2204      	movs	r2, #4
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8001008:	2203      	movs	r2, #3
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 800101a:	f000 fe29 	bl	8001c70 <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2S_MspInit+0x128>
    {
      Error_Handler();
 8001024:	f000 f954 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi1_tx);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 800102c:	639a      	str	r2, [r3, #56]	@ 0x38
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_I2S_MspInit+0x148>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3780      	adds	r7, #128	@ 0x80
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	200001fc 	.word	0x200001fc
 800104c:	40026458 	.word	0x40026458

08001050 <GenerateSineWave>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

void GenerateSineWave(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
    /* W trybie stereo dla każdej ramki generujemy 1 próbkę (np. ten sam sygnał dla lewego i prawego kanału).
       Dlatego pętla przebiega od 0 do FRAMES_COUNT.
       W wyniku powstanie bufor o rozmiarze FRAMES_COUNT * 2 halfwordów.
       Faza zmienia się tylko raz na ramkę.
    */
    double phase = 0.0;
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double phaseIncrement = 2.0 * PI * SINE_FREQ / SAMPLE_RATE;
 8001062:	a32c      	add	r3, pc, #176	@ (adr r3, 8001114 <GenerateSineWave+0xc4>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (int frame = 0; frame < FRAMES_COUNT; frame++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e041      	b.n	80010f6 <GenerateSineWave+0xa6>
    {
        int16_t sample = (int16_t)(AMPLITUDE * sin(phase));
 8001072:	ed97 0b06 	vldr	d0, [r7, #24]
 8001076:	f00a fbef 	bl	800b858 <sin>
 800107a:	ec51 0b10 	vmov	r0, r1, d0
 800107e:	a327      	add	r3, pc, #156	@ (adr r3, 800111c <GenerateSineWave+0xcc>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff f914 	bl	80002b0 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fc7c 	bl	800098c <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	80fb      	strh	r3, [r7, #6]
        /* Ustaw tę samą próbkę dla obu kanałów */
        sineBuffer[frame * 2] = sample;     // lewy kanał
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	491c      	ldr	r1, [pc, #112]	@ (8001110 <GenerateSineWave+0xc0>)
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        sineBuffer[frame * 2 + 1] = sample; // prawy kanał
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	3301      	adds	r3, #1
 80010aa:	4919      	ldr	r1, [pc, #100]	@ (8001110 <GenerateSineWave+0xc0>)
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

        phase += phaseIncrement;
 80010b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ba:	f7ff fa29 	bl	8000510 <__adddf3>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if (phase >= 2.0 * PI)
 80010c6:	a310      	add	r3, pc, #64	@ (adr r3, 8001108 <GenerateSineWave+0xb8>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d0:	f7ff fc48 	bl	8000964 <__aeabi_dcmpge>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <GenerateSineWave+0xa0>
            phase -= 2.0 * PI;
 80010da:	a30b      	add	r3, pc, #44	@ (adr r3, 8001108 <GenerateSineWave+0xb8>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e4:	f7ff fa12 	bl	800050c <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int frame = 0; frame < FRAMES_COUNT; frame++)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80010fc:	dbb9      	blt.n	8001072 <GenerateSineWave+0x22>
    }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	54442d18 	.word	0x54442d18
 800110c:	401921fb 	.word	0x401921fb
 8001110:	2000025c 	.word	0x2000025c
 8001114:	1dcc76a2 	.word	0x1dcc76a2
 8001118:	3fb23ca6 	.word	0x3fb23ca6
 800111c:	00000000 	.word	0x00000000
 8001120:	40dd4c00 	.word	0x40dd4c00

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fbf4 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f818 	bl	8001160 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001130:	f000 f882 	bl	8001238 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001134:	f7ff fdfa 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001138:	f7ff fdc8 	bl	8000ccc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800113c:	f000 fb4e 	bl	80017dc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001140:	f008 fe74 	bl	8009e2c <MX_USB_DEVICE_Init>
  MX_SAI1_Init();
 8001144:	f000 f8ca 	bl	80012dc <MX_SAI1_Init>
  MX_I2S1_Init();
 8001148:	f7ff feac 	bl	8000ea4 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  printf("Test\n");
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <main+0x38>)
 800114e:	f009 fceb 	bl	800ab28 <puts>




    GenerateSineWave();
 8001152:	f7ff ff7d 	bl	8001050 <GenerateSineWave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <main+0x32>
 800115a:	bf00      	nop
 800115c:	0800c8d0 	.word	0x0800c8d0

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2234      	movs	r2, #52	@ 0x34
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 fdba 	bl	800ace8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <SystemClock_Config+0xd0>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a28      	ldr	r2, [pc, #160]	@ (8001230 <SystemClock_Config+0xd0>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <SystemClock_Config+0xd0>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <SystemClock_Config+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <SystemClock_Config+0xd4>)
 80011aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <SystemClock_Config+0xd4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011d4:	23a8      	movs	r3, #168	@ 0xa8
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011dc:	2307      	movs	r3, #7
 80011de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 f829 	bl	8005240 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011f4:	f000 f86c 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001204:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2105      	movs	r1, #5
 8001216:	4618      	mov	r0, r3
 8001218:	f002 ff54 	bl	80040c4 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001222:	f000 f855 	bl	80012d0 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b098      	sub	sp, #96	@ 0x60
 800123c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	225c      	movs	r2, #92	@ 0x5c
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fd4f 	bl	800ace8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800124a:	2304      	movs	r3, #4
 800124c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800124e:	2308      	movs	r3, #8
 8001250:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 196;
 8001252:	23c4      	movs	r3, #196	@ 0xc4
 8001254:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f845 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 8001274:	f000 f82c 	bl	80012d0 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3760      	adds	r7, #96	@ 0x60
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <__io_putchar>:


int __io_putchar(int ch)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d109      	bne.n	80012b2 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800129e:	230d      	movs	r3, #13
 80012a0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart3, &ch2, 1, HAL_MAX_DELAY);
 80012a2:	f107 010f 	add.w	r1, r7, #15
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2201      	movs	r2, #1
 80012ac:	4807      	ldr	r0, [pc, #28]	@ (80012cc <__io_putchar+0x3c>)
 80012ae:	f004 ffc7 	bl	8006240 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2201      	movs	r2, #1
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <__io_putchar+0x3c>)
 80012bc:	f004 ffc0 	bl	8006240 <HAL_UART_Transmit>
    return 1;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000854 	.word	0x20000854

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <MX_SAI1_Init+0xb8>)
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <MX_SAI1_Init+0xbc>)
 80012e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <MX_SAI1_Init+0xb8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80012ec:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <MX_SAI1_Init+0xb8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80012f2:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <MX_SAI1_Init+0xb8>)
 80012f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f8:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <MX_SAI1_Init+0xb8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001308:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800130c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001310:	4a22      	ldr	r2, [pc, #136]	@ (800139c <MX_SAI1_Init+0xc0>)
 8001312:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <MX_SAI1_Init+0xb8>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800132c:	2302      	movs	r3, #2
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	4818      	ldr	r0, [pc, #96]	@ (8001394 <MX_SAI1_Init+0xb8>)
 8001334:	f004 fa22 	bl	800577c <HAL_SAI_InitProtocol>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_SAI1_Init+0x66>
  {
    Error_Handler();
 800133e:	f7ff ffc7 	bl	80012d0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001344:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <MX_SAI1_Init+0xc8>)
 8001346:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800134a:	2203      	movs	r2, #3
 800134c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001350:	2201      	movs	r2, #1
 8001352:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800135c:	2201      	movs	r2, #1
 800135e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001378:	2302      	movs	r3, #2
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <MX_SAI1_Init+0xc4>)
 8001380:	f004 f9fc 	bl	800577c <HAL_SAI_InitProtocol>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_SAI1_Init+0xb2>
  {
    Error_Handler();
 800138a:	f7ff ffa1 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000067c 	.word	0x2000067c
 8001398:	40015804 	.word	0x40015804
 800139c:	00017700 	.word	0x00017700
 80013a0:	20000704 	.word	0x20000704
 80013a4:	40015824 	.word	0x40015824

080013a8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a64      	ldr	r2, [pc, #400]	@ (8001548 <HAL_SAI_MspInit+0x1a0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d15d      	bne.n	8001476 <HAL_SAI_MspInit+0xce>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80013ba:	4b64      	ldr	r3, [pc, #400]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b62      	ldr	r3, [pc, #392]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a61      	ldr	r2, [pc, #388]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 80013cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80013de:	4b5b      	ldr	r3, [pc, #364]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a59      	ldr	r2, [pc, #356]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 80013e6:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013e8:	2374      	movs	r3, #116	@ 0x74
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80013f8:	2306      	movs	r3, #6
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4854      	ldr	r0, [pc, #336]	@ (8001554 <HAL_SAI_MspInit+0x1ac>)
 8001404:	f001 f814 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001408:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800140a:	4a54      	ldr	r2, [pc, #336]	@ (800155c <HAL_SAI_MspInit+0x1b4>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001414:	4b50      	ldr	r3, [pc, #320]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001416:	2240      	movs	r2, #64	@ 0x40
 8001418:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b4f      	ldr	r3, [pc, #316]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b4d      	ldr	r3, [pc, #308]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001428:	4b4b      	ldr	r3, [pc, #300]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800142a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800142e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001430:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001432:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001436:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001438:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800143a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001440:	4b45      	ldr	r3, [pc, #276]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001442:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001446:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001448:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800144e:	4842      	ldr	r0, [pc, #264]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001450:	f000 fc0e 	bl	8001c70 <HAL_DMA_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 800145a:	f7ff ff39 	bl	80012d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a3d      	ldr	r2, [pc, #244]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001462:	675a      	str	r2, [r3, #116]	@ 0x74
 8001464:	4a3c      	ldr	r2, [pc, #240]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a3a      	ldr	r2, [pc, #232]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 800146e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001470:	4a39      	ldr	r2, [pc, #228]	@ (8001558 <HAL_SAI_MspInit+0x1b0>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <HAL_SAI_MspInit+0x1b8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d15e      	bne.n	800153e <HAL_SAI_MspInit+0x196>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <HAL_SAI_MspInit+0xfc>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001490:	4a2f      	ldr	r2, [pc, #188]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 8001492:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001496:	6453      	str	r3, [r2, #68]	@ 0x44
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <HAL_SAI_MspInit+0x1a8>)
 800149a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a28      	ldr	r2, [pc, #160]	@ (800154c <HAL_SAI_MspInit+0x1a4>)
 80014ac:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ae:	2308      	movs	r3, #8
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014be:	2306      	movs	r3, #6
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4822      	ldr	r0, [pc, #136]	@ (8001554 <HAL_SAI_MspInit+0x1ac>)
 80014ca:	f000 ffb1 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014d0:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <HAL_SAI_MspInit+0x1c0>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80014d4:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014da:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 80014fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 8001502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001506:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 800150a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800150e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001516:	4813      	ldr	r0, [pc, #76]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 8001518:	f000 fbaa 	bl	8001c70 <HAL_DMA_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_SAI_MspInit+0x17e>
    {
      Error_Handler();
 8001522:	f7ff fed5 	bl	80012d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 800152a:	675a      	str	r2, [r3, #116]	@ 0x74
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 8001536:	671a      	str	r2, [r3, #112]	@ 0x70
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_SAI_MspInit+0x1bc>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	@ 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40015804 	.word	0x40015804
 800154c:	2000084c 	.word	0x2000084c
 8001550:	40023800 	.word	0x40023800
 8001554:	40021000 	.word	0x40021000
 8001558:	2000078c 	.word	0x2000078c
 800155c:	40026428 	.word	0x40026428
 8001560:	40015824 	.word	0x40015824
 8001564:	200007ec 	.word	0x200007ec
 8001568:	40026470 	.word	0x40026470

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 f9d1 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler(); //FX turn on SYSTICK interrupt
 8001616:	f000 fb24 	bl	8001c62 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA2_Stream1_IRQHandler+0x10>)
 8001626:	f000 fc99 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000078c 	.word	0x2000078c

08001634 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA2_Stream3_IRQHandler+0x10>)
 800163a:	f000 fc8f 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200001fc 	.word	0x200001fc

08001648 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA2_Stream4_IRQHandler+0x10>)
 800164e:	f000 fc85 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200007ec 	.word	0x200007ec

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f001 fbdb 	bl	8002e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000d80 	.word	0x20000d80

08001670 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00a      	b.n	8001698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001682:	f3af 8000 	nop.w
 8001686:	4601      	mov	r1, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf0      	blt.n	8001682 <_read+0x12>
  }

  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e009      	b.n	80016d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fde3 	bl	8001290 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf1      	blt.n	80016bc <_write+0x12>
  }
  return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170a:	605a      	str	r2, [r3, #4]
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f009 fb02 	bl	800ad84 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20020000 	.word	0x20020000
 80017ac:	00008000 	.word	0x00008000
 80017b0:	20000850 	.word	0x20000850
 80017b4:	20008c08 	.word	0x20008c08

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <MX_USART3_UART_Init+0x50>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 80017e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_USART3_UART_Init+0x4c>)
 8001814:	f004 fcc4 	bl	80061a0 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800181e:	f7ff fd57 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000854 	.word	0x20000854
 800182c:	40004800 	.word	0x40004800

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <HAL_UART_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a17      	ldr	r2, [pc, #92]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_UART_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800188a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189c:	2307      	movs	r3, #7
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <HAL_UART_MspInit+0x8c>)
 80018a8:	f000 fdc2 	bl	8002430 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40004800 	.word	0x40004800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020c00 	.word	0x40020c00

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018c4:	f7ff ff78 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	@ (80018fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	@ (8001900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	@ (800190c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f009 fa4f 	bl	800ad90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f2:	f7ff fc17 	bl	8001124 <main>
  bx  lr    
 80018f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001904:	0800cb88 	.word	0x0800cb88
  ldr r2, =_sbss
 8001908:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 800190c:	20008c04 	.word	0x20008c04

08001910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f94f 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f808 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fe10 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f967 	bl	8001c4a <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f92f 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000089c 	.word	0x2000089c

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000089c 	.word	0x2000089c

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	@ (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff29 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff3e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff31 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa2 	bl	8001b9c <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c66:	f7ff fb0b 	bl	8001280 <HAL_SYSTICK_Callback>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff feb0 	bl	80019e0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e099      	b.n	8001dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	e00f      	b.n	8001cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cae:	f7ff fe97 	bl	80019e0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d908      	bls.n	8001cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e078      	b.n	8001dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <HAL_DMA_Init+0x158>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d117      	bne.n	8001d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fadf 	bl	8002338 <DMA_CheckFifoParam>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e016      	b.n	8001dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa96 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da8:	223f      	movs	r2, #63	@ 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	f010803f 	.word	0xf010803f

08001dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Start_IT+0x26>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e040      	b.n	8001e74 <HAL_DMA_Start_IT+0xa8>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12f      	bne.n	8001e66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fa28 	bl	8002270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	223f      	movs	r2, #63	@ 0x3f
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0216 	orr.w	r2, r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0208 	orr.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e005      	b.n	8001e72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e8a:	f7ff fda9 	bl	80019e0 <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e052      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0216 	bic.w	r2, r2, #22
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ecc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_DMA_Abort+0x62>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efe:	e013      	b.n	8001f28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f00:	f7ff fd6e 	bl	80019e0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d90c      	bls.n	8001f28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e015      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e4      	bne.n	8001f00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	223f      	movs	r2, #63	@ 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f68:	4b8e      	ldr	r3, [pc, #568]	@ (80021a4 <HAL_DMA_IRQHandler+0x248>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80021a8 <HAL_DMA_IRQHandler+0x24c>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	2208      	movs	r2, #8
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	2201      	movs	r2, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	2210      	movs	r2, #16
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d043      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	2210      	movs	r2, #16
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e01f      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e016      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2220      	movs	r2, #32
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808f 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8087 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_IRQHandler+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	223f      	movs	r2, #63	@ 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07e      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
        }
        return;
 8002172:	e079      	b.n	8002268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01d      	beq.n	80021be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e02c      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000
 80021a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e01e      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0210 	bic.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	d307      	bcc.n	8002244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_DMA_IRQHandler+0x2cc>
 8002242:	e000      	b.n	8002246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002268:	bf00      	nop
    }
  }
}
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800228c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	@ 0x40
 800229c:	d108      	bne.n	80022b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ae:	e007      	b.n	80022c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800c964 	.word	0x0800c964

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e165      	b.n	8002718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8154 	bne.w	8002712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80ae 	beq.w	8002712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002730 <HAL_GPIO_Init+0x300>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	4a5c      	ldr	r2, [pc, #368]	@ (8002730 <HAL_GPIO_Init+0x300>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002730 <HAL_GPIO_Init+0x300>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a58      	ldr	r2, [pc, #352]	@ (8002734 <HAL_GPIO_Init+0x304>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002738 <HAL_GPIO_Init+0x308>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4e      	ldr	r2, [pc, #312]	@ (800273c <HAL_GPIO_Init+0x30c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4d      	ldr	r2, [pc, #308]	@ (8002740 <HAL_GPIO_Init+0x310>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4c      	ldr	r2, [pc, #304]	@ (8002744 <HAL_GPIO_Init+0x314>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x20e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4b      	ldr	r2, [pc, #300]	@ (8002748 <HAL_GPIO_Init+0x318>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x20a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4a      	ldr	r2, [pc, #296]	@ (800274c <HAL_GPIO_Init+0x31c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x206>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a49      	ldr	r2, [pc, #292]	@ (8002750 <HAL_GPIO_Init+0x320>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x202>
 800262e:	2306      	movs	r3, #6
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002632:	2307      	movs	r3, #7
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	@ (8002734 <HAL_GPIO_Init+0x304>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3a      	ldr	r3, [pc, #232]	@ (8002754 <HAL_GPIO_Init+0x324>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a31      	ldr	r2, [pc, #196]	@ (8002754 <HAL_GPIO_Init+0x324>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2f      	ldr	r3, [pc, #188]	@ (8002754 <HAL_GPIO_Init+0x324>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a26      	ldr	r2, [pc, #152]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <HAL_GPIO_Init+0x324>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae96 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0e1      	b.n	8002962 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a6d      	ldr	r2, [pc, #436]	@ (800296c <HAL_I2S_Init+0x1e0>)
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fba1 	bl	8000f00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d06f      	beq.n	80028ca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027f2:	2310      	movs	r3, #16
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e001      	b.n	80027fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d802      	bhi.n	800280a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a58      	ldr	r2, [pc, #352]	@ (8002970 <HAL_I2S_Init+0x1e4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_I2S_Init+0x92>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a56      	ldr	r2, [pc, #344]	@ (8002974 <HAL_I2S_Init+0x1e8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d104      	bne.n	8002828 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800281e:	2001      	movs	r0, #1
 8002820:	f002 f894 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	e003      	b.n	8002830 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002828:	2002      	movs	r0, #2
 800282a:	f002 f88f 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 800282e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002838:	d125      	bne.n	8002886 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	3305      	adds	r3, #5
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e01f      	b.n	80028a4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	fbb2 f2f3 	udiv	r2, r2, r3
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	3305      	adds	r3, #5
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e00e      	b.n	80028a4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fbb2 f2f3 	udiv	r2, r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	3305      	adds	r3, #5
 80028a2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_I2S_Init+0x1ec>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e003      	b.n	80028d2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d902      	bls.n	80028de <HAL_I2S_Init+0x152>
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2bff      	cmp	r3, #255	@ 0xff
 80028dc:	d907      	bls.n	80028ee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e039      	b.n	8002962 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	ea42 0103 	orr.w	r1, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	430a      	orrs	r2, r1
 8002900:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800290c:	f023 030f 	bic.w	r3, r3, #15
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6851      	ldr	r1, [r2, #4]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6992      	ldr	r2, [r2, #24]
 8002924:	430a      	orrs	r2, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002930:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b30      	cmp	r3, #48	@ 0x30
 8002938:	d003      	beq.n	8002942 <HAL_I2S_Init+0x1b6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002940:	d107      	bne.n	8002952 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002950:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	08002a73 	.word	0x08002a73
 8002970:	40003800 	.word	0x40003800
 8002974:	40003c00 	.word	0x40003c00
 8002978:	cccccccd 	.word	0xcccccccd

0800297c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffb8 	bl	800297c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	b292      	uxth	r2, r2
 8002a28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	1c9a      	adds	r2, r3, #2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10e      	bne.n	8002a6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff93 	bl	8002990 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d13a      	bne.n	8002b04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d109      	bne.n	8002aac <I2S_IRQHandler+0x3a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa2:	2b40      	cmp	r3, #64	@ 0x40
 8002aa4:	d102      	bne.n	8002aac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffb4 	bl	8002a14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	2b40      	cmp	r3, #64	@ 0x40
 8002ab4:	d126      	bne.n	8002b04 <I2S_IRQHandler+0x92>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d11f      	bne.n	8002b04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ad2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff50 	bl	80029a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d136      	bne.n	8002b7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d109      	bne.n	8002b2e <I2S_IRQHandler+0xbc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b24:	2b80      	cmp	r3, #128	@ 0x80
 8002b26:	d102      	bne.n	8002b2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff45 	bl	80029b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d122      	bne.n	8002b7e <I2S_IRQHandler+0x10c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d11b      	bne.n	8002b7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff13 	bl	80029a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e108      	b.n	8002daa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 fb00 	bl	800a1b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 f807 	bl	8006be6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7c1a      	ldrb	r2, [r3, #16]
 8002be0:	f88d 2000 	strb.w	r2, [sp]
 8002be4:	3304      	adds	r3, #4
 8002be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be8:	f003 fee6 	bl	80069b8 <USB_CoreInit>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0d5      	b.n	8002daa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 ffff 	bl	8006c08 <USB_SetCurrentMode>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0c6      	b.n	8002daa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e04a      	b.n	8002cb8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3315      	adds	r3, #21
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3314      	adds	r3, #20
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	b298      	uxth	r0, r3
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	332e      	adds	r3, #46	@ 0x2e
 8002c5e:	4602      	mov	r2, r0
 8002c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3318      	adds	r3, #24
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	331c      	adds	r3, #28
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3320      	adds	r3, #32
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3324      	adds	r3, #36	@ 0x24
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3af      	bcc.n	8002c22 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e044      	b.n	8002d52 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	791b      	ldrb	r3, [r3, #4]
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3b5      	bcc.n	8002cc8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7c1a      	ldrb	r2, [r3, #16]
 8002d64:	f88d 2000 	strb.w	r2, [sp]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6c:	f003 ff98 	bl	8006ca0 <USB_DevInit>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e013      	b.n	8002daa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7b1b      	ldrb	r3, [r3, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f001 f96f 	bl	800407c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 ffd5 	bl	8007d52 <USB_DevDisconnect>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_PCD_Start+0x1c>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e022      	b.n	8002e14 <HAL_PCD_Start+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fee2 	bl	8006bc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 ff83 	bl	8007d10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08d      	sub	sp, #52	@ 0x34
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 f841 	bl	8007eba <USB_GetMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 84b9 	bne.w	80037b2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 ffa5 	bl	8007d94 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 84af 	beq.w	80037b0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 ff92 	bl	8007d94 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d107      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f002 0202 	and.w	r2, r2, #2
 8002e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 ff80 	bl	8007d94 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d161      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0210 	bic.w	r2, r2, #16
 8002eac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	0c5b      	lsrs	r3, r3, #17
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d124      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d035      	beq.n	8002f52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6a38      	ldr	r0, [r7, #32]
 8002efa:	f004 fdb7 	bl	8007a6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	441a      	add	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1c:	441a      	add	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	615a      	str	r2, [r3, #20]
 8002f22:	e016      	b.n	8002f52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	0c5b      	lsrs	r3, r3, #17
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d110      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f36:	2208      	movs	r2, #8
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6a38      	ldr	r0, [r7, #32]
 8002f3c:	f004 fd96 	bl	8007a6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4c:	441a      	add	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0210 	orr.w	r2, r2, #16
 8002f60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 ff14 	bl	8007d94 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f76:	f040 80a7 	bne.w	80030c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 ff19 	bl	8007dba <USB_ReadDevAllOutEpInterrupt>
 8002f88:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f8a:	e099      	b.n	80030c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 808e 	beq.w	80030b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 ff3d 	bl	8007e22 <USB_ReadDevOutEPInterrupt>
 8002fa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fed1 	bl	8003d70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 ffa7 	bl	8003f40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	2310      	movs	r3, #16
 800300c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d030      	beq.n	800307a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b80      	cmp	r3, #128	@ 0x80
 8003022:	d109      	bne.n	8003038 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003036:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	78db      	ldrb	r3, [r3, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f007 f9d2 	bl	800a40c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	2302      	movs	r3, #2
 8003078:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	2320      	movs	r3, #32
 8003094:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	3301      	adds	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f af62 	bne.w	8002f8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fe61 	bl	8007d94 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030dc:	f040 80db 	bne.w	8003296 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fe82 	bl	8007dee <USB_ReadDevAllInEpInterrupt>
 80030ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030f0:	e0cd      	b.n	800328e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80c2 	beq.w	8003282 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f004 fea8 	bl	8007e5e <USB_ReadDevInEPInterrupt>
 800310e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d057      	beq.n	80031ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	69f9      	ldr	r1, [r7, #28]
 8003136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800313a:	4013      	ands	r3, r2
 800313c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314a:	461a      	mov	r2, r3
 800314c:	2301      	movs	r3, #1
 800314e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	799b      	ldrb	r3, [r3, #6]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d132      	bne.n	80031be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3320      	adds	r3, #32
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	331c      	adds	r3, #28
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4419      	add	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4403      	add	r3, r0
 800318c:	3320      	adds	r3, #32
 800318e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <HAL_PCD_IRQHandler+0x3a2>
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3324      	adds	r3, #36	@ 0x24
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031b6:	461a      	mov	r2, r3
 80031b8:	2101      	movs	r1, #1
 80031ba:	f004 feaf 	bl	8007f1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f007 f89c 	bl	800a302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	2308      	movs	r3, #8
 80031e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031fc:	461a      	mov	r2, r3
 80031fe:	2310      	movs	r3, #16
 8003200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	2340      	movs	r3, #64	@ 0x40
 800321c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800322a:	6a38      	ldr	r0, [r7, #32]
 800322c:	f003 fe96 	bl	8006f5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	3310      	adds	r3, #16
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	3304      	adds	r3, #4
 8003242:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	78db      	ldrb	r3, [r3, #3]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f007 f8e9 	bl	800a430 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800326a:	461a      	mov	r2, r3
 800326c:	2302      	movs	r3, #2
 800326e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800327a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fcea 	bl	8003c56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	f47f af2e 	bne.w	80030f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fd7a 	bl	8007d94 <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032aa:	d122      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032d2:	2100      	movs	r1, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f007 fa63 	bl	800a7a0 <HAL_PCDEx_LPM_Callback>
 80032da:	e002      	b.n	80032e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f007 f887 	bl	800a3f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fd4c 	bl	8007d94 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003306:	d112      	bne.n	800332e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f007 f843 	bl	800a3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800332c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fd2e 	bl	8007d94 <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003342:	d121      	bne.n	8003388 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003352:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800335a:	2b00      	cmp	r3, #0
 800335c:	d111      	bne.n	8003382 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003378:	2101      	movs	r1, #1
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f007 fa10 	bl	800a7a0 <HAL_PCDEx_LPM_Callback>
 8003380:	e002      	b.n	8003388 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f007 f80e 	bl	800a3a4 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 fd01 	bl	8007d94 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	f040 80b7 	bne.w	800350e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2110      	movs	r1, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fdce 	bl	8006f5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c4:	e046      	b.n	8003454 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d2:	461a      	mov	r2, r3
 80033d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003406:	461a      	mov	r2, r3
 8003408:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800340c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003428:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800342c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003448:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800344c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	3301      	adds	r3, #1
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	461a      	mov	r2, r3
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	4293      	cmp	r3, r2
 800345e:	d3b2      	bcc.n	80033c6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800346e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003472:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7bdb      	ldrb	r3, [r3, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800348c:	f043 030b 	orr.w	r3, r3, #11
 8003490:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a2:	f043 030b 	orr.w	r3, r3, #11
 80034a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a8:	e015      	b.n	80034d6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80034c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034d0:	f043 030b 	orr.w	r3, r3, #11
 80034d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80034e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f8:	461a      	mov	r2, r3
 80034fa:	f004 fd0f 	bl	8007f1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800350c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fc3e 	bl	8007d94 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003522:	d123      	bne.n	800356c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f004 fcd4 	bl	8007ed6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fd8b 	bl	800704e <USB_GetDevSpeed>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681c      	ldr	r4, [r3, #0]
 8003544:	f000 fea4 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 8003548:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800354e:	461a      	mov	r2, r3
 8003550:	4620      	mov	r0, r4
 8003552:	f003 fa95 	bl	8006a80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f006 fefb 	bl	800a352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800356a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f004 fc0f 	bl	8007d94 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10a      	bne.n	8003596 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f006 fed8 	bl	800a336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 0208 	and.w	r2, r2, #8
 8003594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fbfa 	bl	8007d94 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b80      	cmp	r3, #128	@ 0x80
 80035a8:	d123      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b6:	2301      	movs	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ba:	e014      	b.n	80035e6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb0a 	bl	8003bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	791b      	ldrb	r3, [r3, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d3e4      	bcc.n	80035bc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fbcc 	bl	8007d94 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003606:	d13c      	bne.n	8003682 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
 800360c:	e02b      	b.n	8003666 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3318      	adds	r3, #24
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d115      	bne.n	8003660 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	da12      	bge.n	8003660 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3317      	adds	r3, #23
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 faca 	bl	8003bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	3301      	adds	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	461a      	mov	r2, r3
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	4293      	cmp	r3, r2
 8003670:	d3cd      	bcc.n	800360e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f004 fb84 	bl	8007d94 <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003696:	d156      	bne.n	8003746 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003698:	2301      	movs	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
 800369c:	e045      	b.n	800372a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d12e      	bne.n	8003724 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da2b      	bge.n	8003724 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80036d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036dc:	429a      	cmp	r2, r3
 80036de:	d121      	bne.n	8003724 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800371c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003720:	6053      	str	r3, [r2, #4]
            break;
 8003722:	e008      	b.n	8003736 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	3301      	adds	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	791b      	ldrb	r3, [r3, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	4293      	cmp	r3, r2
 8003734:	d3b3      	bcc.n	800369e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fb22 	bl	8007d94 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375a:	d10a      	bne.n	8003772 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f006 fe79 	bl	800a454 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f004 fb0c 	bl	8007d94 <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d115      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f006 fe69 	bl	800a470 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	e000      	b.n	80037b2 <HAL_PCD_IRQHandler+0x996>
      return;
 80037b0:	bf00      	nop
    }
  }
}
 80037b2:	3734      	adds	r7, #52	@ 0x34
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}

080037b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_PCD_SetAddress+0x1a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e012      	b.n	80037f8 <HAL_PCD_SetAddress+0x40>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 fa6b 	bl	8007cc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	70fb      	strb	r3, [r7, #3]
 8003812:	460b      	mov	r3, r1
 8003814:	803b      	strh	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800381e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da0f      	bge.n	8003846 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3310      	adds	r3, #16
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	705a      	strb	r2, [r3, #1]
 8003844:	e00f      	b.n	8003866 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003872:	883b      	ldrh	r3, [r7, #0]
 8003874:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	78ba      	ldrb	r2, [r7, #2]
 8003880:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003894:	78bb      	ldrb	r3, [r7, #2]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d102      	bne.n	80038a0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_PCD_EP_Open+0xae>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e00e      	b.n	80038cc <HAL_PCD_EP_Open+0xcc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	4618      	mov	r0, r3
 80038be:	f003 fbeb 	bl	8007098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80038ca:	7afb      	ldrb	r3, [r7, #11]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da0f      	bge.n	8003908 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3310      	adds	r3, #16
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	705a      	strb	r2, [r3, #1]
 8003906:	e00f      	b.n	8003928 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_PCD_EP_Close+0x6e>
 800393e:	2302      	movs	r3, #2
 8003940:	e00e      	b.n	8003960 <HAL_PCD_EP_Close+0x8c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	4618      	mov	r0, r3
 8003952:	f003 fc29 	bl	80071a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	460b      	mov	r3, r1
 8003976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2200      	movs	r2, #0
 80039a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	799b      	ldrb	r3, [r3, #6]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	799b      	ldrb	r3, [r3, #6]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	f003 fcc6 	bl	8007360 <USB_EPStartXfer>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a00:	681b      	ldr	r3, [r3, #0]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	3304      	adds	r3, #4
 8003a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	799b      	ldrb	r3, [r3, #6]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	799b      	ldrb	r3, [r3, #6]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6979      	ldr	r1, [r7, #20]
 8003a74:	f003 fc74 	bl	8007360 <USB_EPStartXfer>

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	7912      	ldrb	r2, [r2, #4]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04f      	b.n	8003b40 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da0f      	bge.n	8003ac8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3310      	adds	r3, #16
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	705a      	strb	r2, [r3, #1]
 8003ac6:	e00d      	b.n	8003ae4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_EP_SetStall+0x82>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e01d      	b.n	8003b40 <HAL_PCD_EP_SetStall+0xbe>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 f802 	bl	8007b1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7999      	ldrb	r1, [r3, #6]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b30:	461a      	mov	r2, r3
 8003b32:	f004 f9f3 	bl	8007f1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	7912      	ldrb	r2, [r2, #4]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e042      	b.n	8003bec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da0f      	bge.n	8003b8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3310      	adds	r3, #16
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	705a      	strb	r2, [r3, #1]
 8003b8c:	e00f      	b.n	8003bae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_PCD_EP_ClrStall+0x86>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e00e      	b.n	8003bec <HAL_PCD_EP_ClrStall+0xa4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f004 f80b 	bl	8007bf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da0c      	bge.n	8003c22 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3310      	adds	r3, #16
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e00c      	b.n	8003c3c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f003 fe2a 	bl	800789c <USB_EPStopXfer>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	@ 0x28
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3310      	adds	r3, #16
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d901      	bls.n	8003c8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06b      	b.n	8003d66 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d902      	bls.n	8003caa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3303      	adds	r3, #3
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cb2:	e02a      	b.n	8003d0a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d902      	bls.n	8003cd0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68d9      	ldr	r1, [r3, #12]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4603      	mov	r3, r0
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f003 fe7f 	bl	80079f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d809      	bhi.n	8003d34 <PCD_WriteEmptyTxFifo+0xde>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d203      	bcs.n	8003d34 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1bf      	bne.n	8003cb4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d811      	bhi.n	8003d64 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	2201      	movs	r2, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	6939      	ldr	r1, [r7, #16]
 8003d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d60:	4013      	ands	r3, r2
 8003d62:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	333c      	adds	r3, #60	@ 0x3c
 8003d88:	3304      	adds	r3, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	799b      	ldrb	r3, [r3, #6]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d17b      	bne.n	8003e9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4a61      	ldr	r2, [pc, #388]	@ (8003f38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f240 80b9 	bls.w	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80b3 	beq.w	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd8:	6093      	str	r3, [r2, #8]
 8003dda:	e0a7      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2320      	movs	r3, #32
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	e098      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 8093 	bne.w	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a4b      	ldr	r2, [pc, #300]	@ (8003f38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d90f      	bls.n	8003e2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	e07e      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	0159      	lsls	r1, r3, #5
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	440b      	add	r3, r1
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f004 f84e 	bl	8007f1c <USB_EP0_OutStart>
 8003e80:	e006      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f006 fa18 	bl	800a2cc <HAL_PCD_DataOutStageCallback>
 8003e9c:	e046      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d124      	bne.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	e032      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	2320      	movs	r3, #32
 8003ee0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f006 f9ef 	bl	800a2cc <HAL_PCD_DataOutStageCallback>
 8003eee:	e01d      	b.n	8003f2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d114      	bne.n	8003f20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f003 fffe 	bl	8007f1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f006 f9d0 	bl	800a2cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	4f54300a 	.word	0x4f54300a
 8003f3c:	4f54310a 	.word	0x4f54310a

08003f40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	333c      	adds	r3, #60	@ 0x3c
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d90e      	bls.n	8003f94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f006 f987 	bl	800a2a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d90c      	bls.n	8003fbc <PCD_EP_OutSetupPacket_int+0x7c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	799b      	ldrb	r3, [r3, #6]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	f003 ffb0 	bl	8007f1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	4f54300a 	.word	0x4f54300a

08003fcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fea:	883b      	ldrh	r3, [r7, #0]
 8003fec:	0419      	lsls	r1, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff8:	e028      	b.n	800404c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e00d      	b.n	800402a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	3340      	adds	r3, #64	@ 0x40
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4413      	add	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	3301      	adds	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	3b01      	subs	r3, #1
 8004030:	429a      	cmp	r2, r3
 8004032:	d3ec      	bcc.n	800400e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004034:	883b      	ldrh	r3, [r7, #0]
 8004036:	0418      	lsls	r0, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	3b01      	subs	r3, #1
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	4302      	orrs	r2, r0
 8004044:	3340      	adds	r3, #64	@ 0x40
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	f043 0303 	orr.w	r3, r3, #3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cc      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b68      	ldr	r3, [pc, #416]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d90c      	bls.n	8004100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b65      	ldr	r3, [pc, #404]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d044      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b3f      	ldr	r3, [pc, #252]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3b      	ldr	r3, [pc, #236]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e067      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b37      	ldr	r3, [pc, #220]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4934      	ldr	r1, [pc, #208]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fd fc14 	bl	80019e0 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fd fc10 	bl	80019e0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b25      	ldr	r3, [pc, #148]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20c      	bcs.n	800420c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b22      	ldr	r3, [pc, #136]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	@ (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424a:	f000 fdc9 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	@ (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fb74 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	0800c94c 	.word	0x0800c94c
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a9b      	lsrs	r3, r3, #10
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0800c95c 	.word	0x0800c95c

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d4:	f7ff ffdc 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0b5b      	lsrs	r3, r3, #13
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4903      	ldr	r1, [pc, #12]	@ (80042f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40023800 	.word	0x40023800
 80042f4:	0800c95c 	.word	0x0800c95c

080042f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004330:	4b6f      	ldr	r3, [pc, #444]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004336:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	496c      	ldr	r1, [pc, #432]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800434e:	2301      	movs	r3, #1
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800435e:	4b64      	ldr	r3, [pc, #400]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004364:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	4960      	ldr	r1, [pc, #384]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800437c:	2301      	movs	r3, #1
 800437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438c:	4b58      	ldr	r3, [pc, #352]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	4955      	ldr	r1, [pc, #340]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043aa:	d101      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80043ac:	2301      	movs	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80043b8:	2301      	movs	r3, #1
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c8:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	4946      	ldr	r1, [pc, #280]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043e6:	d101      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80043e8:	2301      	movs	r3, #1
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80043f4:	2301      	movs	r3, #1
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 808a 	beq.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	4a38      	ldr	r2, [pc, #224]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	@ 0x40
 8004416:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004422:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a33      	ldr	r2, [pc, #204]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800442e:	f7fd fad7 	bl	80019e0 <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd fad3 	bl	80019e0 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e278      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004448:	4b2a      	ldr	r3, [pc, #168]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004454:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02f      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	429a      	cmp	r2, r3
 8004470:	d028      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004472:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800447c:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004482:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004488:	4a19      	ldr	r2, [pc, #100]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800448e:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d114      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800449a:	f7fd faa1 	bl	80019e0 <HAL_GetTick>
 800449e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fa9d 	bl	80019e0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e240      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ee      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044d0:	d114      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80044e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e6:	4902      	ldr	r1, [pc, #8]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]
 80044ec:	e00c      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470e40 	.word	0x42470e40
 80044fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a49      	ldr	r2, [pc, #292]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004502:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004506:	6093      	str	r3, [r2, #8]
 8004508:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800450a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	4944      	ldr	r1, [pc, #272]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004516:	4313      	orrs	r3, r2
 8004518:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800452c:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800452e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800453c:	4b3a      	ldr	r3, [pc, #232]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	4937      	ldr	r1, [pc, #220]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800455e:	4b32      	ldr	r3, [pc, #200]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004564:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456c:	492e      	ldr	r1, [pc, #184]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004580:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004586:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	4926      	ldr	r1, [pc, #152]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800459e:	d101      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80045a0:	2301      	movs	r3, #1
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80045b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	491a      	ldr	r1, [pc, #104]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d011      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	4911      	ldr	r1, [pc, #68]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80045f2:	2301      	movs	r3, #1
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004604:	f040 80ff 	bne.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800460e:	f7fd f9e7 	bl	80019e0 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004614:	e00e      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004616:	f7fd f9e3 	bl	80019e0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d907      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e188      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004628:	40023800 	.word	0x40023800
 800462c:	424711e0 	.word	0x424711e0
 8004630:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004634:	4b7e      	ldr	r3, [pc, #504]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ea      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d124      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004668:	4b71      	ldr	r3, [pc, #452]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	3301      	adds	r3, #1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800467a:	4b6d      	ldr	r3, [pc, #436]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800467c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	4961      	ldr	r1, [pc, #388]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d035      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046dc:	d130      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80046de:	4b54      	ldr	r3, [pc, #336]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f6:	0f1b      	lsrs	r3, r3, #28
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	019b      	lsls	r3, r3, #6
 8004708:	431a      	orrs	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	3b01      	subs	r3, #1
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	431a      	orrs	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	071b      	lsls	r3, r3, #28
 8004720:	4943      	ldr	r1, [pc, #268]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004728:	4b41      	ldr	r3, [pc, #260]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800472a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472e:	f023 021f 	bic.w	r2, r3, #31
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	493d      	ldr	r1, [pc, #244]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d029      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004754:	d124      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004756:	4b36      	ldr	r3, [pc, #216]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004768:	4b31      	ldr	r3, [pc, #196]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476e:	0f1b      	lsrs	r3, r3, #28
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	019b      	lsls	r3, r3, #6
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	431a      	orrs	r2, r3
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	431a      	orrs	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	071b      	lsls	r3, r3, #28
 8004798:	4925      	ldr	r1, [pc, #148]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	4917      	ldr	r1, [pc, #92]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047da:	4b16      	ldr	r3, [pc, #88]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e0:	f7fd f8fe 	bl	80019e0 <HAL_GetTick>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047e8:	f7fd f8fa 	bl	80019e0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e09f      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 8095 	bne.w	8004938 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800480e:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004814:	f7fd f8e4 	bl	80019e0 <HAL_GetTick>
 8004818:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800481a:	e00f      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800481c:	f7fd f8e0 	bl	80019e0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d908      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e085      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	42470068 	.word	0x42470068
 8004838:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800483c:	4b41      	ldr	r3, [pc, #260]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004848:	d0e8      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02b      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486e:	2b00      	cmp	r3, #0
 8004870:	d127      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004872:	4b34      	ldr	r3, [pc, #208]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	3301      	adds	r3, #1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	431a      	orrs	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	3b01      	subs	r3, #1
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4928      	ldr	r1, [pc, #160]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048a8:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	3b01      	subs	r3, #1
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	4922      	ldr	r1, [pc, #136]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01d      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048d6:	d118      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	0e1b      	lsrs	r3, r3, #24
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	019b      	lsls	r3, r3, #6
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	3b01      	subs	r3, #1
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	4910      	ldr	r1, [pc, #64]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800490a:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004910:	f7fd f866 	bl	80019e0 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004918:	f7fd f862 	bl	80019e0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e007      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004936:	d1ef      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3730      	adds	r7, #48	@ 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	42470070 	.word	0x42470070

0800494c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	@ 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	2b07      	cmp	r3, #7
 8004972:	f200 8224 	bhi.w	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004b7f 	.word	0x08004b7f
 8004980:	08004ca9 	.word	0x08004ca9
 8004984:	08004dbf 	.word	0x08004dbf
 8004988:	0800499d 	.word	0x0800499d
 800498c:	08004dbf 	.word	0x08004dbf
 8004990:	08004dbf 	.word	0x08004dbf
 8004994:	08004dbf 	.word	0x08004dbf
 8004998:	0800499d 	.word	0x0800499d
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800499c:	4ba8      	ldr	r3, [pc, #672]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800499e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049b2:	f000 80d6 	beq.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049bc:	f200 80dd 	bhi.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049c6:	f000 809f 	beq.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d0:	f200 80d3 	bhi.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049da:	d05b      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e2:	f200 80ca 	bhi.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049ec:	f000 80b6 	beq.w	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049f6:	f200 80c0 	bhi.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a00:	f000 8082 	beq.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a0a:	f200 80b6 	bhi.w	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1a:	d03b      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8004a1c:	e0ad      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a1e:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004a2a:	4b85      	ldr	r3, [pc, #532]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a34:	4a83      	ldr	r2, [pc, #524]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004a3e:	4b80      	ldr	r3, [pc, #512]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a48:	4a7f      	ldr	r2, [pc, #508]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004a50:	4b7b      	ldr	r3, [pc, #492]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8004a5e:	4b78      	ldr	r3, [pc, #480]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	fb03 f202 	mul.w	r2, r3, r2
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004a78:	4b71      	ldr	r3, [pc, #452]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	3301      	adds	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	61fb      	str	r3, [r7, #28]
          break;
 8004a92:	e073      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a94:	4b6a      	ldr	r3, [pc, #424]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004aa0:	4b67      	ldr	r3, [pc, #412]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aaa:	4a66      	ldr	r2, [pc, #408]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004ab4:	4b62      	ldr	r3, [pc, #392]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abe:	4a62      	ldr	r2, [pc, #392]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	fb03 f202 	mul.w	r2, r3, r2
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004aee:	4b54      	ldr	r3, [pc, #336]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	61fb      	str	r3, [r7, #28]
          break;
 8004b06:	e039      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b08:	4b4d      	ldr	r3, [pc, #308]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d108      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b14:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b1c:	4a49      	ldr	r2, [pc, #292]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e007      	b.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b26:	4b46      	ldr	r3, [pc, #280]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b2e:	4a46      	ldr	r2, [pc, #280]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004b36:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8004b42:	4b3f      	ldr	r3, [pc, #252]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	fb03 f202 	mul.w	r2, r3, r2
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	61fb      	str	r3, [r7, #28]
          break;
 8004b5a:	e00f      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004b5e:	61fb      	str	r3, [r7, #28]
          break;
 8004b60:	e00c      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b62:	4b37      	ldr	r3, [pc, #220]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004b6e:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004b70:	61fb      	str	r3, [r7, #28]
          break;
 8004b72:	e003      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004b74:	4b34      	ldr	r3, [pc, #208]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004b76:	61fb      	str	r3, [r7, #28]
          break;
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004b7a:	bf00      	nop
        }
      }
      break;
 8004b7c:	e120      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004b7e:	4b30      	ldr	r3, [pc, #192]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b84:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004b90:	d079      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004b98:	f200 8082 	bhi.w	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba2:	d03c      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004baa:	d879      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb8:	d172      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004bbc:	61fb      	str	r3, [r7, #28]
          break;
 8004bbe:	e072      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004bce:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e008      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004be2:	4b17      	ldr	r3, [pc, #92]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bec:	4a15      	ldr	r2, [pc, #84]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c08:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0e:	0f1b      	lsrs	r3, r3, #28
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
          break;
 8004c1c:	e043      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c2a:	d111      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c2c:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c34:	4a04      	ldr	r2, [pc, #16]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e010      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200
 8004c4c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c50:	4b5f      	ldr	r3, [pc, #380]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c58:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004c60:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004c72:	4b57      	ldr	r3, [pc, #348]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	0f1b      	lsrs	r3, r3, #28
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	61fb      	str	r3, [r7, #28]
          break;
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c86:	4b52      	ldr	r3, [pc, #328]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c92:	d102      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004c96:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004c98:	e005      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004c9c:	61fb      	str	r3, [r7, #28]
          break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
          break;
 8004ca4:	bf00      	nop
        }
      }
      break;
 8004ca6:	e08b      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004ca8:	4b49      	ldr	r3, [pc, #292]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cae:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004cba:	d06f      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004cc2:	d878      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cca:	d03c      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cd2:	d870      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce0:	d169      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8004ce4:	61fb      	str	r3, [r7, #28]
          break;
 8004ce6:	e069      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ce8:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004cf6:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d00:	4a35      	ldr	r2, [pc, #212]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d0a:	4b31      	ldr	r3, [pc, #196]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d14:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d30:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	61fb      	str	r3, [r7, #28]
          break;
 8004d44:	e03a      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d52:	d108      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d54:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e007      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d66:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d6e:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004d76:	4b16      	ldr	r3, [pc, #88]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0f1b      	lsrs	r3, r3, #28
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	61fb      	str	r3, [r7, #28]
          break;
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da8:	d102      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004dac:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004dae:	e005      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004db0:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004db2:	61fb      	str	r3, [r7, #28]
          break;
 8004db4:	e002      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
          break;
 8004dba:	bf00      	nop
        }
      }
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 8004dbe:	bf00      	nop
    }
  }
  return frequency;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	@ 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200
 8004ddc:	00bb8000 	.word	0x00bb8000

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b0ae      	sub	sp, #184	@ 0xb8
 8004de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e06:	4bcb      	ldr	r3, [pc, #812]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	f200 8206 	bhi.w	8005220 <HAL_RCC_GetSysClockFreq+0x440>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08005221 	.word	0x08005221
 8004e24:	08005221 	.word	0x08005221
 8004e28:	08005221 	.word	0x08005221
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08005221 	.word	0x08005221
 8004e34:	08005221 	.word	0x08005221
 8004e38:	08005221 	.word	0x08005221
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08005221 	.word	0x08005221
 8004e44:	08005221 	.word	0x08005221
 8004e48:	08005221 	.word	0x08005221
 8004e4c:	08005051 	.word	0x08005051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4bb9      	ldr	r3, [pc, #740]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e56:	e1e7      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e58:	4bb8      	ldr	r3, [pc, #736]	@ (800513c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e5e:	e1e3      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e60:	4bb4      	ldr	r3, [pc, #720]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e6c:	4bb1      	ldr	r3, [pc, #708]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d071      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e78:	4bae      	ldr	r3, [pc, #696]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	0159      	lsls	r1, r3, #5
 8004eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb0:	0150      	lsls	r0, r2, #5
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	1a51      	subs	r1, r2, r1
 8004eba:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	018b      	lsls	r3, r1, #6
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eda:	4641      	mov	r1, r8
 8004edc:	018a      	lsls	r2, r1, #6
 8004ede:	4641      	mov	r1, r8
 8004ee0:	1a51      	subs	r1, r2, r1
 8004ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ef8:	4649      	mov	r1, r9
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4641      	mov	r1, r8
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4641      	mov	r1, r8
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f12:	462b      	mov	r3, r5
 8004f14:	460a      	mov	r2, r1
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f28:	4629      	mov	r1, r5
 8004f2a:	024b      	lsls	r3, r1, #9
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f32:	4621      	mov	r1, r4
 8004f34:	024a      	lsls	r2, r1, #9
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f4c:	f7fb fd46 	bl	80009dc <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f5a:	e067      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5c:	4b75      	ldr	r3, [pc, #468]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f76:	2300      	movs	r3, #0
 8004f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f04f 0100 	mov.w	r1, #0
 8004f8a:	0159      	lsls	r1, r3, #5
 8004f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f90:	0150      	lsls	r0, r2, #5
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4621      	mov	r1, r4
 8004f98:	1a51      	subs	r1, r2, r1
 8004f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	018b      	lsls	r3, r1, #6
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fba:	4641      	mov	r1, r8
 8004fbc:	018a      	lsls	r2, r1, #6
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fde:	4692      	mov	sl, r2
 8004fe0:	469b      	mov	fp, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	462b      	mov	r3, r5
 8004fec:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005014:	2200      	movs	r2, #0
 8005016:	673b      	str	r3, [r7, #112]	@ 0x70
 8005018:	677a      	str	r2, [r7, #116]	@ 0x74
 800501a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800501e:	f7fb fcdd 	bl	80009dc <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4613      	mov	r3, r2
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800502c:	4b41      	ldr	r3, [pc, #260]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800503e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800504e:	e0eb      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005050:	4b38      	ldr	r3, [pc, #224]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800505c:	4b35      	ldr	r3, [pc, #212]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d06b      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005068:	4b32      	ldr	r3, [pc, #200]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x354>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	2200      	movs	r2, #0
 8005070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005074:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	663b      	str	r3, [r7, #96]	@ 0x60
 800507c:	2300      	movs	r3, #0
 800507e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005084:	4622      	mov	r2, r4
 8005086:	462b      	mov	r3, r5
 8005088:	f04f 0000 	mov.w	r0, #0
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	0159      	lsls	r1, r3, #5
 8005092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005096:	0150      	lsls	r0, r2, #5
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4621      	mov	r1, r4
 800509e:	1a51      	subs	r1, r2, r1
 80050a0:	61b9      	str	r1, [r7, #24]
 80050a2:	4629      	mov	r1, r5
 80050a4:	eb63 0301 	sbc.w	r3, r3, r1
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050b6:	4659      	mov	r1, fp
 80050b8:	018b      	lsls	r3, r1, #6
 80050ba:	4651      	mov	r1, sl
 80050bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050c0:	4651      	mov	r1, sl
 80050c2:	018a      	lsls	r2, r1, #6
 80050c4:	4651      	mov	r1, sl
 80050c6:	ebb2 0801 	subs.w	r8, r2, r1
 80050ca:	4659      	mov	r1, fp
 80050cc:	eb63 0901 	sbc.w	r9, r3, r1
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e4:	4690      	mov	r8, r2
 80050e6:	4699      	mov	r9, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	eb18 0303 	adds.w	r3, r8, r3
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	462b      	mov	r3, r5
 80050f2:	eb49 0303 	adc.w	r3, r9, r3
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005104:	4629      	mov	r1, r5
 8005106:	024b      	lsls	r3, r1, #9
 8005108:	4621      	mov	r1, r4
 800510a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800510e:	4621      	mov	r1, r4
 8005110:	024a      	lsls	r2, r1, #9
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800511a:	2200      	movs	r2, #0
 800511c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800511e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005124:	f7fb fc5a 	bl	80009dc <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4613      	mov	r3, r2
 800512e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005132:	e065      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x420>
 8005134:	40023800 	.word	0x40023800
 8005138:	00f42400 	.word	0x00f42400
 800513c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005140:	4b3d      	ldr	r3, [pc, #244]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x458>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	2200      	movs	r2, #0
 8005148:	4618      	mov	r0, r3
 800514a:	4611      	mov	r1, r2
 800514c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005150:	653b      	str	r3, [r7, #80]	@ 0x50
 8005152:	2300      	movs	r3, #0
 8005154:	657b      	str	r3, [r7, #84]	@ 0x54
 8005156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	0159      	lsls	r1, r3, #5
 8005168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800516c:	0150      	lsls	r0, r2, #5
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4641      	mov	r1, r8
 8005174:	1a51      	subs	r1, r2, r1
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	4649      	mov	r1, r9
 800517a:	eb63 0301 	sbc.w	r3, r3, r1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800518c:	4659      	mov	r1, fp
 800518e:	018b      	lsls	r3, r1, #6
 8005190:	4651      	mov	r1, sl
 8005192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005196:	4651      	mov	r1, sl
 8005198:	018a      	lsls	r2, r1, #6
 800519a:	4651      	mov	r1, sl
 800519c:	1a54      	subs	r4, r2, r1
 800519e:	4659      	mov	r1, fp
 80051a0:	eb63 0501 	sbc.w	r5, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	00eb      	lsls	r3, r5, #3
 80051ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b2:	00e2      	lsls	r2, r4, #3
 80051b4:	4614      	mov	r4, r2
 80051b6:	461d      	mov	r5, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	18e3      	adds	r3, r4, r3
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	464b      	mov	r3, r9
 80051c0:	eb45 0303 	adc.w	r3, r5, r3
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d2:	4629      	mov	r1, r5
 80051d4:	028b      	lsls	r3, r1, #10
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051dc:	4621      	mov	r1, r4
 80051de:	028a      	lsls	r2, r1, #10
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051e8:	2200      	movs	r2, #0
 80051ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051f2:	f7fb fbf3 	bl	80009dc <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4613      	mov	r3, r2
 80051fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005200:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x458>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	0f1b      	lsrs	r3, r3, #28
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800520e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800521e:	e003      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800522c:	4618      	mov	r0, r3
 800522e:	37b8      	adds	r7, #184	@ 0xb8
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	00f42400 	.word	0x00f42400

08005240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e28d      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8083 	beq.w	8005366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005260:	4b94      	ldr	r3, [pc, #592]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b04      	cmp	r3, #4
 800526a:	d019      	beq.n	80052a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800526c:	4b91      	ldr	r3, [pc, #580]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
        || \
 8005274:	2b08      	cmp	r3, #8
 8005276:	d106      	bne.n	8005286 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005278:	4b8e      	ldr	r3, [pc, #568]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b8b      	ldr	r3, [pc, #556]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d112      	bne.n	80052b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b88      	ldr	r3, [pc, #544]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b84      	ldr	r3, [pc, #528]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05b      	beq.n	8005364 <HAL_RCC_OscConfig+0x124>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d157      	bne.n	8005364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e25a      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x90>
 80052c2:	4b7c      	ldr	r3, [pc, #496]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a7b      	ldr	r2, [pc, #492]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xcc>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0xb4>
 80052da:	4b76      	ldr	r3, [pc, #472]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a75      	ldr	r2, [pc, #468]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b73      	ldr	r3, [pc, #460]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a72      	ldr	r2, [pc, #456]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xcc>
 80052f4:	4b6f      	ldr	r3, [pc, #444]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6e      	ldr	r2, [pc, #440]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b6c      	ldr	r3, [pc, #432]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6b      	ldr	r2, [pc, #428]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fb64 	bl	80019e0 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800531c:	f7fc fb60 	bl	80019e0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	@ 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e21f      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b61      	ldr	r3, [pc, #388]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xdc>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fb50 	bl	80019e0 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fc fb4c 	bl	80019e0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	@ 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e20b      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b57      	ldr	r3, [pc, #348]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x104>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d06f      	beq.n	8005452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800537e:	4b4d      	ldr	r3, [pc, #308]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
        || \
 8005386:	2b08      	cmp	r3, #8
 8005388:	d105      	bne.n	8005396 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800538a:	4b4a      	ldr	r3, [pc, #296]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005396:	4b47      	ldr	r3, [pc, #284]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	d11c      	bne.n	80053dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a2:	4b44      	ldr	r3, [pc, #272]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d116      	bne.n	80053dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ae:	4b41      	ldr	r3, [pc, #260]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_RCC_OscConfig+0x186>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e1d3      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c6:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4937      	ldr	r1, [pc, #220]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053da:	e03a      	b.n	8005452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d020      	beq.n	8005426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e4:	4b34      	ldr	r3, [pc, #208]	@ (80054b8 <HAL_RCC_OscConfig+0x278>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ea:	f7fc faf9 	bl	80019e0 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f2:	f7fc faf5 	bl	80019e0 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e1b4      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005404:	4b2b      	ldr	r3, [pc, #172]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005410:	4b28      	ldr	r3, [pc, #160]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4925      	ldr	r1, [pc, #148]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]
 8005424:	e015      	b.n	8005452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005426:	4b24      	ldr	r3, [pc, #144]	@ (80054b8 <HAL_RCC_OscConfig+0x278>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fc fad8 	bl	80019e0 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005434:	f7fc fad4 	bl	80019e0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e193      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005446:	4b1b      	ldr	r3, [pc, #108]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d036      	beq.n	80054cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <HAL_RCC_OscConfig+0x27c>)
 8005468:	2201      	movs	r2, #1
 800546a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546c:	f7fc fab8 	bl	80019e0 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005474:	f7fc fab4 	bl	80019e0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e173      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x234>
 8005492:	e01b      	b.n	80054cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005494:	4b09      	ldr	r3, [pc, #36]	@ (80054bc <HAL_RCC_OscConfig+0x27c>)
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fc faa1 	bl	80019e0 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	e00e      	b.n	80054c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a2:	f7fc fa9d 	bl	80019e0 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d907      	bls.n	80054c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e15c      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
 80054b4:	40023800 	.word	0x40023800
 80054b8:	42470000 	.word	0x42470000
 80054bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c0:	4b8a      	ldr	r3, [pc, #552]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80054c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1ea      	bne.n	80054a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8097 	beq.w	8005608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b83      	ldr	r3, [pc, #524]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	4b7f      	ldr	r3, [pc, #508]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	4a7e      	ldr	r2, [pc, #504]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054fa:	4b7c      	ldr	r3, [pc, #496]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b79      	ldr	r3, [pc, #484]	@ (80056f0 <HAL_RCC_OscConfig+0x4b0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d118      	bne.n	8005548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005516:	4b76      	ldr	r3, [pc, #472]	@ (80056f0 <HAL_RCC_OscConfig+0x4b0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a75      	ldr	r2, [pc, #468]	@ (80056f0 <HAL_RCC_OscConfig+0x4b0>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fc fa5d 	bl	80019e0 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552a:	f7fc fa59 	bl	80019e0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e118      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	4b6c      	ldr	r3, [pc, #432]	@ (80056f0 <HAL_RCC_OscConfig+0x4b0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d106      	bne.n	800555e <HAL_RCC_OscConfig+0x31e>
 8005550:	4b66      	ldr	r3, [pc, #408]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005554:	4a65      	ldr	r2, [pc, #404]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6713      	str	r3, [r2, #112]	@ 0x70
 800555c:	e01c      	b.n	8005598 <HAL_RCC_OscConfig+0x358>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b05      	cmp	r3, #5
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x340>
 8005566:	4b61      	ldr	r3, [pc, #388]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	4a60      	ldr	r2, [pc, #384]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 800556c:	f043 0304 	orr.w	r3, r3, #4
 8005570:	6713      	str	r3, [r2, #112]	@ 0x70
 8005572:	4b5e      	ldr	r3, [pc, #376]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	4a5d      	ldr	r2, [pc, #372]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6713      	str	r3, [r2, #112]	@ 0x70
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0x358>
 8005580:	4b5a      	ldr	r3, [pc, #360]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005584:	4a59      	ldr	r2, [pc, #356]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	@ 0x70
 800558c:	4b57      	ldr	r3, [pc, #348]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	4a56      	ldr	r2, [pc, #344]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005592:	f023 0304 	bic.w	r3, r3, #4
 8005596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fc fa1e 	bl	80019e0 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	e00a      	b.n	80055be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fc fa1a 	bl	80019e0 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0d7      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	4b4b      	ldr	r3, [pc, #300]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ee      	beq.n	80055a8 <HAL_RCC_OscConfig+0x368>
 80055ca:	e014      	b.n	80055f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055cc:	f7fc fa08 	bl	80019e0 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d4:	f7fc fa04 	bl	80019e0 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e0c1      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ea:	4b40      	ldr	r3, [pc, #256]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ee      	bne.n	80055d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d105      	bne.n	8005608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fc:	4b3b      	ldr	r3, [pc, #236]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	4a3a      	ldr	r2, [pc, #232]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80ad 	beq.w	800576c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005612:	4b36      	ldr	r3, [pc, #216]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b08      	cmp	r3, #8
 800561c:	d060      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d145      	bne.n	80056b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <HAL_RCC_OscConfig+0x4b4>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc f9d8 	bl	80019e0 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc f9d4 	bl	80019e0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e093      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	4b29      	ldr	r3, [pc, #164]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69da      	ldr	r2, [r3, #28]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	019b      	lsls	r3, r3, #6
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	3b01      	subs	r3, #1
 800566c:	041b      	lsls	r3, r3, #16
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	491b      	ldr	r1, [pc, #108]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005684:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <HAL_RCC_OscConfig+0x4b4>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fc f9a9 	bl	80019e0 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005692:	f7fc f9a5 	bl	80019e0 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e064      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x452>
 80056b0:	e05c      	b.n	800576c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b2:	4b10      	ldr	r3, [pc, #64]	@ (80056f4 <HAL_RCC_OscConfig+0x4b4>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc f992 	bl	80019e0 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fc f98e 	bl	80019e0 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e04d      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x480>
 80056de:	e045      	b.n	800576c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d107      	bne.n	80056f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e040      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40007000 	.word	0x40007000
 80056f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005778 <HAL_RCC_OscConfig+0x538>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d030      	beq.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d129      	bne.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d122      	bne.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800572e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005730:	4293      	cmp	r3, r2
 8005732:	d119      	bne.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	3b01      	subs	r3, #1
 8005742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d10f      	bne.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005754:	429a      	cmp	r2, r3
 8005756:	d107      	bne.n	8005768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800

0800577c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d904      	bls.n	800579e <HAL_SAI_InitProtocol+0x22>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3b03      	subs	r3, #3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d812      	bhi.n	80057c2 <HAL_SAI_InitProtocol+0x46>
 800579c:	e008      	b.n	80057b0 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fa87 	bl	8005cb8 <SAI_InitI2S>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
      break;
 80057ae:	e00b      	b.n	80057c8 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fb2c 	bl	8005e14 <SAI_InitPCM>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]
      break;
 80057c0:	e002      	b.n	80057c8 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
      break;
 80057c6:	bf00      	nop
  }

  if (status == HAL_OK)
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f808 	bl	80057e4 <HAL_SAI_Init>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e10c      	b.n	8005a20 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fb fdc4 	bl	80013a8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fba9 	bl	8005f80 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fc50 	bl	80060d4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d030      	beq.n	800589e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fc8d 	bl	800615c <SAI_GetInputClock>
 8005842:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	025b      	lsls	r3, r3, #9
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a72      	ldr	r2, [pc, #456]	@ (8005a28 <HAL_SAI_Init+0x244>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	08da      	lsrs	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	4b6e      	ldr	r3, [pc, #440]	@ (8005a28 <HAL_SAI_Init+0x244>)
 800586e:	fba3 2301 	umull	r2, r3, r3, r1
 8005872:	08da      	lsrs	r2, r3, #3
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	1aca      	subs	r2, r1, r3
 800587e:	2a08      	cmp	r2, #8
 8005880:	d904      	bls.n	800588c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	2b04      	cmp	r3, #4
 8005892:	d104      	bne.n	800589e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	085a      	lsrs	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_SAI_Init+0xca>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d109      	bne.n	80058c2 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_SAI_Init+0xd6>
 80058b6:	2300      	movs	r3, #0
 80058b8:	e001      	b.n	80058be <HAL_SAI_Init+0xda>
 80058ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e008      	b.n	80058d4 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_SAI_Init+0xec>
 80058ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ce:	e000      	b.n	80058d2 <HAL_SAI_Init+0xee>
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d811      	bhi.n	8005900 <HAL_SAI_Init+0x11c>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d20b      	bcs.n	80058f8 <HAL_SAI_Init+0x114>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_SAI_Init+0x106>
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d003      	beq.n	80058f0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80058e8:	e00a      	b.n	8005900 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
    break;
 80058ee:	e008      	b.n	8005902 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80058f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f4:	613b      	str	r3, [r7, #16]
    break;
 80058f6:	e004      	b.n	8005902 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80058f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058fc:	613b      	str	r3, [r7, #16]
    break;
 80058fe:	e000      	b.n	8005902 <HAL_SAI_Init+0x11e>
      break;
 8005900:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_SAI_Init+0x248>)
 800590e:	400b      	ands	r3, r1
 8005910:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005920:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005926:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	431a      	orrs	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800593a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005946:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005966:	f023 030f 	bic.w	r3, r3, #15
 800596a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b26      	ldr	r3, [pc, #152]	@ (8005a30 <HAL_SAI_Init+0x24c>)
 8005996:	400b      	ands	r3, r1
 8005998:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80059aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80059b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80059b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059bc:	3b01      	subs	r3, #1
 80059be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80059c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68d9      	ldr	r1, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80059d8:	400b      	ands	r3, r1
 80059da:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ea:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80059f2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f8:	3b01      	subs	r3, #1
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	cccccccd 	.word	0xcccccccd
 8005a2c:	ff05c010 	.word	0xff05c010
 8005a30:	fff88000 	.word	0xfff88000

08005a34 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_SAI_DMAStop+0x1a>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e061      	b.n	8005b12 <HAL_SAI_DMAStop+0xde>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa92 	bl	8005f80 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01c      	beq.n	8005aae <HAL_SAI_DMAStop+0x7a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b12      	cmp	r3, #18
 8005a7e:	d116      	bne.n	8005aae <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fc f9f9 	bl	8001e7c <HAL_DMA_Abort>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	2b80      	cmp	r3, #128	@ 0x80
 8005a98:	d009      	beq.n	8005aae <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01c      	beq.n	8005af0 <HAL_SAI_DMAStop+0xbc>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b22      	cmp	r3, #34	@ 0x22
 8005ac0:	d116      	bne.n	8005af0 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fc f9d8 	bl	8001e7c <HAL_DMA_Abort>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad8:	2b80      	cmp	r3, #128	@ 0x80
 8005ada:	d009      	beq.n	8005af0 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005b2a:	f7fb ff59 	bl	80019e0 <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SAI_Transmit_DMA+0x20>
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e093      	b.n	8005c68 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 808c 	bne.w	8005c66 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_SAI_Transmit_DMA+0x40>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e085      	b.n	8005c68 <HAL_SAI_Transmit_DMA+0x14c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2212      	movs	r2, #18
 8005b86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	4a38      	ldr	r2, [pc, #224]	@ (8005c70 <HAL_SAI_Transmit_DMA+0x154>)
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	4a37      	ldr	r2, [pc, #220]	@ (8005c74 <HAL_SAI_Transmit_DMA+0x158>)
 8005b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9e:	4a36      	ldr	r2, [pc, #216]	@ (8005c78 <HAL_SAI_Transmit_DMA+0x15c>)
 8005ba0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	331c      	adds	r3, #28
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8005bc2:	f7fc f903 	bl	8001dcc <HAL_DMA_Start_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e047      	b.n	8005c68 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005bd8:	2100      	movs	r1, #0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f99a 	bl	8005f14 <SAI_InterruptFlag>
 8005be0:	4601      	mov	r1, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005bfe:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005c00:	e015      	b.n	8005c2e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005c02:	f7fb feed 	bl	80019e0 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c10:	d90d      	bls.n	8005c2e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e01c      	b.n	8005c68 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0e2      	beq.n	8005c02 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c58:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08006051 	.word	0x08006051
 8005c74:	08005ff1 	.word	0x08005ff1
 8005c78:	0800606d 	.word	0x0800606d

08005c7c <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <SAI_InitI2S+0x2a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d103      	bne.n	8005cea <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ce8:	e002      	b.n	8005cf0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cfe:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e076      	b.n	8005e08 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d107      	bne.n	8005d30 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d2e:	e006      	b.n	8005d3e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d36:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d84f      	bhi.n	8005de4 <SAI_InitI2S+0x12c>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <SAI_InitI2S+0x94>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d7f 	.word	0x08005d7f
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005dc3 	.word	0x08005dc3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2280      	movs	r2, #128	@ 0x80
 8005d60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	011a      	lsls	r2, r3, #4
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2240      	movs	r2, #64	@ 0x40
 8005d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005d7c:	e034      	b.n	8005de8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2280      	movs	r2, #128	@ 0x80
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	019a      	lsls	r2, r3, #6
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005d9e:	e023      	b.n	8005de8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	22c0      	movs	r2, #192	@ 0xc0
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	019a      	lsls	r2, r3, #6
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2280      	movs	r2, #128	@ 0x80
 8005dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005dc0:	e012      	b.n	8005de8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	22e0      	movs	r2, #224	@ 0xe0
 8005dc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	019a      	lsls	r2, r3, #6
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2280      	movs	r2, #128	@ 0x80
 8005de0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005de2:	e001      	b.n	8005de8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e00f      	b.n	8005e08 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10b      	bne.n	8005e06 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2210      	movs	r2, #16
 8005df8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d102      	bne.n	8005e06 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2208      	movs	r2, #8
 8005e04:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <SAI_InitPCM+0x2a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d103      	bne.n	8005e46 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e44:	e002      	b.n	8005e4c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e58:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e74:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d103      	bne.n	8005e84 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	649a      	str	r2, [r3, #72]	@ 0x48
 8005e82:	e002      	b.n	8005e8a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	220d      	movs	r2, #13
 8005e88:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d837      	bhi.n	8005f00 <SAI_InitPCM+0xec>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <SAI_InitPCM+0x84>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	08005ebf 	.word	0x08005ebf
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005eeb 	.word	0x08005eeb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2280      	movs	r2, #128	@ 0x80
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	011a      	lsls	r2, r3, #4
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2240      	movs	r2, #64	@ 0x40
 8005eba:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005ebc:	e022      	b.n	8005f04 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2280      	movs	r2, #128	@ 0x80
 8005ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2280      	movs	r2, #128	@ 0x80
 8005ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005ed2:	e017      	b.n	8005f04 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	22c0      	movs	r2, #192	@ 0xc0
 8005ed8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2280      	movs	r2, #128	@ 0x80
 8005ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005ee8:	e00c      	b.n	8005f04 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	22e0      	movs	r2, #224	@ 0xe0
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2280      	movs	r2, #128	@ 0x80
 8005efc:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005efe:	e001      	b.n	8005f04 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d103      	bne.n	8005f30 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f043 0308 	orr.w	r3, r3, #8
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10b      	bne.n	8005f50 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d003      	beq.n	8005f48 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f043 0310 	orr.w	r3, r3, #16
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d003      	beq.n	8005f60 <SAI_InterruptFlag+0x4c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d104      	bne.n	8005f6a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e003      	b.n	8005f72 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f043 0304 	orr.w	r3, r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005f88:	4b17      	ldr	r3, [pc, #92]	@ (8005fe8 <SAI_Disable+0x68>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <SAI_Disable+0x6c>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	0b1b      	lsrs	r3, r3, #12
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005faa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	60fa      	str	r2, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	72fb      	strb	r3, [r7, #11]
      break;
 8005fca:	e006      	b.n	8005fda <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e8      	bne.n	8005fac <SAI_Disable+0x2c>

  return status;
 8005fda:	7afb      	ldrb	r3, [r7, #11]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	95cbec1b 	.word	0x95cbec1b

08005ff0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006006:	d01c      	beq.n	8006042 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800601e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006020:	2100      	movs	r1, #0
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff76 	bl	8005f14 <SAI_InterruptFlag>
 8006028:	4603      	mov	r3, r0
 800602a:	43d9      	mvns	r1, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	400a      	ands	r2, r1
 8006038:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fe1a 	bl	8005c7c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fe16 	bl	8005c90 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006080:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006090:	2b01      	cmp	r3, #1
 8006092:	d004      	beq.n	800609e <SAI_DMAError+0x32>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	2b01      	cmp	r3, #1
 800609c:	d112      	bne.n	80060c4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80060ac:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ff66 	bl	8005f80 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff fded 	bl	8005ca4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d00c      	beq.n	80060fe <SAI_BlockSynchroConfig+0x2a>
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d80d      	bhi.n	8006104 <SAI_BlockSynchroConfig+0x30>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <SAI_BlockSynchroConfig+0x1e>
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d003      	beq.n	80060f8 <SAI_BlockSynchroConfig+0x24>
 80060f0:	e008      	b.n	8006104 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
      break;
 80060f6:	e008      	b.n	800610a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80060f8:	2310      	movs	r3, #16
 80060fa:	60fb      	str	r3, [r7, #12]
      break;
 80060fc:	e005      	b.n	800610a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80060fe:	2320      	movs	r3, #32
 8006100:	60fb      	str	r3, [r7, #12]
      break;
 8006102:	e002      	b.n	800610a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
      break;
 8006108:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b03      	cmp	r3, #3
 8006110:	d103      	bne.n	800611a <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a0b      	ldr	r2, [pc, #44]	@ (800614c <SAI_BlockSynchroConfig+0x78>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <SAI_BlockSynchroConfig+0x5a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <SAI_BlockSynchroConfig+0x7c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d103      	bne.n	8006136 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800612e:	4a09      	ldr	r2, [pc, #36]	@ (8006154 <SAI_BlockSynchroConfig+0x80>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e003      	b.n	800613e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006136:	4a08      	ldr	r2, [pc, #32]	@ (8006158 <SAI_BlockSynchroConfig+0x84>)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40015804 	.word	0x40015804
 8006150:	40015824 	.word	0x40015824
 8006154:	40015800 	.word	0x40015800
 8006158:	40015c00 	.word	0x40015c00

0800615c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0a      	ldr	r2, [pc, #40]	@ (8006198 <SAI_GetInputClock+0x3c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <SAI_GetInputClock+0x20>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a09      	ldr	r2, [pc, #36]	@ (800619c <SAI_GetInputClock+0x40>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d104      	bne.n	8006186 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800617c:	2004      	movs	r0, #4
 800617e:	f7fe fbe5 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	e003      	b.n	800618e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006186:	2008      	movs	r0, #8
 8006188:	f7fe fbe0 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 800618c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40015804 	.word	0x40015804
 800619c:	40015824 	.word	0x40015824

080061a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e042      	b.n	8006238 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb fb32 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2224      	movs	r2, #36	@ 0x24
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f973 	bl	80064d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	@ 0x28
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b20      	cmp	r3, #32
 800625e:	d175      	bne.n	800634c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_UART_Transmit+0x2c>
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e06e      	b.n	800634e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2221      	movs	r2, #33	@ 0x21
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800627e:	f7fb fbaf 	bl	80019e0 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006298:	d108      	bne.n	80062ac <HAL_UART_Transmit+0x6c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	e003      	b.n	80062b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062b4:	e02e      	b.n	8006314 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	2180      	movs	r1, #128	@ 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f848 	bl	8006356 <UART_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e03a      	b.n	800634e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3302      	adds	r3, #2
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	e007      	b.n	8006306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1cb      	bne.n	80062b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	2140      	movs	r1, #64	@ 0x40
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f814 	bl	8006356 <UART_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006366:	e03b      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d037      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006370:	f7fb fb36 	bl	80019e0 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <UART_WaitOnFlagUntilTimeout+0x30>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e03a      	b.n	8006400 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d023      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b80      	cmp	r3, #128	@ 0x80
 800639c:	d020      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d01d      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d116      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f81d 	bl	8006408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2208      	movs	r2, #8
 80063d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e00f      	b.n	8006400 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d0b4      	beq.n	8006368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b095      	sub	sp, #84	@ 0x54
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006430:	643a      	str	r2, [r7, #64]	@ 0x40
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e5      	bne.n	8006410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3314      	adds	r3, #20
 800644a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	61fb      	str	r3, [r7, #28]
   return(result);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800646a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647c:	2b01      	cmp	r3, #1
 800647e:	d119      	bne.n	80064b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0310 	bic.w	r3, r3, #16
 8006496:	647b      	str	r3, [r7, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a0:	61ba      	str	r2, [r7, #24]
 80064a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6979      	ldr	r1, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	613b      	str	r3, [r7, #16]
   return(result);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064c2:	bf00      	nop
 80064c4:	3754      	adds	r7, #84	@ 0x54
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d4:	b0c0      	sub	sp, #256	@ 0x100
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ec:	68d9      	ldr	r1, [r3, #12]
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	ea40 0301 	orr.w	r3, r0, r1
 80064f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	431a      	orrs	r2, r3
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006528:	f021 010c 	bic.w	r1, r1, #12
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006536:	430b      	orrs	r3, r1
 8006538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	6999      	ldr	r1, [r3, #24]
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	ea40 0301 	orr.w	r3, r0, r1
 8006556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b8f      	ldr	r3, [pc, #572]	@ (800679c <UART_SetConfig+0x2cc>)
 8006560:	429a      	cmp	r2, r3
 8006562:	d005      	beq.n	8006570 <UART_SetConfig+0xa0>
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b8d      	ldr	r3, [pc, #564]	@ (80067a0 <UART_SetConfig+0x2d0>)
 800656c:	429a      	cmp	r2, r3
 800656e:	d104      	bne.n	800657a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fd feae 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8006574:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006578:	e003      	b.n	8006582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800657a:	f7fd fe95 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 800657e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658c:	f040 810c 	bne.w	80067a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800659a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800659e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065aa:	415b      	adcs	r3, r3
 80065ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065b2:	4621      	mov	r1, r4
 80065b4:	eb12 0801 	adds.w	r8, r2, r1
 80065b8:	4629      	mov	r1, r5
 80065ba:	eb43 0901 	adc.w	r9, r3, r1
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065d2:	4690      	mov	r8, r2
 80065d4:	4699      	mov	r9, r3
 80065d6:	4623      	mov	r3, r4
 80065d8:	eb18 0303 	adds.w	r3, r8, r3
 80065dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065e0:	462b      	mov	r3, r5
 80065e2:	eb49 0303 	adc.w	r3, r9, r3
 80065e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065fe:	460b      	mov	r3, r1
 8006600:	18db      	adds	r3, r3, r3
 8006602:	653b      	str	r3, [r7, #80]	@ 0x50
 8006604:	4613      	mov	r3, r2
 8006606:	eb42 0303 	adc.w	r3, r2, r3
 800660a:	657b      	str	r3, [r7, #84]	@ 0x54
 800660c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006614:	f7fa f9e2 	bl	80009dc <__aeabi_uldivmod>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4b61      	ldr	r3, [pc, #388]	@ (80067a4 <UART_SetConfig+0x2d4>)
 800661e:	fba3 2302 	umull	r2, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	011c      	lsls	r4, r3, #4
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006630:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	1891      	adds	r1, r2, r2
 800663e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006640:	415b      	adcs	r3, r3
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006648:	4641      	mov	r1, r8
 800664a:	eb12 0a01 	adds.w	sl, r2, r1
 800664e:	4649      	mov	r1, r9
 8006650:	eb43 0b01 	adc.w	fp, r3, r1
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006668:	4692      	mov	sl, r2
 800666a:	469b      	mov	fp, r3
 800666c:	4643      	mov	r3, r8
 800666e:	eb1a 0303 	adds.w	r3, sl, r3
 8006672:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006676:	464b      	mov	r3, r9
 8006678:	eb4b 0303 	adc.w	r3, fp, r3
 800667c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800668c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006694:	460b      	mov	r3, r1
 8006696:	18db      	adds	r3, r3, r3
 8006698:	643b      	str	r3, [r7, #64]	@ 0x40
 800669a:	4613      	mov	r3, r2
 800669c:	eb42 0303 	adc.w	r3, r2, r3
 80066a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066aa:	f7fa f997 	bl	80009dc <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	4b3b      	ldr	r3, [pc, #236]	@ (80067a4 <UART_SetConfig+0x2d4>)
 80066b6:	fba3 2301 	umull	r2, r3, r3, r1
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2264      	movs	r2, #100	@ 0x64
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	1acb      	subs	r3, r1, r3
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066ca:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <UART_SetConfig+0x2d4>)
 80066cc:	fba3 2302 	umull	r2, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066d8:	441c      	add	r4, r3
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	1891      	adds	r1, r2, r2
 80066f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066f4:	415b      	adcs	r3, r3
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066fc:	4641      	mov	r1, r8
 80066fe:	1851      	adds	r1, r2, r1
 8006700:	6339      	str	r1, [r7, #48]	@ 0x30
 8006702:	4649      	mov	r1, r9
 8006704:	414b      	adcs	r3, r1
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006714:	4659      	mov	r1, fp
 8006716:	00cb      	lsls	r3, r1, #3
 8006718:	4651      	mov	r1, sl
 800671a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671e:	4651      	mov	r1, sl
 8006720:	00ca      	lsls	r2, r1, #3
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	4603      	mov	r3, r0
 8006728:	4642      	mov	r2, r8
 800672a:	189b      	adds	r3, r3, r2
 800672c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006748:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800674c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006750:	460b      	mov	r3, r1
 8006752:	18db      	adds	r3, r3, r3
 8006754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006756:	4613      	mov	r3, r2
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006766:	f7fa f939 	bl	80009dc <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <UART_SetConfig+0x2d4>)
 8006770:	fba3 1302 	umull	r1, r3, r3, r2
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	2164      	movs	r1, #100	@ 0x64
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	3332      	adds	r3, #50	@ 0x32
 8006782:	4a08      	ldr	r2, [pc, #32]	@ (80067a4 <UART_SetConfig+0x2d4>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f003 0207 	and.w	r2, r3, #7
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4422      	add	r2, r4
 8006796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006798:	e106      	b.n	80069a8 <UART_SetConfig+0x4d8>
 800679a:	bf00      	nop
 800679c:	40011000 	.word	0x40011000
 80067a0:	40011400 	.word	0x40011400
 80067a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067ba:	4642      	mov	r2, r8
 80067bc:	464b      	mov	r3, r9
 80067be:	1891      	adds	r1, r2, r2
 80067c0:	6239      	str	r1, [r7, #32]
 80067c2:	415b      	adcs	r3, r3
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ca:	4641      	mov	r1, r8
 80067cc:	1854      	adds	r4, r2, r1
 80067ce:	4649      	mov	r1, r9
 80067d0:	eb43 0501 	adc.w	r5, r3, r1
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	00eb      	lsls	r3, r5, #3
 80067de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f0:	464b      	mov	r3, r9
 80067f2:	eb45 0303 	adc.w	r3, r5, r3
 80067f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006816:	4629      	mov	r1, r5
 8006818:	008b      	lsls	r3, r1, #2
 800681a:	4621      	mov	r1, r4
 800681c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006820:	4621      	mov	r1, r4
 8006822:	008a      	lsls	r2, r1, #2
 8006824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006828:	f7fa f8d8 	bl	80009dc <__aeabi_uldivmod>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4b60      	ldr	r3, [pc, #384]	@ (80069b4 <UART_SetConfig+0x4e4>)
 8006832:	fba3 2302 	umull	r2, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	011c      	lsls	r4, r3, #4
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006844:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	61b9      	str	r1, [r7, #24]
 8006854:	415b      	adcs	r3, r3
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800685c:	4641      	mov	r1, r8
 800685e:	1851      	adds	r1, r2, r1
 8006860:	6139      	str	r1, [r7, #16]
 8006862:	4649      	mov	r1, r9
 8006864:	414b      	adcs	r3, r1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006874:	4659      	mov	r1, fp
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	4651      	mov	r1, sl
 800687a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687e:	4651      	mov	r1, sl
 8006880:	00ca      	lsls	r2, r1, #3
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	4603      	mov	r3, r0
 8006888:	4642      	mov	r2, r8
 800688a:	189b      	adds	r3, r3, r2
 800688c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006890:	464b      	mov	r3, r9
 8006892:	460a      	mov	r2, r1
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068b4:	4649      	mov	r1, r9
 80068b6:	008b      	lsls	r3, r1, #2
 80068b8:	4641      	mov	r1, r8
 80068ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068be:	4641      	mov	r1, r8
 80068c0:	008a      	lsls	r2, r1, #2
 80068c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068c6:	f7fa f889 	bl	80009dc <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	4b38      	ldr	r3, [pc, #224]	@ (80069b4 <UART_SetConfig+0x4e4>)
 80068d2:	fba3 2301 	umull	r2, r3, r3, r1
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	2264      	movs	r2, #100	@ 0x64
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	1acb      	subs	r3, r1, r3
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	3332      	adds	r3, #50	@ 0x32
 80068e4:	4a33      	ldr	r2, [pc, #204]	@ (80069b4 <UART_SetConfig+0x4e4>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f0:	441c      	add	r4, r3
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80068fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80068fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	415b      	adcs	r3, r3
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006910:	4641      	mov	r1, r8
 8006912:	1851      	adds	r1, r2, r1
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	4649      	mov	r1, r9
 8006918:	414b      	adcs	r3, r1
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006928:	4659      	mov	r1, fp
 800692a:	00cb      	lsls	r3, r1, #3
 800692c:	4651      	mov	r1, sl
 800692e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006932:	4651      	mov	r1, sl
 8006934:	00ca      	lsls	r2, r1, #3
 8006936:	4610      	mov	r0, r2
 8006938:	4619      	mov	r1, r3
 800693a:	4603      	mov	r3, r0
 800693c:	4642      	mov	r2, r8
 800693e:	189b      	adds	r3, r3, r2
 8006940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006942:	464b      	mov	r3, r9
 8006944:	460a      	mov	r2, r1
 8006946:	eb42 0303 	adc.w	r3, r2, r3
 800694a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	663b      	str	r3, [r7, #96]	@ 0x60
 8006956:	667a      	str	r2, [r7, #100]	@ 0x64
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006964:	4649      	mov	r1, r9
 8006966:	008b      	lsls	r3, r1, #2
 8006968:	4641      	mov	r1, r8
 800696a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800696e:	4641      	mov	r1, r8
 8006970:	008a      	lsls	r2, r1, #2
 8006972:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006976:	f7fa f831 	bl	80009dc <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <UART_SetConfig+0x4e4>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	@ 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	3332      	adds	r3, #50	@ 0x32
 8006992:	4a08      	ldr	r2, [pc, #32]	@ (80069b4 <UART_SetConfig+0x4e4>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4422      	add	r2, r4
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	bf00      	nop
 80069aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ae:	46bd      	mov	sp, r7
 80069b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b4:	51eb851f 	.word	0x51eb851f

080069b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069b8:	b084      	sub	sp, #16
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	f107 001c 	add.w	r0, r7, #28
 80069c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d123      	bne.n	8006a1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80069e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fae2 	bl	8007fd8 <USB_CoreReset>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e01b      	b.n	8006a52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fad6 	bl	8007fd8 <USB_CoreReset>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a44:	e005      	b.n	8006a52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a52:	7fbb      	ldrb	r3, [r7, #30]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10b      	bne.n	8006a70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f043 0206 	orr.w	r2, r3, #6
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a7c:	b004      	add	sp, #16
 8006a7e:	4770      	bx	lr

08006a80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d165      	bne.n	8006b60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a41      	ldr	r2, [pc, #260]	@ (8006b9c <USB_SetTurnaroundTime+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d906      	bls.n	8006aaa <USB_SetTurnaroundTime+0x2a>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a40      	ldr	r2, [pc, #256]	@ (8006ba0 <USB_SetTurnaroundTime+0x120>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d202      	bcs.n	8006aaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006aa4:	230f      	movs	r3, #15
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e062      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba0 <USB_SetTurnaroundTime+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d306      	bcc.n	8006ac0 <USB_SetTurnaroundTime+0x40>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ba4 <USB_SetTurnaroundTime+0x124>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d202      	bcs.n	8006ac0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006aba:	230e      	movs	r3, #14
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e057      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a38      	ldr	r2, [pc, #224]	@ (8006ba4 <USB_SetTurnaroundTime+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d306      	bcc.n	8006ad6 <USB_SetTurnaroundTime+0x56>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4a37      	ldr	r2, [pc, #220]	@ (8006ba8 <USB_SetTurnaroundTime+0x128>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d202      	bcs.n	8006ad6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e04c      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a33      	ldr	r2, [pc, #204]	@ (8006ba8 <USB_SetTurnaroundTime+0x128>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d306      	bcc.n	8006aec <USB_SetTurnaroundTime+0x6c>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <USB_SetTurnaroundTime+0x12c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d802      	bhi.n	8006aec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e041      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a2f      	ldr	r2, [pc, #188]	@ (8006bac <USB_SetTurnaroundTime+0x12c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d906      	bls.n	8006b02 <USB_SetTurnaroundTime+0x82>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a2e      	ldr	r2, [pc, #184]	@ (8006bb0 <USB_SetTurnaroundTime+0x130>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d802      	bhi.n	8006b02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006afc:	230b      	movs	r3, #11
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e036      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb0 <USB_SetTurnaroundTime+0x130>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d906      	bls.n	8006b18 <USB_SetTurnaroundTime+0x98>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a29      	ldr	r2, [pc, #164]	@ (8006bb4 <USB_SetTurnaroundTime+0x134>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d802      	bhi.n	8006b18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b12:	230a      	movs	r3, #10
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e02b      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a26      	ldr	r2, [pc, #152]	@ (8006bb4 <USB_SetTurnaroundTime+0x134>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d906      	bls.n	8006b2e <USB_SetTurnaroundTime+0xae>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a25      	ldr	r2, [pc, #148]	@ (8006bb8 <USB_SetTurnaroundTime+0x138>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d202      	bcs.n	8006b2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b28:	2309      	movs	r3, #9
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e020      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <USB_SetTurnaroundTime+0x138>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d306      	bcc.n	8006b44 <USB_SetTurnaroundTime+0xc4>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a20      	ldr	r2, [pc, #128]	@ (8006bbc <USB_SetTurnaroundTime+0x13c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b3e:	2308      	movs	r3, #8
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e015      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <USB_SetTurnaroundTime+0x13c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d906      	bls.n	8006b5a <USB_SetTurnaroundTime+0xda>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc0 <USB_SetTurnaroundTime+0x140>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d202      	bcs.n	8006b5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b54:	2307      	movs	r3, #7
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e00a      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b5a:	2306      	movs	r3, #6
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e007      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b66:	2309      	movs	r3, #9
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e001      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b6c:	2309      	movs	r3, #9
 8006b6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00d8acbf 	.word	0x00d8acbf
 8006ba0:	00e4e1c0 	.word	0x00e4e1c0
 8006ba4:	00f42400 	.word	0x00f42400
 8006ba8:	01067380 	.word	0x01067380
 8006bac:	011a499f 	.word	0x011a499f
 8006bb0:	01312cff 	.word	0x01312cff
 8006bb4:	014ca43f 	.word	0x014ca43f
 8006bb8:	016e3600 	.word	0x016e3600
 8006bbc:	01a6ab1f 	.word	0x01a6ab1f
 8006bc0:	01e84800 	.word	0x01e84800

08006bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f043 0201 	orr.w	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d115      	bne.n	8006c56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c36:	200a      	movs	r0, #10
 8006c38:	f7fa fede 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	330a      	adds	r3, #10
 8006c40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f939 	bl	8007eba <USB_GetMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d01e      	beq.n	8006c8c <USB_SetCurrentMode+0x84>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c52:	d9f0      	bls.n	8006c36 <USB_SetCurrentMode+0x2e>
 8006c54:	e01a      	b.n	8006c8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d115      	bne.n	8006c88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c68:	200a      	movs	r0, #10
 8006c6a:	f7fa fec5 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	330a      	adds	r3, #10
 8006c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f920 	bl	8007eba <USB_GetMode>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <USB_SetCurrentMode+0x84>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c84:	d9f0      	bls.n	8006c68 <USB_SetCurrentMode+0x60>
 8006c86:	e001      	b.n	8006c8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e005      	b.n	8006c98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c90:	d101      	bne.n	8006c96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e009      	b.n	8006cd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3340      	adds	r3, #64	@ 0x40
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b0e      	cmp	r3, #14
 8006cd8:	d9f2      	bls.n	8006cc0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11c      	bne.n	8006d1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e005      	b.n	8006d28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2300      	movs	r3, #0
 8006d32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10d      	bne.n	8006d58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f968 	bl	800701c <USB_SetDevSpeed>
 8006d4c:	e008      	b.n	8006d60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d4e:	2101      	movs	r1, #1
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f963 	bl	800701c <USB_SetDevSpeed>
 8006d56:	e003      	b.n	8006d60 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d58:	2103      	movs	r1, #3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f95e 	bl	800701c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d60:	2110      	movs	r1, #16
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8fa 	bl	8006f5c <USB_FlushTxFifo>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f924 	bl	8006fc0 <USB_FlushRxFifo>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	461a      	mov	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e043      	b.n	8006e34 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc2:	d118      	bne.n	8006df6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e013      	b.n	8006e08 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dec:	461a      	mov	r2, r3
 8006dee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	e008      	b.n	8006e08 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e02:	461a      	mov	r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e26:	461a      	mov	r2, r3
 8006e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	3301      	adds	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e38:	461a      	mov	r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d3b5      	bcc.n	8006dac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	e043      	b.n	8006ece <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e5c:	d118      	bne.n	8006e90 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e70:	461a      	mov	r2, r3
 8006e72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	e013      	b.n	8006ea2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e86:	461a      	mov	r2, r3
 8006e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	e008      	b.n	8006ea2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eae:	461a      	mov	r2, r3
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d3b5      	bcc.n	8006e46 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006efa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006efc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f043 0210 	orr.w	r2, r3, #16
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <USB_DevInit+0x2b8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f043 0208 	orr.w	r2, r3, #8
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f54:	b004      	add	sp, #16
 8006f56:	4770      	bx	lr
 8006f58:	803c3800 	.word	0x803c3800

08006f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f76:	d901      	bls.n	8006f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e01b      	b.n	8006fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	daf2      	bge.n	8006f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	019b      	lsls	r3, r3, #6
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fa0:	d901      	bls.n	8006fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e006      	b.n	8006fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d0f0      	beq.n	8006f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fd8:	d901      	bls.n	8006fde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e018      	b.n	8007010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	daf2      	bge.n	8006fcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2210      	movs	r2, #16
 8006fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ffc:	d901      	bls.n	8007002 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e006      	b.n	8007010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b10      	cmp	r3, #16
 800700c:	d0f0      	beq.n	8006ff0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0306 	and.w	r3, r3, #6
 8007066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
 8007072:	e00a      	b.n	800708a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d002      	beq.n	8007080 <USB_GetDevSpeed+0x32>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b06      	cmp	r3, #6
 800707e:	d102      	bne.n	8007086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007080:	2302      	movs	r3, #2
 8007082:	75fb      	strb	r3, [r7, #23]
 8007084:	e001      	b.n	800708a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007086:	230f      	movs	r3, #15
 8007088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d13a      	bne.n	800712a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	2101      	movs	r1, #1
 80070c6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d155      	bne.n	8007198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	059b      	lsls	r3, r3, #22
 800710e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007110:	4313      	orrs	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800711e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e036      	b.n	8007198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	2101      	movs	r1, #1
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007148:	4313      	orrs	r3, r2
 800714a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d11a      	bne.n	8007198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	791b      	ldrb	r3, [r3, #4]
 800717c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800717e:	430b      	orrs	r3, r1
 8007180:	4313      	orrs	r3, r2
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d161      	bne.n	8007288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071da:	d11f      	bne.n	800721c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800721a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	b29b      	uxth	r3, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800723c:	4013      	ands	r3, r2
 800723e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	2101      	movs	r1, #1
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	b29b      	uxth	r3, r3
 8007258:	43db      	mvns	r3, r3
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007260:	4013      	ands	r3, r2
 8007262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	0159      	lsls	r1, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	440b      	add	r3, r1
 800727a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727e:	4619      	mov	r1, r3
 8007280:	4b35      	ldr	r3, [pc, #212]	@ (8007358 <USB_DeactivateEndpoint+0x1b0>)
 8007282:	4013      	ands	r3, r2
 8007284:	600b      	str	r3, [r1, #0]
 8007286:	e060      	b.n	800734a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800729a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800729e:	d11f      	bne.n	80072e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2101      	movs	r1, #1
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	43db      	mvns	r3, r3
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007300:	4013      	ands	r3, r2
 8007302:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	2101      	movs	r1, #1
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	43db      	mvns	r3, r3
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007324:	4013      	ands	r3, r2
 8007326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	0159      	lsls	r1, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	440b      	add	r3, r1
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	4619      	mov	r1, r3
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <USB_DeactivateEndpoint+0x1b4>)
 8007346:	4013      	ands	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	ec337800 	.word	0xec337800
 800735c:	eff37800 	.word	0xeff37800

08007360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	@ 0x28
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 817f 	bne.w	8007680 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d132      	bne.n	80073f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80073a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073e8:	0cdb      	lsrs	r3, r3, #19
 80073ea:	04db      	lsls	r3, r3, #19
 80073ec:	6113      	str	r3, [r2, #16]
 80073ee:	e097      	b.n	8007520 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740a:	0cdb      	lsrs	r3, r3, #19
 800740c:	04db      	lsls	r3, r3, #19
 800740e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800742e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007432:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11a      	bne.n	8007470 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d903      	bls.n	800744e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800746c:	6113      	str	r3, [r2, #16]
 800746e:	e044      	b.n	80074fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4413      	add	r3, r2
 800747a:	1e5a      	subs	r2, r3, #1
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	fbb2 f3f3 	udiv	r3, r2, r3
 8007484:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	8afb      	ldrh	r3, [r7, #22]
 8007496:	04d9      	lsls	r1, r3, #19
 8007498:	4ba4      	ldr	r3, [pc, #656]	@ (800772c <USB_EPStartXfer+0x3cc>)
 800749a:	400b      	ands	r3, r1
 800749c:	69b9      	ldr	r1, [r7, #24]
 800749e:	0148      	lsls	r0, r1, #5
 80074a0:	69f9      	ldr	r1, [r7, #28]
 80074a2:	4401      	add	r1, r0
 80074a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074a8:	4313      	orrs	r3, r2
 80074aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	791b      	ldrb	r3, [r3, #4]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d122      	bne.n	80074fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80074d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	8afb      	ldrh	r3, [r7, #22]
 80074e4:	075b      	lsls	r3, r3, #29
 80074e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80074ea:	69b9      	ldr	r1, [r7, #24]
 80074ec:	0148      	lsls	r0, r1, #5
 80074ee:	69f9      	ldr	r1, [r7, #28]
 80074f0:	4401      	add	r1, r0
 80074f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074f6:	4313      	orrs	r3, r2
 80074f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	0148      	lsls	r0, r1, #5
 8007514:	69f9      	ldr	r1, [r7, #28]
 8007516:	4401      	add	r1, r0
 8007518:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800751c:	4313      	orrs	r3, r2
 800751e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d14b      	bne.n	80075be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	791b      	ldrb	r3, [r3, #4]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d128      	bne.n	800759c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	2b00      	cmp	r3, #0
 8007558:	d110      	bne.n	800757c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	e00f      	b.n	800759c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	440a      	add	r2, r1
 8007592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800759a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e166      	b.n	800788c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d015      	beq.n	8007612 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 814e 	beq.w	800788c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	2101      	movs	r1, #1
 8007602:	fa01 f303 	lsl.w	r3, r1, r3
 8007606:	69f9      	ldr	r1, [r7, #28]
 8007608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800760c:	4313      	orrs	r3, r2
 800760e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007610:	e13c      	b.n	800788c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761e:	2b00      	cmp	r3, #0
 8007620:	d110      	bne.n	8007644 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00f      	b.n	8007664 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800765e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007662:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	68d9      	ldr	r1, [r3, #12]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	b298      	uxth	r0, r3
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	4603      	mov	r3, r0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f9b9 	bl	80079f0 <USB_WritePacket>
 800767e:	e105      	b.n	800788c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769a:	0cdb      	lsrs	r3, r3, #19
 800769c:	04db      	lsls	r3, r3, #19
 800769e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80076be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80076c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d132      	bne.n	8007730 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	0148      	lsls	r0, r1, #5
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	4401      	add	r1, r0
 8007700:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007704:	4313      	orrs	r3, r2
 8007706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007722:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007726:	6113      	str	r3, [r2, #16]
 8007728:	e062      	b.n	80077f0 <USB_EPStartXfer+0x490>
 800772a:	bf00      	nop
 800772c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d123      	bne.n	8007780 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	0148      	lsls	r0, r1, #5
 8007752:	69f9      	ldr	r1, [r7, #28]
 8007754:	4401      	add	r1, r0
 8007756:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800775a:	4313      	orrs	r3, r2
 800775c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800777c:	6113      	str	r3, [r2, #16]
 800777e:	e037      	b.n	80077f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4413      	add	r3, r2
 800778a:	1e5a      	subs	r2, r3, #1
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	fbb2 f3f3 	udiv	r3, r2, r3
 8007794:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	8afa      	ldrh	r2, [r7, #22]
 800779c:	fb03 f202 	mul.w	r2, r3, r2
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	04d9      	lsls	r1, r3, #19
 80077b6:	4b38      	ldr	r3, [pc, #224]	@ (8007898 <USB_EPStartXfer+0x538>)
 80077b8:	400b      	ands	r3, r1
 80077ba:	69b9      	ldr	r1, [r7, #24]
 80077bc:	0148      	lsls	r0, r1, #5
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	4401      	add	r1, r0
 80077c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077c6:	4313      	orrs	r3, r2
 80077c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077e0:	69b9      	ldr	r1, [r7, #24]
 80077e2:	0148      	lsls	r0, r1, #5
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	4401      	add	r1, r0
 80077e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077ec:	4313      	orrs	r3, r2
 80077ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d10d      	bne.n	8007812 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68d9      	ldr	r1, [r3, #12]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780e:	460a      	mov	r2, r1
 8007810:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	791b      	ldrb	r3, [r3, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d128      	bne.n	800786c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007826:	2b00      	cmp	r3, #0
 8007828:	d110      	bne.n	800784c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007844:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	e00f      	b.n	800786c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800786a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007886:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800788a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	1ff80000 	.word	0x1ff80000

0800789c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d14a      	bne.n	8007950 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078d2:	f040 8086 	bne.w	80079e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800791c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f242 7210 	movw	r2, #10000	@ 0x2710
 800792a:	4293      	cmp	r3, r2
 800792c:	d902      	bls.n	8007934 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	75fb      	strb	r3, [r7, #23]
          break;
 8007932:	e056      	b.n	80079e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800794c:	d0e7      	beq.n	800791e <USB_EPStopXfer+0x82>
 800794e:	e048      	b.n	80079e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007968:	d13b      	bne.n	80079e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	440a      	add	r2, r1
 8007984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007988:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800798c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079be:	4293      	cmp	r3, r2
 80079c0:	d902      	bls.n	80079c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
          break;
 80079c6:	e00c      	b.n	80079e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e0:	d0e7      	beq.n	80079b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b089      	sub	sp, #36	@ 0x24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	460b      	mov	r3, r1
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d123      	bne.n	8007a5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a16:	88bb      	ldrh	r3, [r7, #4]
 8007a18:	3303      	adds	r3, #3
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	e018      	b.n	8007a56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	031a      	lsls	r2, r3, #12
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a30:	461a      	mov	r2, r3
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d3e2      	bcc.n	8007a24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3724      	adds	r7, #36	@ 0x24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b08b      	sub	sp, #44	@ 0x2c
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	089b      	lsrs	r3, r3, #2
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a92:	2300      	movs	r3, #0
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	e014      	b.n	8007ac2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	3301      	adds	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	3301      	adds	r3, #1
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3e6      	bcc.n	8007a98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007aca:	8bfb      	ldrh	r3, [r7, #30]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01e      	beq.n	8007b0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ada:	461a      	mov	r2, r3
 8007adc:	f107 0310 	add.w	r3, r7, #16
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	701a      	strb	r2, [r3, #0]
      i++;
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	3301      	adds	r3, #1
 8007afa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	3301      	adds	r3, #1
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007b02:	8bfb      	ldrh	r3, [r7, #30]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b08:	8bfb      	ldrh	r3, [r7, #30]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1ea      	bne.n	8007ae4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	372c      	adds	r7, #44	@ 0x2c
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d12c      	bne.n	8007b92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	db12      	blt.n	8007b70 <USB_EPSetStall+0x54>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00f      	beq.n	8007b70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e02b      	b.n	8007bea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	db12      	blt.n	8007bca <USB_EPSetStall+0xae>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00f      	beq.n	8007bca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007bc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007be8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d128      	bne.n	8007c66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d003      	beq.n	8007c44 <USB_EPClearStall+0x4c>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	791b      	ldrb	r3, [r3, #4]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d138      	bne.n	8007cb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e027      	b.n	8007cb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d003      	beq.n	8007c96 <USB_EPClearStall+0x9e>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d10f      	bne.n	8007cb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	0151      	lsls	r1, r2, #5
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	440a      	add	r2, r1
 8007cac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ce2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ce6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d3e:	f023 0302 	bic.w	r3, r3, #2
 8007d42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4013      	ands	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dac:	68fb      	ldr	r3, [r7, #12]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	0c1b      	lsrs	r3, r3, #16
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	b29b      	uxth	r3, r3
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e50:	68bb      	ldr	r3, [r7, #8]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	01db      	lsls	r3, r3, #7
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eac:	68bb      	ldr	r3, [r7, #8]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ef4:	f023 0307 	bic.w	r3, r3, #7
 8007ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	460b      	mov	r3, r1
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	333c      	adds	r3, #60	@ 0x3c
 8007f32:	3304      	adds	r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4a26      	ldr	r2, [pc, #152]	@ (8007fd4 <USB_EP0_OutStart+0xb8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d90a      	bls.n	8007f56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f50:	d101      	bne.n	8007f56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e037      	b.n	8007fc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f84:	f043 0318 	orr.w	r3, r3, #24
 8007f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007f9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d10f      	bne.n	8007fc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007fc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	4f54300a 	.word	0x4f54300a

08007fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff0:	d901      	bls.n	8007ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e01b      	b.n	800802e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	daf2      	bge.n	8007fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f043 0201 	orr.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800801a:	d901      	bls.n	8008020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e006      	b.n	800802e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b01      	cmp	r3, #1
 800802a:	d0f0      	beq.n	800800e <USB_CoreReset+0x36>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
	...

0800803c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8008048:	f647 0050 	movw	r0, #30800	@ 0x7850
 800804c:	f002 fbf6 	bl	800a83c <USBD_static_malloc>
 8008050:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32b0      	adds	r2, #176	@ 0xb0
 8008062:	2100      	movs	r1, #0
 8008064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008068:	2302      	movs	r3, #2
 800806a:	e07f      	b.n	800816c <USBD_AUDIO_Init+0x130>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	32b0      	adds	r2, #176	@ 0xb0
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	32b0      	adds	r2, #176	@ 0xb0
 8008086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7c1b      	ldrb	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10e      	bne.n	80080b6 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8008098:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <USBD_AUDIO_Init+0x138>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80080b0:	2201      	movs	r2, #1
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	e00d      	b.n	80080d2 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80080b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008174 <USBD_AUDIO_Init+0x138>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f003 020f 	and.w	r2, r3, #15
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80080ce:	2201      	movs	r2, #1
 80080d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80080d2:	4b28      	ldr	r3, [pc, #160]	@ (8008174 <USBD_AUDIO_Init+0x138>)
 80080d4:	7819      	ldrb	r1, [r3, #0]
 80080d6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80080da:	2201      	movs	r2, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f002 fa3c 	bl	800a55a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 80080e2:	4b24      	ldr	r3, [pc, #144]	@ (8008174 <USBD_AUDIO_Init+0x138>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	f003 020f 	and.w	r2, r3, #15
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080fa:	2201      	movs	r2, #1
 80080fc:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800810a:	2203      	movs	r2, #3
 800810c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  haudio->wr_ptr = 0U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
  haudio->rd_ptr = 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
  haudio->rd_enable = 0U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	33b0      	adds	r3, #176	@ 0xb0
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	2146      	movs	r1, #70	@ 0x46
 800814a:	480b      	ldr	r0, [pc, #44]	@ (8008178 <USBD_AUDIO_Init+0x13c>)
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e009      	b.n	800816c <USBD_AUDIO_Init+0x130>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <USBD_AUDIO_Init+0x138>)
 800815a:	7819      	ldrb	r1, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f002 fae7 	bl	800a738 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	200000be 	.word	0x200000be
 8008178:	00017700 	.word	0x00017700

0800817c <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8008188:	4b28      	ldr	r3, [pc, #160]	@ (800822c <USBD_AUDIO_DeInit+0xb0>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f002 fa09 	bl	800a5a6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8008194:	4b25      	ldr	r3, [pc, #148]	@ (800822c <USBD_AUDIO_DeInit+0xb0>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081ac:	2200      	movs	r2, #0
 80081ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80081b0:	4b1e      	ldr	r3, [pc, #120]	@ (800822c <USBD_AUDIO_DeInit+0xb0>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 020f 	and.w	r2, r3, #15
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80081c8:	2200      	movs	r2, #0
 80081ca:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32b0      	adds	r2, #176	@ 0xb0
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d020      	beq.n	8008220 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	33b0      	adds	r3, #176	@ 0xb0
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2000      	movs	r0, #0
 80081f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	32b0      	adds	r2, #176	@ 0xb0
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	4618      	mov	r0, r3
 8008204:	f002 fb28 	bl	800a858 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32b0      	adds	r2, #176	@ 0xb0
 8008212:	2100      	movs	r1, #0
 8008214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	200000be 	.word	0x200000be

08008230 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	32b0      	adds	r2, #176	@ 0xb0
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	e0c1      	b.n	80083e0 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01a      	beq.n	800829e <USBD_AUDIO_Setup+0x6e>
 8008268:	2b20      	cmp	r3, #32
 800826a:	f040 80b1 	bne.w	80083d0 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d006      	beq.n	8008284 <USBD_AUDIO_Setup+0x54>
 8008276:	2b81      	cmp	r3, #129	@ 0x81
 8008278:	d109      	bne.n	800828e <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f9f9 	bl	8008674 <AUDIO_REQ_GetCurrent>
          break;
 8008282:	e00b      	b.n	800829c <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa20 	bl	80086cc <AUDIO_REQ_SetCurrent>
          break;
 800828c:	e006      	b.n	800829c <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fcce 	bl	8009c32 <USBD_CtlError>
          ret = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	75fb      	strb	r3, [r7, #23]
          break;
 800829a:	bf00      	nop
      }
      break;
 800829c:	e09f      	b.n	80083de <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b0b      	cmp	r3, #11
 80082a4:	f200 8089 	bhi.w	80083ba <USBD_AUDIO_Setup+0x18a>
 80082a8:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <USBD_AUDIO_Setup+0x80>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082e1 	.word	0x080082e1
 80082b4:	080083c9 	.word	0x080083c9
 80082b8:	080083bb 	.word	0x080083bb
 80082bc:	080083bb 	.word	0x080083bb
 80082c0:	080083bb 	.word	0x080083bb
 80082c4:	080083bb 	.word	0x080083bb
 80082c8:	0800830b 	.word	0x0800830b
 80082cc:	080083bb 	.word	0x080083bb
 80082d0:	080083bb 	.word	0x080083bb
 80082d4:	080083bb 	.word	0x080083bb
 80082d8:	08008353 	.word	0x08008353
 80082dc:	0800837b 	.word	0x0800837b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d107      	bne.n	80082fc <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	2202      	movs	r2, #2
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fd19 	bl	8009d2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082fa:	e068      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fc97 	bl	8009c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	75fb      	strb	r3, [r7, #23]
          break;
 8008308:	e061      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b21      	cmp	r3, #33	@ 0x21
 8008314:	d15a      	bne.n	80083cc <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fa43 	bl	80087a8 <USBD_AUDIO_GetAudioHeaderDesc>
 8008322:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00c      	beq.n	8008344 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	88db      	ldrh	r3, [r3, #6]
 800832e:	2b09      	cmp	r3, #9
 8008330:	bf28      	it	cs
 8008332:	2309      	movcs	r3, #9
 8008334:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8008336:	897b      	ldrh	r3, [r7, #10]
 8008338:	461a      	mov	r2, r3
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fcf5 	bl	8009d2c <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8008342:	e043      	b.n	80083cc <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fc73 	bl	8009c32 <USBD_CtlError>
              ret = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	75fb      	strb	r3, [r7, #23]
          break;
 8008350:	e03c      	b.n	80083cc <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d106      	bne.n	800836c <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2201      	movs	r2, #1
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fce1 	bl	8009d2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800836a:	e030      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 fc5f 	bl	8009c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	75fb      	strb	r3, [r7, #23]
          break;
 8008378:	e029      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d112      	bne.n	80083ac <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	885b      	ldrh	r3, [r3, #2]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d806      	bhi.n	800839e <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800839c:	e017      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fc46 	bl	8009c32 <USBD_CtlError>
              ret = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	75fb      	strb	r3, [r7, #23]
          break;
 80083aa:	e010      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fc3f 	bl	8009c32 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	75fb      	strb	r3, [r7, #23]
          break;
 80083b8:	e009      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 fc38 	bl	8009c32 <USBD_CtlError>
          ret = USBD_FAIL;
 80083c2:	2303      	movs	r3, #3
 80083c4:	75fb      	strb	r3, [r7, #23]
          break;
 80083c6:	e002      	b.n	80083ce <USBD_AUDIO_Setup+0x19e>
          break;
 80083c8:	bf00      	nop
 80083ca:	e008      	b.n	80083de <USBD_AUDIO_Setup+0x1ae>
          break;
 80083cc:	bf00      	nop
      }
      break;
 80083ce:	e006      	b.n	80083de <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fc2d 	bl	8009c32 <USBD_CtlError>
      ret = USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	226d      	movs	r2, #109	@ 0x6d
 80083f4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	@ (8008404 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	20000044 	.word	0x20000044

08008408 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	32b0      	adds	r2, #176	@ 0xb0
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008440:	2303      	movs	r3, #3
 8008442:	e02a      	b.n	800849a <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800844a:	f893 380a 	ldrb.w	r3, [r3, #2058]	@ 0x80a
 800844e:	2b01      	cmp	r3, #1
 8008450:	d122      	bne.n	8008498 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008458:	f893 384c 	ldrb.w	r3, [r3, #2124]	@ 0x84c
 800845c:	2b02      	cmp	r3, #2
 800845e:	d11b      	bne.n	8008498 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	33b0      	adds	r3, #176	@ 0xb0
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 8008478:	f892 280b 	ldrb.w	r2, [r2, #2059]	@ 0x80b
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008486:	2200      	movs	r2, #0
 8008488:	f883 280a 	strb.w	r2, [r3, #2058]	@ 0x80a
      haudio->control.len = 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008492:	2200      	movs	r2, #0
 8008494:	f883 284b 	strb.w	r2, [r3, #2123]	@ 0x84b
    }
  }

  return (uint8_t)USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32b0      	adds	r2, #176	@ 0xb0
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008506:	2303      	movs	r3, #3
 8008508:	e017      	b.n	800853a <USBD_AUDIO_IsoOutIncomplete+0x52>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32b0      	adds	r2, #176	@ 0xb0
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008520:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8008524:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	1d1a      	adds	r2, r3, #4
 800852c:	78f9      	ldrb	r1, [r7, #3]
 800852e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f002 f900 	bl	800a738 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	32b0      	adds	r2, #176	@ 0xb0
 800855a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	e07d      	b.n	8008666 <USBD_AUDIO_DataOut+0x122>
  }

  if (epnum == AUDIOOutEpAdd)
 800856a:	4b41      	ldr	r3, [pc, #260]	@ (8008670 <USBD_AUDIO_DataOut+0x12c>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	429a      	cmp	r2, r3
 8008572:	d177      	bne.n	8008664 <USBD_AUDIO_DataOut+0x120>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f002 f8fe 	bl	800a77a <USBD_LL_GetRxDataSize>
 800857e:	4603      	mov	r3, r0
 8008580:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	33b0      	adds	r3, #176	@ 0xb0
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 800859a:	f8b2 2808 	ldrh.w	r2, [r2, #2056]	@ 0x808
 800859e:	4611      	mov	r1, r2
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	440a      	add	r2, r1
 80085a4:	1d10      	adds	r0, r2, #4
 80085a6:	8979      	ldrh	r1, [r7, #10]
 80085a8:	2201      	movs	r2, #1
 80085aa:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80085b2:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	@ 0x808
 80085b6:	897b      	ldrh	r3, [r7, #10]
 80085b8:	4413      	add	r3, r2
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80085c2:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80085cc:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 80085d0:	f5b3 4ff0 	cmp.w	r3, #30720	@ 0x7800
 80085d4:	d321      	bcc.n	800861a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80085dc:	2200      	movs	r2, #0
 80085de:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80085e8:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d114      	bne.n	800861a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	33b0      	adds	r3, #176	@ 0xb0
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	1d10      	adds	r0, r2, #4
 8008606:	2201      	movs	r2, #1
 8008608:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 800860c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      }
    }

    if (haudio->rd_enable == 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008620:	f893 3805 	ldrb.w	r3, [r3, #2053]	@ 0x805
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800862e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8008632:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8008636:	d105      	bne.n	8008644 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8008644:	4b0a      	ldr	r3, [pc, #40]	@ (8008670 <USBD_AUDIO_DataOut+0x12c>)
 8008646:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800864e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 8008652:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	1d1a      	adds	r2, r3, #4
 800865a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f002 f86a 	bl	800a738 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200000be 	.word	0x200000be

08008674 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	32b0      	adds	r2, #176	@ 0xb0
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d017      	beq.n	80086c4 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 43f0 	add.w	r3, r3, #30720	@ 0x7800
 800869a:	330b      	adds	r3, #11
 800869c:	2240      	movs	r2, #64	@ 0x40
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f002 fb21 	bl	800ace8 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 43f0 	add.w	r3, r3, #30720	@ 0x7800
 80086ac:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	88d2      	ldrh	r2, [r2, #6]
 80086b2:	2a40      	cmp	r2, #64	@ 0x40
 80086b4:	bf28      	it	cs
 80086b6:	2240      	movcs	r2, #64	@ 0x40
 80086b8:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fb35 	bl	8009d2c <USBD_CtlSendData>
 80086c2:	e000      	b.n	80086c6 <AUDIO_REQ_GetCurrent+0x52>
    return;
 80086c4:	bf00      	nop
}
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	32b0      	adds	r2, #176	@ 0xb0
 80086e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02f      	beq.n	800874c <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	88db      	ldrh	r3, [r3, #6]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d02c      	beq.n	800874e <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 280a 	strb.w	r2, [r3, #2058]	@ 0x80a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	88db      	ldrh	r3, [r3, #6]
 8008704:	2b3f      	cmp	r3, #63	@ 0x3f
 8008706:	d803      	bhi.n	8008710 <AUDIO_REQ_SetCurrent+0x44>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	b2da      	uxtb	r2, r3
 800870e:	e000      	b.n	8008712 <AUDIO_REQ_SetCurrent+0x46>
 8008710:	2240      	movs	r2, #64	@ 0x40
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8008718:	f883 284b 	strb.w	r2, [r3, #2123]	@ 0x84b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	889b      	ldrh	r3, [r3, #4]
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	b29b      	uxth	r3, r3
 8008724:	b2da      	uxtb	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800872c:	f883 284c 	strb.w	r2, [r3, #2124]	@ 0x84c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 43f0 	add.w	r3, r3, #30720	@ 0x7800
 8008736:	330b      	adds	r3, #11
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 800873e:	f892 284b 	ldrb.w	r2, [r2, #2123]	@ 0x84b
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fb1d 	bl	8009d84 <USBD_CtlPrepareRx>
 800874a:	e000      	b.n	800874e <AUDIO_REQ_SetCurrent+0x82>
    return;
 800874c:	bf00      	nop
  }
}
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220a      	movs	r2, #10
 8008760:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8008762:	4b03      	ldr	r3, [pc, #12]	@ (8008770 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	200000b4 	.word	0x200000b4

08008774 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	e009      	b.n	800879c <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	33b0      	adds	r3, #176	@ 0xb0
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d91b      	bls.n	8008802 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087d0:	e011      	b.n	80087f6 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087d2:	f107 030a 	add.w	r3, r7, #10
 80087d6:	4619      	mov	r1, r3
 80087d8:	6978      	ldr	r0, [r7, #20]
 80087da:	f000 fc02 	bl	8008fe2 <USBD_GetNextDesc>
 80087de:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	2b24      	cmp	r3, #36	@ 0x24
 80087e6:	d106      	bne.n	80087f6 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d102      	bne.n	80087f6 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	613b      	str	r3, [r7, #16]
        break;
 80087f4:	e005      	b.n	8008802 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	885b      	ldrh	r3, [r3, #2]
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	897b      	ldrh	r3, [r7, #10]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d8e7      	bhi.n	80087d2 <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 8008802:	693b      	ldr	r3, [r7, #16]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008820:	4817      	ldr	r0, [pc, #92]	@ (8008880 <USBD_Init+0x74>)
 8008822:	f002 f911 	bl	800aa48 <iprintf>
 8008826:	4817      	ldr	r0, [pc, #92]	@ (8008884 <USBD_Init+0x78>)
 8008828:	f002 f90e 	bl	800aa48 <iprintf>
 800882c:	200a      	movs	r0, #10
 800882e:	f002 f91d 	bl	800aa6c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008832:	2303      	movs	r3, #3
 8008834:	e01f      	b.n	8008876 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	79fa      	ldrb	r2, [r7, #7]
 8008868:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 fe0e 	bl	800a48c <USBD_LL_Init>
 8008870:	4603      	mov	r3, r0
 8008872:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	0800c8d8 	.word	0x0800c8d8
 8008884:	0800c8e0 	.word	0x0800c8e0

08008888 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800889c:	481a      	ldr	r0, [pc, #104]	@ (8008908 <USBD_RegisterClass+0x80>)
 800889e:	f002 f8d3 	bl	800aa48 <iprintf>
 80088a2:	481a      	ldr	r0, [pc, #104]	@ (800890c <USBD_RegisterClass+0x84>)
 80088a4:	f002 f8d0 	bl	800aa48 <iprintf>
 80088a8:	200a      	movs	r0, #10
 80088aa:	f002 f8df 	bl	800aa6c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e025      	b.n	80088fe <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	32ae      	adds	r2, #174	@ 0xae
 80088c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00f      	beq.n	80088ee <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	32ae      	adds	r2, #174	@ 0xae
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	f107 020e 	add.w	r2, r7, #14
 80088e2:	4610      	mov	r0, r2
 80088e4:	4798      	blx	r3
 80088e6:	4602      	mov	r2, r0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	0800c8d8 	.word	0x0800c8d8
 800890c:	0800c8f8 	.word	0x0800c8f8

08008910 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fe03 	bl	800a524 <USBD_LL_Start>
 800891e:	4603      	mov	r3, r0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	4611      	mov	r1, r2
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4798      	blx	r3
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 f8fe 	bl	8009bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d01a      	beq.n	8008a1c <USBD_LL_SetupStage+0x72>
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d822      	bhi.n	8008a30 <USBD_LL_SetupStage+0x86>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <USBD_LL_SetupStage+0x4a>
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d00a      	beq.n	8008a08 <USBD_LL_SetupStage+0x5e>
 80089f2:	e01d      	b.n	8008a30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fb2b 	bl	8009058 <USBD_StdDevReq>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
      break;
 8008a06:	e020      	b.n	8008a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb93 	bl	800913c <USBD_StdItfReq>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1a:	e016      	b.n	8008a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fbf5 	bl	8009214 <USBD_StdEPReq>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2e:	e00c      	b.n	8008a4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fdd0 	bl	800a5e4 <USBD_LL_StallEP>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
      break;
 8008a48:	bf00      	nop
  }

  return ret;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a66:	7afb      	ldrb	r3, [r7, #11]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d16e      	bne.n	8008b4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	f040 8098 	bne.w	8008bb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d913      	bls.n	8008ab4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	bf28      	it	cs
 8008aa6:	4613      	movcs	r3, r2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f001 f986 	bl	8009dbe <USBD_CtlContinueRx>
 8008ab2:	e07d      	b.n	8008bb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d014      	beq.n	8008aec <USBD_LL_DataOutStage+0x98>
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d81d      	bhi.n	8008b02 <USBD_LL_DataOutStage+0xae>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <USBD_LL_DataOutStage+0x7c>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d003      	beq.n	8008ad6 <USBD_LL_DataOutStage+0x82>
 8008ace:	e018      	b.n	8008b02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ad4:	e018      	b.n	8008b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 fa64 	bl	8008fae <USBD_CoreFindIF>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8008aea:	e00d      	b.n	8008b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fa66 	bl	8008fc8 <USBD_CoreFindEP>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75bb      	strb	r3, [r7, #22]
            break;
 8008b00:	e002      	b.n	8008b08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75bb      	strb	r3, [r7, #22]
            break;
 8008b06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d119      	bne.n	8008b42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d113      	bne.n	8008b42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b1a:	7dba      	ldrb	r2, [r7, #22]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	32ae      	adds	r2, #174	@ 0xae
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b2a:	7dba      	ldrb	r2, [r7, #22]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b32:	7dba      	ldrb	r2, [r7, #22]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	32ae      	adds	r2, #174	@ 0xae
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f001 f94c 	bl	8009de0 <USBD_CtlSendStatus>
 8008b48:	e032      	b.n	8008bb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b4a:	7afb      	ldrb	r3, [r7, #11]
 8008b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	4619      	mov	r1, r3
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fa37 	bl	8008fc8 <USBD_CoreFindEP>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b5e:	7dbb      	ldrb	r3, [r7, #22]
 8008b60:	2bff      	cmp	r3, #255	@ 0xff
 8008b62:	d025      	beq.n	8008bb0 <USBD_LL_DataOutStage+0x15c>
 8008b64:	7dbb      	ldrb	r3, [r7, #22]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d122      	bne.n	8008bb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d117      	bne.n	8008ba6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b76:	7dba      	ldrb	r2, [r7, #22]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	32ae      	adds	r2, #174	@ 0xae
 8008b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00f      	beq.n	8008ba6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b86:	7dba      	ldrb	r2, [r7, #22]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b8e:	7dba      	ldrb	r2, [r7, #22]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	32ae      	adds	r2, #174	@ 0xae
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	7afa      	ldrb	r2, [r7, #11]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	4798      	blx	r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	e000      	b.n	8008bb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d16f      	bne.n	8008cae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3314      	adds	r3, #20
 8008bd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d15a      	bne.n	8008c94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d914      	bls.n	8008c14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f001 f8ae 	bl	8009d62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c06:	2300      	movs	r3, #0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f001 fd93 	bl	800a738 <USBD_LL_PrepareReceive>
 8008c12:	e03f      	b.n	8008c94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d11c      	bne.n	8008c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d316      	bcc.n	8008c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d20f      	bcs.n	8008c5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 f88f 	bl	8009d62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2100      	movs	r1, #0
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f001 fd70 	bl	800a738 <USBD_LL_PrepareReceive>
 8008c58:	e01c      	b.n	8008c94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d10f      	bne.n	8008c86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d009      	beq.n	8008c86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c86:	2180      	movs	r1, #128	@ 0x80
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f001 fcab 	bl	800a5e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f001 f8b9 	bl	8009e06 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03a      	beq.n	8008d14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fe42 	bl	8008928 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008cac:	e032      	b.n	8008d14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 f985 	bl	8008fc8 <USBD_CoreFindEP>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	2bff      	cmp	r3, #255	@ 0xff
 8008cc6:	d025      	beq.n	8008d14 <USBD_LL_DataInStage+0x15a>
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d122      	bne.n	8008d14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d11c      	bne.n	8008d14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008cda:	7dfa      	ldrb	r2, [r7, #23]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	32ae      	adds	r2, #174	@ 0xae
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d014      	beq.n	8008d14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008cea:	7dfa      	ldrb	r2, [r7, #23]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008cf2:	7dfa      	ldrb	r2, [r7, #23]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	32ae      	adds	r2, #174	@ 0xae
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	7afa      	ldrb	r2, [r7, #11]
 8008d00:	4611      	mov	r1, r2
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	4798      	blx	r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d0a:	7dbb      	ldrb	r3, [r7, #22]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
 8008d12:	e000      	b.n	8008d16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d014      	beq.n	8008d84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00e      	beq.n	8008d84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6852      	ldr	r2, [r2, #4]
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	4611      	mov	r1, r2
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d84:	2340      	movs	r3, #64	@ 0x40
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fbe5 	bl	800a55a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2240      	movs	r2, #64	@ 0x40
 8008d9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008da0:	2340      	movs	r3, #64	@ 0x40
 8008da2:	2200      	movs	r2, #0
 8008da4:	2180      	movs	r1, #128	@ 0x80
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 fbd7 	bl	800a55a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2240      	movs	r2, #64	@ 0x40
 8008db6:	621a      	str	r2, [r3, #32]

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	78fa      	ldrb	r2, [r7, #3]
 8008dd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d006      	beq.n	8008e04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2204      	movs	r2, #4
 8008e08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d106      	bne.n	8008e3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d110      	bne.n	8008e80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	32ae      	adds	r2, #174	@ 0xae
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e01c      	b.n	8008ee6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d115      	bne.n	8008ee4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32ae      	adds	r2, #174	@ 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32ae      	adds	r2, #174	@ 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	32ae      	adds	r2, #174	@ 0xae
 8008f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e01c      	b.n	8008f4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d115      	bne.n	8008f48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32ae      	adds	r2, #174	@ 0xae
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	32ae      	adds	r2, #174	@ 0xae
 8008f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00e      	beq.n	8008fa4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6852      	ldr	r2, [r2, #4]
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	4611      	mov	r1, r2
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4413      	add	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800900c:	68fb      	ldr	r3, [r7, #12]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800901a:	b480      	push	{r7}
 800901c:	b087      	sub	sp, #28
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	3301      	adds	r3, #1
 8009030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009038:	8a3b      	ldrh	r3, [r7, #16]
 800903a:	021b      	lsls	r3, r3, #8
 800903c:	b21a      	sxth	r2, r3
 800903e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009042:	4313      	orrs	r3, r2
 8009044:	b21b      	sxth	r3, r3
 8009046:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009048:	89fb      	ldrh	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
	...

08009058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800906e:	2b40      	cmp	r3, #64	@ 0x40
 8009070:	d005      	beq.n	800907e <USBD_StdDevReq+0x26>
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d857      	bhi.n	8009126 <USBD_StdDevReq+0xce>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00f      	beq.n	800909a <USBD_StdDevReq+0x42>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d153      	bne.n	8009126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32ae      	adds	r2, #174	@ 0xae
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e04a      	b.n	8009130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d83b      	bhi.n	800911a <USBD_StdDevReq+0xc2>
 80090a2:	a201      	add	r2, pc, #4	@ (adr r2, 80090a8 <USBD_StdDevReq+0x50>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009111 	.word	0x08009111
 80090b0:	0800911b 	.word	0x0800911b
 80090b4:	08009107 	.word	0x08009107
 80090b8:	0800911b 	.word	0x0800911b
 80090bc:	080090db 	.word	0x080090db
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	0800911b 	.word	0x0800911b
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	080090e5 	.word	0x080090e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa3c 	bl	8009550 <USBD_GetDescriptor>
          break;
 80090d8:	e024      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fbcb 	bl	8009878 <USBD_SetAddress>
          break;
 80090e2:	e01f      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fc0a 	bl	8009900 <USBD_SetConfig>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
          break;
 80090f0:	e018      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fcad 	bl	8009a54 <USBD_GetConfig>
          break;
 80090fa:	e013      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fcde 	bl	8009ac0 <USBD_GetStatus>
          break;
 8009104:	e00e      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fd0d 	bl	8009b28 <USBD_SetFeature>
          break;
 800910e:	e009      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd31 	bl	8009b7a <USBD_ClrFeature>
          break;
 8009118:	e004      	b.n	8009124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fd88 	bl	8009c32 <USBD_CtlError>
          break;
 8009122:	bf00      	nop
      }
      break;
 8009124:	e004      	b.n	8009130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd82 	bl	8009c32 <USBD_CtlError>
      break;
 800912e:	bf00      	nop
  }

  return ret;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop

0800913c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009152:	2b40      	cmp	r3, #64	@ 0x40
 8009154:	d005      	beq.n	8009162 <USBD_StdItfReq+0x26>
 8009156:	2b40      	cmp	r3, #64	@ 0x40
 8009158:	d852      	bhi.n	8009200 <USBD_StdItfReq+0xc4>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <USBD_StdItfReq+0x26>
 800915e:	2b20      	cmp	r3, #32
 8009160:	d14e      	bne.n	8009200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	2b02      	cmp	r3, #2
 800916e:	d840      	bhi.n	80091f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	889b      	ldrh	r3, [r3, #4]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b01      	cmp	r3, #1
 8009178:	d836      	bhi.n	80091e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff13 	bl	8008fae <USBD_CoreFindIF>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2bff      	cmp	r3, #255	@ 0xff
 8009190:	d01d      	beq.n	80091ce <USBD_StdItfReq+0x92>
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11a      	bne.n	80091ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009198:	7bba      	ldrb	r2, [r7, #14]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	32ae      	adds	r2, #174	@ 0xae
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091a8:	7bba      	ldrb	r2, [r7, #14]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091b0:	7bba      	ldrb	r2, [r7, #14]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	@ 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091c6:	e004      	b.n	80091d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091cc:	e001      	b.n	80091d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091ce:	2303      	movs	r3, #3
 80091d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d110      	bne.n	80091fc <USBD_StdItfReq+0xc0>
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10d      	bne.n	80091fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fdfd 	bl	8009de0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091e6:	e009      	b.n	80091fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fd21 	bl	8009c32 <USBD_CtlError>
          break;
 80091f0:	e004      	b.n	80091fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fd1c 	bl	8009c32 <USBD_CtlError>
          break;
 80091fa:	e000      	b.n	80091fe <USBD_StdItfReq+0xc2>
          break;
 80091fc:	bf00      	nop
      }
      break;
 80091fe:	e004      	b.n	800920a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fd15 	bl	8009c32 <USBD_CtlError>
      break;
 8009208:	bf00      	nop
  }

  return ret;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	889b      	ldrh	r3, [r3, #4]
 8009226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009230:	2b40      	cmp	r3, #64	@ 0x40
 8009232:	d007      	beq.n	8009244 <USBD_StdEPReq+0x30>
 8009234:	2b40      	cmp	r3, #64	@ 0x40
 8009236:	f200 817f 	bhi.w	8009538 <USBD_StdEPReq+0x324>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d02a      	beq.n	8009294 <USBD_StdEPReq+0x80>
 800923e:	2b20      	cmp	r3, #32
 8009240:	f040 817a 	bne.w	8009538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff febd 	bl	8008fc8 <USBD_CoreFindEP>
 800924e:	4603      	mov	r3, r0
 8009250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009252:	7b7b      	ldrb	r3, [r7, #13]
 8009254:	2bff      	cmp	r3, #255	@ 0xff
 8009256:	f000 8174 	beq.w	8009542 <USBD_StdEPReq+0x32e>
 800925a:	7b7b      	ldrb	r3, [r7, #13]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8170 	bne.w	8009542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009262:	7b7a      	ldrb	r2, [r7, #13]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800926a:	7b7a      	ldrb	r2, [r7, #13]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	32ae      	adds	r2, #174	@ 0xae
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8163 	beq.w	8009542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800927c:	7b7a      	ldrb	r2, [r7, #13]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32ae      	adds	r2, #174	@ 0xae
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	4603      	mov	r3, r0
 8009290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009292:	e156      	b.n	8009542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d008      	beq.n	80092ae <USBD_StdEPReq+0x9a>
 800929c:	2b03      	cmp	r3, #3
 800929e:	f300 8145 	bgt.w	800952c <USBD_StdEPReq+0x318>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 809b 	beq.w	80093de <USBD_StdEPReq+0x1ca>
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d03c      	beq.n	8009326 <USBD_StdEPReq+0x112>
 80092ac:	e13e      	b.n	800952c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d002      	beq.n	80092c0 <USBD_StdEPReq+0xac>
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d016      	beq.n	80092ec <USBD_StdEPReq+0xd8>
 80092be:	e02c      	b.n	800931a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <USBD_StdEPReq+0xce>
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b80      	cmp	r3, #128	@ 0x80
 80092ca:	d00a      	beq.n	80092e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f987 	bl	800a5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092d6:	2180      	movs	r1, #128	@ 0x80
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f983 	bl	800a5e4 <USBD_LL_StallEP>
 80092de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092e0:	e020      	b.n	8009324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fca4 	bl	8009c32 <USBD_CtlError>
              break;
 80092ea:	e01b      	b.n	8009324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	885b      	ldrh	r3, [r3, #2]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10e      	bne.n	8009312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <USBD_StdEPReq+0xfe>
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d008      	beq.n	8009312 <USBD_StdEPReq+0xfe>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	88db      	ldrh	r3, [r3, #6]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f969 	bl	800a5e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fd64 	bl	8009de0 <USBD_CtlSendStatus>

              break;
 8009318:	e004      	b.n	8009324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fc88 	bl	8009c32 <USBD_CtlError>
              break;
 8009322:	bf00      	nop
          }
          break;
 8009324:	e107      	b.n	8009536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d002      	beq.n	8009338 <USBD_StdEPReq+0x124>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d016      	beq.n	8009364 <USBD_StdEPReq+0x150>
 8009336:	e04b      	b.n	80093d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <USBD_StdEPReq+0x146>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d00a      	beq.n	800935a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 f94b 	bl	800a5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800934e:	2180      	movs	r1, #128	@ 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f947 	bl	800a5e4 <USBD_LL_StallEP>
 8009356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009358:	e040      	b.n	80093dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc68 	bl	8009c32 <USBD_CtlError>
              break;
 8009362:	e03b      	b.n	80093dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d136      	bne.n	80093da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f951 	bl	800a622 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fd2d 	bl	8009de0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fe1c 	bl	8008fc8 <USBD_CoreFindEP>
 8009390:	4603      	mov	r3, r0
 8009392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009394:	7b7b      	ldrb	r3, [r7, #13]
 8009396:	2bff      	cmp	r3, #255	@ 0xff
 8009398:	d01f      	beq.n	80093da <USBD_StdEPReq+0x1c6>
 800939a:	7b7b      	ldrb	r3, [r7, #13]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d11c      	bne.n	80093da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093a0:	7b7a      	ldrb	r2, [r7, #13]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093a8:	7b7a      	ldrb	r2, [r7, #13]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	32ae      	adds	r2, #174	@ 0xae
 80093ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d010      	beq.n	80093da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093b8:	7b7a      	ldrb	r2, [r7, #13]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	32ae      	adds	r2, #174	@ 0xae
 80093be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093ce:	e004      	b.n	80093da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fc2d 	bl	8009c32 <USBD_CtlError>
              break;
 80093d8:	e000      	b.n	80093dc <USBD_StdEPReq+0x1c8>
              break;
 80093da:	bf00      	nop
          }
          break;
 80093dc:	e0ab      	b.n	8009536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d002      	beq.n	80093f0 <USBD_StdEPReq+0x1dc>
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d032      	beq.n	8009454 <USBD_StdEPReq+0x240>
 80093ee:	e097      	b.n	8009520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <USBD_StdEPReq+0x1f2>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b80      	cmp	r3, #128	@ 0x80
 80093fa:	d004      	beq.n	8009406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fc17 	bl	8009c32 <USBD_CtlError>
                break;
 8009404:	e091      	b.n	800952a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940a:	2b00      	cmp	r3, #0
 800940c:	da0b      	bge.n	8009426 <USBD_StdEPReq+0x212>
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	3310      	adds	r3, #16
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	3304      	adds	r3, #4
 8009424:	e00b      	b.n	800943e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	4413      	add	r3, r2
 800943c:	3304      	adds	r3, #4
 800943e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2202      	movs	r2, #2
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc6d 	bl	8009d2c <USBD_CtlSendData>
              break;
 8009452:	e06a      	b.n	800952a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009458:	2b00      	cmp	r3, #0
 800945a:	da11      	bge.n	8009480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 020f 	and.w	r2, r3, #15
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	3324      	adds	r3, #36	@ 0x24
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d117      	bne.n	80094a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fbda 	bl	8009c32 <USBD_CtlError>
                  break;
 800947e:	e054      	b.n	800952a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	f003 020f 	and.w	r2, r3, #15
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fbc7 	bl	8009c32 <USBD_CtlError>
                  break;
 80094a4:	e041      	b.n	800952a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da0b      	bge.n	80094c6 <USBD_StdEPReq+0x2b2>
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	3310      	adds	r3, #16
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	e00b      	b.n	80094de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	3304      	adds	r3, #4
 80094de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <USBD_StdEPReq+0x2d8>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	@ 0x80
 80094ea:	d103      	bne.n	80094f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e00e      	b.n	8009512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f8b1 	bl	800a660 <USBD_LL_IsStallEP>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e002      	b.n	8009512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2202      	movs	r2, #2
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fc07 	bl	8009d2c <USBD_CtlSendData>
              break;
 800951e:	e004      	b.n	800952a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb85 	bl	8009c32 <USBD_CtlError>
              break;
 8009528:	bf00      	nop
          }
          break;
 800952a:	e004      	b.n	8009536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb7f 	bl	8009c32 <USBD_CtlError>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e005      	b.n	8009544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fb79 	bl	8009c32 <USBD_CtlError>
      break;
 8009540:	e000      	b.n	8009544 <USBD_StdEPReq+0x330>
      break;
 8009542:	bf00      	nop
  }

  return ret;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b0e      	cmp	r3, #14
 8009572:	f200 8152 	bhi.w	800981a <USBD_GetDescriptor+0x2ca>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <USBD_GetDescriptor+0x2c>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	080095ed 	.word	0x080095ed
 8009580:	08009605 	.word	0x08009605
 8009584:	08009645 	.word	0x08009645
 8009588:	0800981b 	.word	0x0800981b
 800958c:	0800981b 	.word	0x0800981b
 8009590:	080097bb 	.word	0x080097bb
 8009594:	080097e7 	.word	0x080097e7
 8009598:	0800981b 	.word	0x0800981b
 800959c:	0800981b 	.word	0x0800981b
 80095a0:	0800981b 	.word	0x0800981b
 80095a4:	0800981b 	.word	0x0800981b
 80095a8:	0800981b 	.word	0x0800981b
 80095ac:	0800981b 	.word	0x0800981b
 80095b0:	0800981b 	.word	0x0800981b
 80095b4:	080095b9 	.word	0x080095b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	7c12      	ldrb	r2, [r2, #16]
 80095d0:	f107 0108 	add.w	r1, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095da:	e126      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb27 	bl	8009c32 <USBD_CtlError>
        err++;
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	3301      	adds	r3, #1
 80095e8:	72fb      	strb	r3, [r7, #11]
      break;
 80095ea:	e11e      	b.n	800982a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7c12      	ldrb	r2, [r2, #16]
 80095f8:	f107 0108 	add.w	r1, r7, #8
 80095fc:	4610      	mov	r0, r2
 80095fe:	4798      	blx	r3
 8009600:	60f8      	str	r0, [r7, #12]
      break;
 8009602:	e112      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10d      	bne.n	8009628 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009614:	f107 0208 	add.w	r2, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	2202      	movs	r2, #2
 8009624:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009626:	e100      	b.n	800982a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	2202      	movs	r2, #2
 8009640:	701a      	strb	r2, [r3, #0]
      break;
 8009642:	e0f2      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b05      	cmp	r3, #5
 800964c:	f200 80ac 	bhi.w	80097a8 <USBD_GetDescriptor+0x258>
 8009650:	a201      	add	r2, pc, #4	@ (adr r2, 8009658 <USBD_GetDescriptor+0x108>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	08009671 	.word	0x08009671
 800965c:	080096a5 	.word	0x080096a5
 8009660:	080096d9 	.word	0x080096d9
 8009664:	0800970d 	.word	0x0800970d
 8009668:	08009741 	.word	0x08009741
 800966c:	08009775 	.word	0x08009775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e091      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 facb 	bl	8009c32 <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e089      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e077      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fab1 	bl	8009c32 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e06f      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e05d      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa97 	bl	8009c32 <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e055      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e043      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa7d 	bl	8009c32 <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e03b      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e029      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa63 	bl	8009c32 <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e021      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e00f      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa49 	bl	8009c32 <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e007      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa41 	bl	8009c32 <USBD_CtlError>
          err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097b6:	bf00      	nop
      }
      break;
 80097b8:	e037      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7c1b      	ldrb	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ca:	f107 0208 	add.w	r2, r7, #8
 80097ce:	4610      	mov	r0, r2
 80097d0:	4798      	blx	r3
 80097d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097d4:	e029      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa2a 	bl	8009c32 <USBD_CtlError>
        err++;
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	3301      	adds	r3, #1
 80097e2:	72fb      	strb	r3, [r7, #11]
      break;
 80097e4:	e021      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7c1b      	ldrb	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10d      	bne.n	800980a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f6:	f107 0208 	add.w	r2, r7, #8
 80097fa:	4610      	mov	r0, r2
 80097fc:	4798      	blx	r3
 80097fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	2207      	movs	r2, #7
 8009806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009808:	e00f      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa10 	bl	8009c32 <USBD_CtlError>
        err++;
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	3301      	adds	r3, #1
 8009816:	72fb      	strb	r3, [r7, #11]
      break;
 8009818:	e007      	b.n	800982a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fa08 	bl	8009c32 <USBD_CtlError>
      err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
      break;
 8009828:	bf00      	nop
  }

  if (err != 0U)
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11e      	bne.n	800986e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	88db      	ldrh	r3, [r3, #6]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d016      	beq.n	8009866 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009838:	893b      	ldrh	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00e      	beq.n	800985c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	88da      	ldrh	r2, [r3, #6]
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	4293      	cmp	r3, r2
 8009846:	bf28      	it	cs
 8009848:	4613      	movcs	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800984e:	893b      	ldrh	r3, [r7, #8]
 8009850:	461a      	mov	r2, r3
 8009852:	68f9      	ldr	r1, [r7, #12]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa69 	bl	8009d2c <USBD_CtlSendData>
 800985a:	e009      	b.n	8009870 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f9e7 	bl	8009c32 <USBD_CtlError>
 8009864:	e004      	b.n	8009870 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 faba 	bl	8009de0 <USBD_CtlSendStatus>
 800986c:	e000      	b.n	8009870 <USBD_GetDescriptor+0x320>
    return;
 800986e:	bf00      	nop
  }
}
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop

08009878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	889b      	ldrh	r3, [r3, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d131      	bne.n	80098ee <USBD_SetAddress+0x76>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88db      	ldrh	r3, [r3, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d12d      	bne.n	80098ee <USBD_SetAddress+0x76>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	2b7f      	cmp	r3, #127	@ 0x7f
 8009898:	d829      	bhi.n	80098ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d104      	bne.n	80098bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9bc 	bl	8009c32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ba:	e01d      	b.n	80098f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7bfa      	ldrb	r2, [r7, #15]
 80098c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fef5 	bl	800a6b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa86 	bl	8009de0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2202      	movs	r2, #2
 80098de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e2:	e009      	b.n	80098f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ec:	e004      	b.n	80098f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f99e 	bl	8009c32 <USBD_CtlError>
  }
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	b2da      	uxtb	r2, r3
 8009914:	4b4e      	ldr	r3, [pc, #312]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009918:	4b4d      	ldr	r3, [pc, #308]	@ (8009a50 <USBD_SetConfig+0x150>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d905      	bls.n	800992c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f985 	bl	8009c32 <USBD_CtlError>
    return USBD_FAIL;
 8009928:	2303      	movs	r3, #3
 800992a:	e08c      	b.n	8009a46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d002      	beq.n	800993e <USBD_SetConfig+0x3e>
 8009938:	2b03      	cmp	r3, #3
 800993a:	d029      	beq.n	8009990 <USBD_SetConfig+0x90>
 800993c:	e075      	b.n	8009a2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800993e:	4b44      	ldr	r3, [pc, #272]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d020      	beq.n	8009988 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009946:	4b42      	ldr	r3, [pc, #264]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009950:	4b3f      	ldr	r3, [pc, #252]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fe fff1 	bl	800893e <USBD_SetClassConfig>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f962 	bl	8009c32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009976:	e065      	b.n	8009a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa31 	bl	8009de0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2203      	movs	r2, #3
 8009982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009986:	e05d      	b.n	8009a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa29 	bl	8009de0 <USBD_CtlSendStatus>
      break;
 800998e:	e059      	b.n	8009a44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009990:	4b2f      	ldr	r3, [pc, #188]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d112      	bne.n	80099be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80099a0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a50 <USBD_SetConfig+0x150>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099aa:	4b29      	ldr	r3, [pc, #164]	@ (8009a50 <USBD_SetConfig+0x150>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fe ffe0 	bl	8008976 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa12 	bl	8009de0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099bc:	e042      	b.n	8009a44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099be:	4b24      	ldr	r3, [pc, #144]	@ (8009a50 <USBD_SetConfig+0x150>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d02a      	beq.n	8009a22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7fe ffce 	bl	8008976 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099da:	4b1d      	ldr	r3, [pc, #116]	@ (8009a50 <USBD_SetConfig+0x150>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a50 <USBD_SetConfig+0x150>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fe ffa7 	bl	800893e <USBD_SetClassConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00f      	beq.n	8009a1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f918 	bl	8009c32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7fe ffb3 	bl	8008976 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a18:	e014      	b.n	8009a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9e0 	bl	8009de0 <USBD_CtlSendStatus>
      break;
 8009a20:	e010      	b.n	8009a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f9dc 	bl	8009de0 <USBD_CtlSendStatus>
      break;
 8009a28:	e00c      	b.n	8009a44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f900 	bl	8009c32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a32:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <USBD_SetConfig+0x150>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fe ff9c 	bl	8008976 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	bf00      	nop
  }

  return ret;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200008a0 	.word	0x200008a0

08009a54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d004      	beq.n	8009a70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f8e2 	bl	8009c32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a6e:	e023      	b.n	8009ab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	dc02      	bgt.n	8009a82 <USBD_GetConfig+0x2e>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dc03      	bgt.n	8009a88 <USBD_GetConfig+0x34>
 8009a80:	e015      	b.n	8009aae <USBD_GetConfig+0x5a>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d00b      	beq.n	8009a9e <USBD_GetConfig+0x4a>
 8009a86:	e012      	b.n	8009aae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3308      	adds	r3, #8
 8009a92:	2201      	movs	r2, #1
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f948 	bl	8009d2c <USBD_CtlSendData>
        break;
 8009a9c:	e00c      	b.n	8009ab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f940 	bl	8009d2c <USBD_CtlSendData>
        break;
 8009aac:	e004      	b.n	8009ab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8be 	bl	8009c32 <USBD_CtlError>
        break;
 8009ab6:	bf00      	nop
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d81e      	bhi.n	8009b16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	88db      	ldrh	r3, [r3, #6]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d004      	beq.n	8009aea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f8a5 	bl	8009c32 <USBD_CtlError>
        break;
 8009ae8:	e01a      	b.n	8009b20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f043 0202 	orr.w	r2, r3, #2
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	330c      	adds	r3, #12
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f90c 	bl	8009d2c <USBD_CtlSendData>
      break;
 8009b14:	e004      	b.n	8009b20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f88a 	bl	8009c32 <USBD_CtlError>
      break;
 8009b1e:	bf00      	nop
  }
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d107      	bne.n	8009b4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f94c 	bl	8009de0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b48:	e013      	b.n	8009b72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d10b      	bne.n	8009b6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f93c 	bl	8009de0 <USBD_CtlSendStatus>
}
 8009b68:	e003      	b.n	8009b72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f860 	bl	8009c32 <USBD_CtlError>
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d80b      	bhi.n	8009baa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	885b      	ldrh	r3, [r3, #2]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d10c      	bne.n	8009bb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f91c 	bl	8009de0 <USBD_CtlSendStatus>
      }
      break;
 8009ba8:	e004      	b.n	8009bb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f840 	bl	8009c32 <USBD_CtlError>
      break;
 8009bb2:	e000      	b.n	8009bb6 <USBD_ClrFeature+0x3c>
      break;
 8009bb4:	bf00      	nop
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff fa16 	bl	800901a <SWAPBYTE>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff fa09 	bl	800901a <SWAPBYTE>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff f9fc 	bl	800901a <SWAPBYTE>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	80da      	strh	r2, [r3, #6]
}
 8009c2a:	bf00      	nop
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3c:	2180      	movs	r1, #128	@ 0x80
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fcd0 	bl	800a5e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fccc 	bl	800a5e4 <USBD_LL_StallEP>
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d042      	beq.n	8009cf0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009c6e:	6938      	ldr	r0, [r7, #16]
 8009c70:	f000 f842 	bl	8009cf8 <USBD_GetLen>
 8009c74:	4603      	mov	r3, r0
 8009c76:	3301      	adds	r3, #1
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c7e:	d808      	bhi.n	8009c92 <USBD_GetString+0x3e>
 8009c80:	6938      	ldr	r0, [r7, #16]
 8009c82:	f000 f839 	bl	8009cf8 <USBD_GetLen>
 8009c86:	4603      	mov	r3, r0
 8009c88:	3301      	adds	r3, #1
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	e001      	b.n	8009c96 <USBD_GetString+0x42>
 8009c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	7812      	ldrb	r2, [r2, #0]
 8009ca4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cbc:	e013      	b.n	8009ce6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	7812      	ldrb	r2, [r2, #0]
 8009cc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
    idx++;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	4413      	add	r3, r2
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e7      	bne.n	8009cbe <USBD_GetString+0x6a>
 8009cee:	e000      	b.n	8009cf2 <USBD_GetString+0x9e>
    return;
 8009cf0:	bf00      	nop
  }
}
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d08:	e005      	b.n	8009d16 <USBD_GetLen+0x1e>
  {
    len++;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f5      	bne.n	8009d0a <USBD_GetLen+0x12>
  }

  return len;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	2100      	movs	r1, #0
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fccf 	bl	800a6f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	2100      	movs	r1, #0
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 fcbe 	bl	800a6f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2203      	movs	r2, #3
 8009d94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	2100      	movs	r1, #0
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fcc2 	bl	800a738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	2100      	movs	r1, #0
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fcb1 	bl	800a738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2204      	movs	r2, #4
 8009dec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009df0:	2300      	movs	r3, #0
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fc7d 	bl	800a6f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2205      	movs	r2, #5
 8009e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e16:	2300      	movs	r3, #0
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc8b 	bl	800a738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e30:	2200      	movs	r2, #0
 8009e32:	4912      	ldr	r1, [pc, #72]	@ (8009e7c <MX_USB_DEVICE_Init+0x50>)
 8009e34:	4812      	ldr	r0, [pc, #72]	@ (8009e80 <MX_USB_DEVICE_Init+0x54>)
 8009e36:	f7fe fce9 	bl	800880c <USBD_Init>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e40:	f7f7 fa46 	bl	80012d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8009e44:	490f      	ldr	r1, [pc, #60]	@ (8009e84 <MX_USB_DEVICE_Init+0x58>)
 8009e46:	480e      	ldr	r0, [pc, #56]	@ (8009e80 <MX_USB_DEVICE_Init+0x54>)
 8009e48:	f7fe fd1e 	bl	8008888 <USBD_RegisterClass>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e52:	f7f7 fa3d 	bl	80012d0 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8009e56:	490c      	ldr	r1, [pc, #48]	@ (8009e88 <MX_USB_DEVICE_Init+0x5c>)
 8009e58:	4809      	ldr	r0, [pc, #36]	@ (8009e80 <MX_USB_DEVICE_Init+0x54>)
 8009e5a:	f7fe fc8b 	bl	8008774 <USBD_AUDIO_RegisterInterface>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e64:	f7f7 fa34 	bl	80012d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e68:	4805      	ldr	r0, [pc, #20]	@ (8009e80 <MX_USB_DEVICE_Init+0x54>)
 8009e6a:	f7fe fd51 	bl	8008910 <USBD_Start>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e74:	f7f7 fa2c 	bl	80012d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e78:	bf00      	nop
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200000dc 	.word	0x200000dc
 8009e80:	200008a4 	.word	0x200008a4
 8009e84:	2000000c 	.word	0x2000000c
 8009e88:	200000c0 	.word	0x200000c0

08009e8c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]


  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8009e98:	2300      	movs	r3, #0

  /* USER CODE END 0 */
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8009eae:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */


  switch(cmd)
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d00f      	beq.n	8009ef0 <AUDIO_AudioCmd_FS+0x34>
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	dc1a      	bgt.n	8009f0a <AUDIO_AudioCmd_FS+0x4e>
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d002      	beq.n	8009ede <AUDIO_AudioCmd_FS+0x22>
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d00d      	beq.n	8009ef8 <AUDIO_AudioCmd_FS+0x3c>
 8009edc:	e015      	b.n	8009f0a <AUDIO_AudioCmd_FS+0x4e>
  {
    case AUDIO_CMD_START:
    	HAL_SAI_Transmit_DMA(&hsai_BlockA1, pbuf, size / 2);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	085b      	lsrs	r3, r3, #1
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68f9      	ldr	r1, [r7, #12]
 8009ee8:	480a      	ldr	r0, [pc, #40]	@ (8009f14 <AUDIO_AudioCmd_FS+0x58>)
 8009eea:	f7fb fe17 	bl	8005b1c <HAL_SAI_Transmit_DMA>
    	//HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)pbuf, size / 2);
    break;
 8009eee:	e00c      	b.n	8009f0a <AUDIO_AudioCmd_FS+0x4e>

    case AUDIO_CMD_STOP:
    	HAL_SAI_DMAStop(&hsai_BlockA1);
 8009ef0:	4808      	ldr	r0, [pc, #32]	@ (8009f14 <AUDIO_AudioCmd_FS+0x58>)
 8009ef2:	f7fb fd9f 	bl	8005a34 <HAL_SAI_DMAStop>
      break;
 8009ef6:	e008      	b.n	8009f0a <AUDIO_AudioCmd_FS+0x4e>

    case AUDIO_CMD_PLAY:
    	HAL_SAI_Transmit_DMA(&hsai_BlockA1, pbuf, size / 2);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	085b      	lsrs	r3, r3, #1
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	68f9      	ldr	r1, [r7, #12]
 8009f02:	4804      	ldr	r0, [pc, #16]	@ (8009f14 <AUDIO_AudioCmd_FS+0x58>)
 8009f04:	f7fb fe0a 	bl	8005b1c <HAL_SAI_Transmit_DMA>
    	//HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)pbuf, size / 2);
    break;
 8009f08:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8009f0a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000067c 	.word	0x2000067c

08009f18 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8009f22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8009f3a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8009f56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009f68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2212      	movs	r2, #18
 8009f84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f86:	4b03      	ldr	r3, [pc, #12]	@ (8009f94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	200000fc 	.word	0x200000fc

08009f98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009faa:	4b03      	ldr	r3, [pc, #12]	@ (8009fb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	2000011c 	.word	0x2000011c

08009fbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4907      	ldr	r1, [pc, #28]	@ (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fd2:	4808      	ldr	r0, [pc, #32]	@ (8009ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fd4:	f7ff fe3e 	bl	8009c54 <USBD_GetString>
 8009fd8:	e004      	b.n	8009fe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4904      	ldr	r1, [pc, #16]	@ (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fde:	4805      	ldr	r0, [pc, #20]	@ (8009ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fe0:	f7ff fe38 	bl	8009c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe4:	4b02      	ldr	r3, [pc, #8]	@ (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000b80 	.word	0x20000b80
 8009ff4:	0800c910 	.word	0x0800c910

08009ff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4904      	ldr	r1, [pc, #16]	@ (800a018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a008:	4804      	ldr	r0, [pc, #16]	@ (800a01c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a00a:	f7ff fe23 	bl	8009c54 <USBD_GetString>
  return USBD_StrDesc;
 800a00e:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000b80 	.word	0x20000b80
 800a01c:	0800c920 	.word	0x0800c920

0800a020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	221a      	movs	r2, #26
 800a030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a032:	f000 f855 	bl	800a0e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a036:	4b02      	ldr	r3, [pc, #8]	@ (800a040 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000120 	.word	0x20000120

0800a044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4907      	ldr	r1, [pc, #28]	@ (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a05a:	4808      	ldr	r0, [pc, #32]	@ (800a07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a05c:	f7ff fdfa 	bl	8009c54 <USBD_GetString>
 800a060:	e004      	b.n	800a06c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4904      	ldr	r1, [pc, #16]	@ (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a066:	4805      	ldr	r0, [pc, #20]	@ (800a07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a068:	f7ff fdf4 	bl	8009c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a06c:	4b02      	ldr	r3, [pc, #8]	@ (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000b80 	.word	0x20000b80
 800a07c:	0800c92c 	.word	0x0800c92c

0800a080 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	@ (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a096:	4808      	ldr	r0, [pc, #32]	@ (800a0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a098:	f7ff fddc 	bl	8009c54 <USBD_GetString>
 800a09c:	e004      	b.n	800a0a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4904      	ldr	r1, [pc, #16]	@ (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	@ (800a0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0a4:	f7ff fdd6 	bl	8009c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	@ (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000b80 	.word	0x20000b80
 800a0b8:	0800c93c 	.word	0x0800c93c

0800a0bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	220c      	movs	r2, #12
 800a0cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a0ce:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000110 	.word	0x20000110

0800a0e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a124 <Get_SerialNum+0x44>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <Get_SerialNum+0x48>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <Get_SerialNum+0x4c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d009      	beq.n	800a11a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a106:	2208      	movs	r2, #8
 800a108:	4909      	ldr	r1, [pc, #36]	@ (800a130 <Get_SerialNum+0x50>)
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 f814 	bl	800a138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a110:	2204      	movs	r2, #4
 800a112:	4908      	ldr	r1, [pc, #32]	@ (800a134 <Get_SerialNum+0x54>)
 800a114:	68b8      	ldr	r0, [r7, #8]
 800a116:	f000 f80f 	bl	800a138 <IntToUnicode>
  }
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	1fff7a10 	.word	0x1fff7a10
 800a128:	1fff7a14 	.word	0x1fff7a14
 800a12c:	1fff7a18 	.word	0x1fff7a18
 800a130:	20000122 	.word	0x20000122
 800a134:	20000132 	.word	0x20000132

0800a138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4613      	mov	r3, r2
 800a144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]
 800a14e:	e027      	b.n	800a1a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	0f1b      	lsrs	r3, r3, #28
 800a154:	2b09      	cmp	r3, #9
 800a156:	d80b      	bhi.n	800a170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	0f1b      	lsrs	r3, r3, #28
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	4619      	mov	r1, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	440b      	add	r3, r1
 800a168:	3230      	adds	r2, #48	@ 0x30
 800a16a:	b2d2      	uxtb	r2, r2
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e00a      	b.n	800a186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	0f1b      	lsrs	r3, r3, #28
 800a174:	b2da      	uxtb	r2, r3
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4619      	mov	r1, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	440b      	add	r3, r1
 800a180:	3237      	adds	r2, #55	@ 0x37
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	3301      	adds	r3, #1
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	4413      	add	r3, r2
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	3301      	adds	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]
 800a1a0:	7dfa      	ldrb	r2, [r7, #23]
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d3d3      	bcc.n	800a150 <IntToUnicode+0x18>
  }
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	371c      	adds	r7, #28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b0a0      	sub	sp, #128	@ 0x80
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	609a      	str	r2, [r3, #8]
 800a1cc:	60da      	str	r2, [r3, #12]
 800a1ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a1d0:	f107 0310 	add.w	r3, r7, #16
 800a1d4:	225c      	movs	r2, #92	@ 0x5c
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fd85 	bl	800ace8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1e6:	d156      	bne.n	800a296 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a1e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a1f2:	f107 0310 	add.w	r3, r7, #16
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fa f87e 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a202:	f7f7 f865 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	4b25      	ldr	r3, [pc, #148]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20e:	4a24      	ldr	r2, [pc, #144]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	6313      	str	r3, [r2, #48]	@ 0x30
 800a216:	4b22      	ldr	r3, [pc, #136]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a222:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a228:	2302      	movs	r3, #2
 800a22a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a230:	2303      	movs	r3, #3
 800a232:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a234:	230a      	movs	r3, #10
 800a236:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a238:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a23c:	4619      	mov	r1, r3
 800a23e:	4819      	ldr	r0, [pc, #100]	@ (800a2a4 <HAL_PCD_MspInit+0xec>)
 800a240:	f7f8 f8f6 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a248:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a24a:	2300      	movs	r3, #0
 800a24c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a252:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a256:	4619      	mov	r1, r3
 800a258:	4812      	ldr	r0, [pc, #72]	@ (800a2a4 <HAL_PCD_MspInit+0xec>)
 800a25a:	f7f8 f8e9 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a25e:	4b10      	ldr	r3, [pc, #64]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a262:	4a0f      	ldr	r2, [pc, #60]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a268:	6353      	str	r3, [r2, #52]	@ 0x34
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]
 800a26e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a272:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a278:	6453      	str	r3, [r2, #68]	@ 0x44
 800a27a:	4b09      	ldr	r3, [pc, #36]	@ (800a2a0 <HAL_PCD_MspInit+0xe8>)
 800a27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a27e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	2043      	movs	r0, #67	@ 0x43
 800a28c:	f7f7 fcb3 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a290:	2043      	movs	r0, #67	@ 0x43
 800a292:	f7f7 fccc 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a296:	bf00      	nop
 800a298:	3780      	adds	r7, #128	@ 0x80
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	40020000 	.word	0x40020000

0800a2a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fb73 	bl	80089aa <USBD_LL_SetupStage>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a2de:	78fa      	ldrb	r2, [r7, #3]
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	00db      	lsls	r3, r3, #3
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f7fe fbad 	bl	8008a54 <USBD_LL_DataOutStage>
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	3320      	adds	r3, #32
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	4619      	mov	r1, r3
 800a32a:	f7fe fc46 	bl	8008bba <USBD_LL_DataInStage>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fd80 	bl	8008e4a <USBD_LL_SOF>
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a35a:	2301      	movs	r3, #1
 800a35c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	79db      	ldrb	r3, [r3, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d102      	bne.n	800a36c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
 800a36a:	e008      	b.n	800a37e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	79db      	ldrb	r3, [r3, #7]
 800a370:	2b02      	cmp	r3, #2
 800a372:	d102      	bne.n	800a37a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	e001      	b.n	800a37e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a37a:	f7f6 ffa9 	bl	80012d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a384:	7bfa      	ldrb	r2, [r7, #15]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fd1a 	bl	8008dc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fcc2 	bl	8008d1e <USBD_LL_Reset>
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe fd15 	bl	8008de2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6812      	ldr	r2, [r2, #0]
 800a3c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7adb      	ldrb	r3, [r3, #11]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3d8:	4b04      	ldr	r3, [pc, #16]	@ (800a3ec <HAL_PCD_SuspendCallback+0x48>)
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	4a03      	ldr	r2, [pc, #12]	@ (800a3ec <HAL_PCD_SuspendCallback+0x48>)
 800a3de:	f043 0306 	orr.w	r3, r3, #6
 800a3e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	e000ed00 	.word	0xe000ed00

0800a3f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fd0b 	bl	8008e1a <USBD_LL_Resume>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a41e:	78fa      	ldrb	r2, [r7, #3]
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fd63 	bl	8008eee <USBD_LL_IsoOUTIncomplete>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a442:	78fa      	ldrb	r2, [r7, #3]
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fd1f 	bl	8008e8a <USBD_LL_IsoINIncomplete>
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fd75 	bl	8008f52 <USBD_LL_DevConnected>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fd72 	bl	8008f68 <USBD_LL_DevDisconnected>
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d13c      	bne.n	800a516 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a49c:	4a20      	ldr	r2, [pc, #128]	@ (800a520 <USBD_LL_Init+0x94>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a4b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4b6:	2206      	movs	r2, #6
 800a4b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4ba:	4b19      	ldr	r3, [pc, #100]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4bc:	2202      	movs	r2, #2
 800a4be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4c0:	4b17      	ldr	r3, [pc, #92]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4c6:	4b16      	ldr	r3, [pc, #88]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4cc:	4b14      	ldr	r3, [pc, #80]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4d2:	4b13      	ldr	r3, [pc, #76]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4d8:	4b11      	ldr	r3, [pc, #68]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4de:	4b10      	ldr	r3, [pc, #64]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4ea:	480d      	ldr	r0, [pc, #52]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4ec:	f7f8 fb4b 	bl	8002b86 <HAL_PCD_Init>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4f6:	f7f6 feeb 	bl	80012d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4fa:	2180      	movs	r1, #128	@ 0x80
 800a4fc:	4808      	ldr	r0, [pc, #32]	@ (800a520 <USBD_LL_Init+0x94>)
 800a4fe:	f7f9 fdac 	bl	800405a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a502:	2240      	movs	r2, #64	@ 0x40
 800a504:	2100      	movs	r1, #0
 800a506:	4806      	ldr	r0, [pc, #24]	@ (800a520 <USBD_LL_Init+0x94>)
 800a508:	f7f9 fd60 	bl	8003fcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a50c:	2280      	movs	r2, #128	@ 0x80
 800a50e:	2101      	movs	r1, #1
 800a510:	4803      	ldr	r0, [pc, #12]	@ (800a520 <USBD_LL_Init+0x94>)
 800a512:	f7f9 fd5b 	bl	8003fcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20000d80 	.word	0x20000d80

0800a524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f8 fc39 	bl	8002db2 <HAL_PCD_Start>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f990 	bl	800a86c <USBD_Get_USB_Status>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a550:	7bbb      	ldrb	r3, [r7, #14]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	4608      	mov	r0, r1
 800a564:	4611      	mov	r1, r2
 800a566:	461a      	mov	r2, r3
 800a568:	4603      	mov	r3, r0
 800a56a:	70fb      	strb	r3, [r7, #3]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70bb      	strb	r3, [r7, #2]
 800a570:	4613      	mov	r3, r2
 800a572:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a582:	78bb      	ldrb	r3, [r7, #2]
 800a584:	883a      	ldrh	r2, [r7, #0]
 800a586:	78f9      	ldrb	r1, [r7, #3]
 800a588:	f7f9 f93a 	bl	8003800 <HAL_PCD_EP_Open>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f96a 	bl	800a86c <USBD_Get_USB_Status>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f9 f985 	bl	80038d4 <HAL_PCD_EP_Close>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 f94b 	bl	800a86c <USBD_Get_USB_Status>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7f9 fa3d 	bl	8003a82 <HAL_PCD_EP_SetStall>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f92c 	bl	800a86c <USBD_Get_USB_Status>
 800a614:	4603      	mov	r3, r0
 800a616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a618:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7f9 fa81 	bl	8003b48 <HAL_PCD_EP_ClrStall>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 f90d 	bl	800a86c <USBD_Get_USB_Status>
 800a652:	4603      	mov	r3, r0
 800a654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a656:	7bbb      	ldrb	r3, [r7, #14]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a672:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da0b      	bge.n	800a694 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	4613      	mov	r3, r2
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	3316      	adds	r3, #22
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	e00b      	b.n	800a6ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a69a:	68f9      	ldr	r1, [r7, #12]
 800a69c:	4613      	mov	r3, r2
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a6aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7f9 f86e 	bl	80037b8 <HAL_PCD_SetAddress>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 f8c2 	bl	800a86c <USBD_Get_USB_Status>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b086      	sub	sp, #24
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	460b      	mov	r3, r1
 800a704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a714:	7af9      	ldrb	r1, [r7, #11]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	f7f9 f978 	bl	8003a0e <HAL_PCD_EP_Transmit>
 800a71e:	4603      	mov	r3, r0
 800a720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f8a1 	bl	800a86c <USBD_Get_USB_Status>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a72e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	607a      	str	r2, [r7, #4]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	460b      	mov	r3, r1
 800a746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a756:	7af9      	ldrb	r1, [r7, #11]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	f7f9 f904 	bl	8003968 <HAL_PCD_EP_Receive>
 800a760:	4603      	mov	r3, r0
 800a762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f880 	bl	800a86c <USBD_Get_USB_Status>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a770:	7dbb      	ldrb	r3, [r7, #22]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f7f9 f924 	bl	80039de <HAL_PCD_EP_GetRxCount>
 800a796:	4603      	mov	r3, r0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_PCDEx_LPM_Callback+0x18>
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d01f      	beq.n	800a7f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a7b6:	e03b      	b.n	800a830 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7adb      	ldrb	r3, [r3, #11]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a7c0:	f7f6 fcce 	bl	8001160 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a838 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a838 <HAL_PCDEx_LPM_Callback+0x98>)
 800a7ca:	f023 0306 	bic.w	r3, r3, #6
 800a7ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7e2:	f023 0301 	bic.w	r3, r3, #1
 800a7e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fb13 	bl	8008e1a <USBD_LL_Resume>
    break;
 800a7f4:	e01c      	b.n	800a830 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6812      	ldr	r2, [r2, #0]
 800a804:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a808:	f043 0301 	orr.w	r3, r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe fae4 	bl	8008de2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	7adb      	ldrb	r3, [r3, #11]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a822:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <HAL_PCDEx_LPM_Callback+0x98>)
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	4a04      	ldr	r2, [pc, #16]	@ (800a838 <HAL_PCDEx_LPM_Callback+0x98>)
 800a828:	f043 0306 	orr.w	r3, r3, #6
 800a82c:	6113      	str	r3, [r2, #16]
    break;
 800a82e:	bf00      	nop
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	e000ed00 	.word	0xe000ed00

0800a83c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a844:	4b03      	ldr	r3, [pc, #12]	@ (800a854 <USBD_static_malloc+0x18>)
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20001264 	.word	0x20001264

0800a858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d817      	bhi.n	800a8b0 <USBD_Get_USB_Status+0x44>
 800a880:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <USBD_Get_USB_Status+0x1c>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a89f 	.word	0x0800a89f
 800a890:	0800a8a5 	.word	0x0800a8a5
 800a894:	0800a8ab 	.word	0x0800a8ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
    break;
 800a89c:	e00b      	b.n	800a8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a2:	e008      	b.n	800a8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	e005      	b.n	800a8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ae:	e002      	b.n	800a8b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b4:	bf00      	nop
  }
  return usb_status;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <std>:
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d2:	6083      	str	r3, [r0, #8]
 800a8d4:	8181      	strh	r1, [r0, #12]
 800a8d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8d8:	81c2      	strh	r2, [r0, #14]
 800a8da:	6183      	str	r3, [r0, #24]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2208      	movs	r2, #8
 800a8e0:	305c      	adds	r0, #92	@ 0x5c
 800a8e2:	f000 fa01 	bl	800ace8 <memset>
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <std+0x58>)
 800a8e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a920 <std+0x5c>)
 800a8ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a924 <std+0x60>)
 800a8f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <std+0x64>)
 800a8f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <std+0x68>)
 800a8f8:	6224      	str	r4, [r4, #32]
 800a8fa:	429c      	cmp	r4, r3
 800a8fc:	d006      	beq.n	800a90c <std+0x48>
 800a8fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a902:	4294      	cmp	r4, r2
 800a904:	d002      	beq.n	800a90c <std+0x48>
 800a906:	33d0      	adds	r3, #208	@ 0xd0
 800a908:	429c      	cmp	r4, r3
 800a90a:	d105      	bne.n	800a918 <std+0x54>
 800a90c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a914:	f000 ba60 	b.w	800add8 <__retarget_lock_init_recursive>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	bf00      	nop
 800a91c:	0800ab39 	.word	0x0800ab39
 800a920:	0800ab5b 	.word	0x0800ab5b
 800a924:	0800ab93 	.word	0x0800ab93
 800a928:	0800abb7 	.word	0x0800abb7
 800a92c:	20008ab8 	.word	0x20008ab8

0800a930 <stdio_exit_handler>:
 800a930:	4a02      	ldr	r2, [pc, #8]	@ (800a93c <stdio_exit_handler+0xc>)
 800a932:	4903      	ldr	r1, [pc, #12]	@ (800a940 <stdio_exit_handler+0x10>)
 800a934:	4803      	ldr	r0, [pc, #12]	@ (800a944 <stdio_exit_handler+0x14>)
 800a936:	f000 b869 	b.w	800aa0c <_fwalk_sglue>
 800a93a:	bf00      	nop
 800a93c:	2000013c 	.word	0x2000013c
 800a940:	0800b679 	.word	0x0800b679
 800a944:	2000014c 	.word	0x2000014c

0800a948 <cleanup_stdio>:
 800a948:	6841      	ldr	r1, [r0, #4]
 800a94a:	4b0c      	ldr	r3, [pc, #48]	@ (800a97c <cleanup_stdio+0x34>)
 800a94c:	4299      	cmp	r1, r3
 800a94e:	b510      	push	{r4, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	d001      	beq.n	800a958 <cleanup_stdio+0x10>
 800a954:	f000 fe90 	bl	800b678 <_fflush_r>
 800a958:	68a1      	ldr	r1, [r4, #8]
 800a95a:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <cleanup_stdio+0x38>)
 800a95c:	4299      	cmp	r1, r3
 800a95e:	d002      	beq.n	800a966 <cleanup_stdio+0x1e>
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fe89 	bl	800b678 <_fflush_r>
 800a966:	68e1      	ldr	r1, [r4, #12]
 800a968:	4b06      	ldr	r3, [pc, #24]	@ (800a984 <cleanup_stdio+0x3c>)
 800a96a:	4299      	cmp	r1, r3
 800a96c:	d004      	beq.n	800a978 <cleanup_stdio+0x30>
 800a96e:	4620      	mov	r0, r4
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	f000 be80 	b.w	800b678 <_fflush_r>
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	bf00      	nop
 800a97c:	20008ab8 	.word	0x20008ab8
 800a980:	20008b20 	.word	0x20008b20
 800a984:	20008b88 	.word	0x20008b88

0800a988 <global_stdio_init.part.0>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b8 <global_stdio_init.part.0+0x30>)
 800a98c:	4c0b      	ldr	r4, [pc, #44]	@ (800a9bc <global_stdio_init.part.0+0x34>)
 800a98e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c0 <global_stdio_init.part.0+0x38>)
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	4620      	mov	r0, r4
 800a994:	2200      	movs	r2, #0
 800a996:	2104      	movs	r1, #4
 800a998:	f7ff ff94 	bl	800a8c4 <std>
 800a99c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	2109      	movs	r1, #9
 800a9a4:	f7ff ff8e 	bl	800a8c4 <std>
 800a9a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b2:	2112      	movs	r1, #18
 800a9b4:	f7ff bf86 	b.w	800a8c4 <std>
 800a9b8:	20008bf0 	.word	0x20008bf0
 800a9bc:	20008ab8 	.word	0x20008ab8
 800a9c0:	0800a931 	.word	0x0800a931

0800a9c4 <__sfp_lock_acquire>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	@ (800a9cc <__sfp_lock_acquire+0x8>)
 800a9c6:	f000 ba08 	b.w	800adda <__retarget_lock_acquire_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	20008bf9 	.word	0x20008bf9

0800a9d0 <__sfp_lock_release>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	@ (800a9d8 <__sfp_lock_release+0x8>)
 800a9d2:	f000 ba03 	b.w	800addc <__retarget_lock_release_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20008bf9 	.word	0x20008bf9

0800a9dc <__sinit>:
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	4604      	mov	r4, r0
 800a9e0:	f7ff fff0 	bl	800a9c4 <__sfp_lock_acquire>
 800a9e4:	6a23      	ldr	r3, [r4, #32]
 800a9e6:	b11b      	cbz	r3, 800a9f0 <__sinit+0x14>
 800a9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ec:	f7ff bff0 	b.w	800a9d0 <__sfp_lock_release>
 800a9f0:	4b04      	ldr	r3, [pc, #16]	@ (800aa04 <__sinit+0x28>)
 800a9f2:	6223      	str	r3, [r4, #32]
 800a9f4:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <__sinit+0x2c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1f5      	bne.n	800a9e8 <__sinit+0xc>
 800a9fc:	f7ff ffc4 	bl	800a988 <global_stdio_init.part.0>
 800aa00:	e7f2      	b.n	800a9e8 <__sinit+0xc>
 800aa02:	bf00      	nop
 800aa04:	0800a949 	.word	0x0800a949
 800aa08:	20008bf0 	.word	0x20008bf0

0800aa0c <_fwalk_sglue>:
 800aa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	4607      	mov	r7, r0
 800aa12:	4688      	mov	r8, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	2600      	movs	r6, #0
 800aa18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa1c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa20:	d505      	bpl.n	800aa2e <_fwalk_sglue+0x22>
 800aa22:	6824      	ldr	r4, [r4, #0]
 800aa24:	2c00      	cmp	r4, #0
 800aa26:	d1f7      	bne.n	800aa18 <_fwalk_sglue+0xc>
 800aa28:	4630      	mov	r0, r6
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d907      	bls.n	800aa44 <_fwalk_sglue+0x38>
 800aa34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	d003      	beq.n	800aa44 <_fwalk_sglue+0x38>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	47c0      	blx	r8
 800aa42:	4306      	orrs	r6, r0
 800aa44:	3568      	adds	r5, #104	@ 0x68
 800aa46:	e7e9      	b.n	800aa1c <_fwalk_sglue+0x10>

0800aa48 <iprintf>:
 800aa48:	b40f      	push	{r0, r1, r2, r3}
 800aa4a:	b507      	push	{r0, r1, r2, lr}
 800aa4c:	4906      	ldr	r1, [pc, #24]	@ (800aa68 <iprintf+0x20>)
 800aa4e:	ab04      	add	r3, sp, #16
 800aa50:	6808      	ldr	r0, [r1, #0]
 800aa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa56:	6881      	ldr	r1, [r0, #8]
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	f000 fae3 	bl	800b024 <_vfiprintf_r>
 800aa5e:	b003      	add	sp, #12
 800aa60:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa64:	b004      	add	sp, #16
 800aa66:	4770      	bx	lr
 800aa68:	20000148 	.word	0x20000148

0800aa6c <putchar>:
 800aa6c:	4b02      	ldr	r3, [pc, #8]	@ (800aa78 <putchar+0xc>)
 800aa6e:	4601      	mov	r1, r0
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	6882      	ldr	r2, [r0, #8]
 800aa74:	f000 be8a 	b.w	800b78c <_putc_r>
 800aa78:	20000148 	.word	0x20000148

0800aa7c <_puts_r>:
 800aa7c:	6a03      	ldr	r3, [r0, #32]
 800aa7e:	b570      	push	{r4, r5, r6, lr}
 800aa80:	6884      	ldr	r4, [r0, #8]
 800aa82:	4605      	mov	r5, r0
 800aa84:	460e      	mov	r6, r1
 800aa86:	b90b      	cbnz	r3, 800aa8c <_puts_r+0x10>
 800aa88:	f7ff ffa8 	bl	800a9dc <__sinit>
 800aa8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa8e:	07db      	lsls	r3, r3, #31
 800aa90:	d405      	bmi.n	800aa9e <_puts_r+0x22>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	0598      	lsls	r0, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_puts_r+0x22>
 800aa98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9a:	f000 f99e 	bl	800adda <__retarget_lock_acquire_recursive>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	0719      	lsls	r1, r3, #28
 800aaa2:	d502      	bpl.n	800aaaa <_puts_r+0x2e>
 800aaa4:	6923      	ldr	r3, [r4, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d135      	bne.n	800ab16 <_puts_r+0x9a>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f8c5 	bl	800ac3c <__swsetup_r>
 800aab2:	b380      	cbz	r0, 800ab16 <_puts_r+0x9a>
 800aab4:	f04f 35ff 	mov.w	r5, #4294967295
 800aab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaba:	07da      	lsls	r2, r3, #31
 800aabc:	d405      	bmi.n	800aaca <_puts_r+0x4e>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	059b      	lsls	r3, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_puts_r+0x4e>
 800aac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac6:	f000 f989 	bl	800addc <__retarget_lock_release_recursive>
 800aaca:	4628      	mov	r0, r5
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	2b00      	cmp	r3, #0
 800aad0:	da04      	bge.n	800aadc <_puts_r+0x60>
 800aad2:	69a2      	ldr	r2, [r4, #24]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	dc17      	bgt.n	800ab08 <_puts_r+0x8c>
 800aad8:	290a      	cmp	r1, #10
 800aada:	d015      	beq.n	800ab08 <_puts_r+0x8c>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	6022      	str	r2, [r4, #0]
 800aae2:	7019      	strb	r1, [r3, #0]
 800aae4:	68a3      	ldr	r3, [r4, #8]
 800aae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aaea:	3b01      	subs	r3, #1
 800aaec:	60a3      	str	r3, [r4, #8]
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	d1ed      	bne.n	800aace <_puts_r+0x52>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	da11      	bge.n	800ab1a <_puts_r+0x9e>
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	210a      	movs	r1, #10
 800aafa:	4628      	mov	r0, r5
 800aafc:	f000 f85f 	bl	800abbe <__swbuf_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d0d7      	beq.n	800aab4 <_puts_r+0x38>
 800ab04:	250a      	movs	r5, #10
 800ab06:	e7d7      	b.n	800aab8 <_puts_r+0x3c>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 f857 	bl	800abbe <__swbuf_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d1e7      	bne.n	800aae4 <_puts_r+0x68>
 800ab14:	e7ce      	b.n	800aab4 <_puts_r+0x38>
 800ab16:	3e01      	subs	r6, #1
 800ab18:	e7e4      	b.n	800aae4 <_puts_r+0x68>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	6022      	str	r2, [r4, #0]
 800ab20:	220a      	movs	r2, #10
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e7ee      	b.n	800ab04 <_puts_r+0x88>
	...

0800ab28 <puts>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	@ (800ab34 <puts+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f7ff bfa5 	b.w	800aa7c <_puts_r>
 800ab32:	bf00      	nop
 800ab34:	20000148 	.word	0x20000148

0800ab38 <__sread>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	f000 f8fc 	bl	800ad3c <_read_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	bfab      	itete	ge
 800ab48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab4c:	181b      	addge	r3, r3, r0
 800ab4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab52:	bfac      	ite	ge
 800ab54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab56:	81a3      	strhlt	r3, [r4, #12]
 800ab58:	bd10      	pop	{r4, pc}

0800ab5a <__swrite>:
 800ab5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5e:	461f      	mov	r7, r3
 800ab60:	898b      	ldrh	r3, [r1, #12]
 800ab62:	05db      	lsls	r3, r3, #23
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4616      	mov	r6, r2
 800ab6a:	d505      	bpl.n	800ab78 <__swrite+0x1e>
 800ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab70:	2302      	movs	r3, #2
 800ab72:	2200      	movs	r2, #0
 800ab74:	f000 f8d0 	bl	800ad18 <_lseek_r>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	f000 b8e7 	b.w	800ad60 <_write_r>

0800ab92 <__sseek>:
 800ab92:	b510      	push	{r4, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 f8bd 	bl	800ad18 <_lseek_r>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	bf15      	itete	ne
 800aba4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aba6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abae:	81a3      	strheq	r3, [r4, #12]
 800abb0:	bf18      	it	ne
 800abb2:	81a3      	strhne	r3, [r4, #12]
 800abb4:	bd10      	pop	{r4, pc}

0800abb6 <__sclose>:
 800abb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abba:	f000 b89d 	b.w	800acf8 <_close_r>

0800abbe <__swbuf_r>:
 800abbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc0:	460e      	mov	r6, r1
 800abc2:	4614      	mov	r4, r2
 800abc4:	4605      	mov	r5, r0
 800abc6:	b118      	cbz	r0, 800abd0 <__swbuf_r+0x12>
 800abc8:	6a03      	ldr	r3, [r0, #32]
 800abca:	b90b      	cbnz	r3, 800abd0 <__swbuf_r+0x12>
 800abcc:	f7ff ff06 	bl	800a9dc <__sinit>
 800abd0:	69a3      	ldr	r3, [r4, #24]
 800abd2:	60a3      	str	r3, [r4, #8]
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	071a      	lsls	r2, r3, #28
 800abd8:	d501      	bpl.n	800abde <__swbuf_r+0x20>
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	b943      	cbnz	r3, 800abf0 <__swbuf_r+0x32>
 800abde:	4621      	mov	r1, r4
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 f82b 	bl	800ac3c <__swsetup_r>
 800abe6:	b118      	cbz	r0, 800abf0 <__swbuf_r+0x32>
 800abe8:	f04f 37ff 	mov.w	r7, #4294967295
 800abec:	4638      	mov	r0, r7
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	1a98      	subs	r0, r3, r2
 800abf6:	6963      	ldr	r3, [r4, #20]
 800abf8:	b2f6      	uxtb	r6, r6
 800abfa:	4283      	cmp	r3, r0
 800abfc:	4637      	mov	r7, r6
 800abfe:	dc05      	bgt.n	800ac0c <__swbuf_r+0x4e>
 800ac00:	4621      	mov	r1, r4
 800ac02:	4628      	mov	r0, r5
 800ac04:	f000 fd38 	bl	800b678 <_fflush_r>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1ed      	bne.n	800abe8 <__swbuf_r+0x2a>
 800ac0c:	68a3      	ldr	r3, [r4, #8]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	60a3      	str	r3, [r4, #8]
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	6022      	str	r2, [r4, #0]
 800ac18:	701e      	strb	r6, [r3, #0]
 800ac1a:	6962      	ldr	r2, [r4, #20]
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d004      	beq.n	800ac2c <__swbuf_r+0x6e>
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	07db      	lsls	r3, r3, #31
 800ac26:	d5e1      	bpl.n	800abec <__swbuf_r+0x2e>
 800ac28:	2e0a      	cmp	r6, #10
 800ac2a:	d1df      	bne.n	800abec <__swbuf_r+0x2e>
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 fd22 	bl	800b678 <_fflush_r>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d0d9      	beq.n	800abec <__swbuf_r+0x2e>
 800ac38:	e7d6      	b.n	800abe8 <__swbuf_r+0x2a>
	...

0800ac3c <__swsetup_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4b29      	ldr	r3, [pc, #164]	@ (800ace4 <__swsetup_r+0xa8>)
 800ac40:	4605      	mov	r5, r0
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	460c      	mov	r4, r1
 800ac46:	b118      	cbz	r0, 800ac50 <__swsetup_r+0x14>
 800ac48:	6a03      	ldr	r3, [r0, #32]
 800ac4a:	b90b      	cbnz	r3, 800ac50 <__swsetup_r+0x14>
 800ac4c:	f7ff fec6 	bl	800a9dc <__sinit>
 800ac50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac54:	0719      	lsls	r1, r3, #28
 800ac56:	d422      	bmi.n	800ac9e <__swsetup_r+0x62>
 800ac58:	06da      	lsls	r2, r3, #27
 800ac5a:	d407      	bmi.n	800ac6c <__swsetup_r+0x30>
 800ac5c:	2209      	movs	r2, #9
 800ac5e:	602a      	str	r2, [r5, #0]
 800ac60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6a:	e033      	b.n	800acd4 <__swsetup_r+0x98>
 800ac6c:	0758      	lsls	r0, r3, #29
 800ac6e:	d512      	bpl.n	800ac96 <__swsetup_r+0x5a>
 800ac70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac72:	b141      	cbz	r1, 800ac86 <__swsetup_r+0x4a>
 800ac74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	d002      	beq.n	800ac82 <__swsetup_r+0x46>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f8af 	bl	800ade0 <_free_r>
 800ac82:	2300      	movs	r3, #0
 800ac84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	6063      	str	r3, [r4, #4]
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	f043 0308 	orr.w	r3, r3, #8
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	b94b      	cbnz	r3, 800acb6 <__swsetup_r+0x7a>
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acac:	d003      	beq.n	800acb6 <__swsetup_r+0x7a>
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fd2f 	bl	800b714 <__smakebuf_r>
 800acb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acba:	f013 0201 	ands.w	r2, r3, #1
 800acbe:	d00a      	beq.n	800acd6 <__swsetup_r+0x9a>
 800acc0:	2200      	movs	r2, #0
 800acc2:	60a2      	str	r2, [r4, #8]
 800acc4:	6962      	ldr	r2, [r4, #20]
 800acc6:	4252      	negs	r2, r2
 800acc8:	61a2      	str	r2, [r4, #24]
 800acca:	6922      	ldr	r2, [r4, #16]
 800accc:	b942      	cbnz	r2, 800ace0 <__swsetup_r+0xa4>
 800acce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acd2:	d1c5      	bne.n	800ac60 <__swsetup_r+0x24>
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	0799      	lsls	r1, r3, #30
 800acd8:	bf58      	it	pl
 800acda:	6962      	ldrpl	r2, [r4, #20]
 800acdc:	60a2      	str	r2, [r4, #8]
 800acde:	e7f4      	b.n	800acca <__swsetup_r+0x8e>
 800ace0:	2000      	movs	r0, #0
 800ace2:	e7f7      	b.n	800acd4 <__swsetup_r+0x98>
 800ace4:	20000148 	.word	0x20000148

0800ace8 <memset>:
 800ace8:	4402      	add	r2, r0
 800acea:	4603      	mov	r3, r0
 800acec:	4293      	cmp	r3, r2
 800acee:	d100      	bne.n	800acf2 <memset+0xa>
 800acf0:	4770      	bx	lr
 800acf2:	f803 1b01 	strb.w	r1, [r3], #1
 800acf6:	e7f9      	b.n	800acec <memset+0x4>

0800acf8 <_close_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	@ (800ad14 <_close_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f6 fced 	bl	80016e2 <_close>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_close_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_close_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20008bf4 	.word	0x20008bf4

0800ad18 <_lseek_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_lseek_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f6 fd02 	bl	8001730 <_lseek>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_lseek_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_lseek_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20008bf4 	.word	0x20008bf4

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	@ (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f6 fc90 	bl	8001670 <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20008bf4 	.word	0x20008bf4

0800ad60 <_write_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_write_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f6 fc9b 	bl	80016aa <_write>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_write_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_write_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20008bf4 	.word	0x20008bf4

0800ad84 <__errno>:
 800ad84:	4b01      	ldr	r3, [pc, #4]	@ (800ad8c <__errno+0x8>)
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	20000148 	.word	0x20000148

0800ad90 <__libc_init_array>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	4d0d      	ldr	r5, [pc, #52]	@ (800adc8 <__libc_init_array+0x38>)
 800ad94:	4c0d      	ldr	r4, [pc, #52]	@ (800adcc <__libc_init_array+0x3c>)
 800ad96:	1b64      	subs	r4, r4, r5
 800ad98:	10a4      	asrs	r4, r4, #2
 800ad9a:	2600      	movs	r6, #0
 800ad9c:	42a6      	cmp	r6, r4
 800ad9e:	d109      	bne.n	800adb4 <__libc_init_array+0x24>
 800ada0:	4d0b      	ldr	r5, [pc, #44]	@ (800add0 <__libc_init_array+0x40>)
 800ada2:	4c0c      	ldr	r4, [pc, #48]	@ (800add4 <__libc_init_array+0x44>)
 800ada4:	f001 fd88 	bl	800c8b8 <_init>
 800ada8:	1b64      	subs	r4, r4, r5
 800adaa:	10a4      	asrs	r4, r4, #2
 800adac:	2600      	movs	r6, #0
 800adae:	42a6      	cmp	r6, r4
 800adb0:	d105      	bne.n	800adbe <__libc_init_array+0x2e>
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb8:	4798      	blx	r3
 800adba:	3601      	adds	r6, #1
 800adbc:	e7ee      	b.n	800ad9c <__libc_init_array+0xc>
 800adbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc2:	4798      	blx	r3
 800adc4:	3601      	adds	r6, #1
 800adc6:	e7f2      	b.n	800adae <__libc_init_array+0x1e>
 800adc8:	0800cb80 	.word	0x0800cb80
 800adcc:	0800cb80 	.word	0x0800cb80
 800add0:	0800cb80 	.word	0x0800cb80
 800add4:	0800cb84 	.word	0x0800cb84

0800add8 <__retarget_lock_init_recursive>:
 800add8:	4770      	bx	lr

0800adda <__retarget_lock_acquire_recursive>:
 800adda:	4770      	bx	lr

0800addc <__retarget_lock_release_recursive>:
 800addc:	4770      	bx	lr
	...

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f000 f8e0 	bl	800afb8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f000 b8dc 	b.w	800afc4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20008c00 	.word	0x20008c00

0800ae74 <sbrk_aligned>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	4e0f      	ldr	r6, [pc, #60]	@ (800aeb4 <sbrk_aligned+0x40>)
 800ae78:	460c      	mov	r4, r1
 800ae7a:	6831      	ldr	r1, [r6, #0]
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	b911      	cbnz	r1, 800ae86 <sbrk_aligned+0x12>
 800ae80:	f000 fcda 	bl	800b838 <_sbrk_r>
 800ae84:	6030      	str	r0, [r6, #0]
 800ae86:	4621      	mov	r1, r4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 fcd5 	bl	800b838 <_sbrk_r>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	d103      	bne.n	800ae9a <sbrk_aligned+0x26>
 800ae92:	f04f 34ff 	mov.w	r4, #4294967295
 800ae96:	4620      	mov	r0, r4
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
 800ae9a:	1cc4      	adds	r4, r0, #3
 800ae9c:	f024 0403 	bic.w	r4, r4, #3
 800aea0:	42a0      	cmp	r0, r4
 800aea2:	d0f8      	beq.n	800ae96 <sbrk_aligned+0x22>
 800aea4:	1a21      	subs	r1, r4, r0
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 fcc6 	bl	800b838 <_sbrk_r>
 800aeac:	3001      	adds	r0, #1
 800aeae:	d1f2      	bne.n	800ae96 <sbrk_aligned+0x22>
 800aeb0:	e7ef      	b.n	800ae92 <sbrk_aligned+0x1e>
 800aeb2:	bf00      	nop
 800aeb4:	20008bfc 	.word	0x20008bfc

0800aeb8 <_malloc_r>:
 800aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	1ccd      	adds	r5, r1, #3
 800aebe:	f025 0503 	bic.w	r5, r5, #3
 800aec2:	3508      	adds	r5, #8
 800aec4:	2d0c      	cmp	r5, #12
 800aec6:	bf38      	it	cc
 800aec8:	250c      	movcc	r5, #12
 800aeca:	2d00      	cmp	r5, #0
 800aecc:	4606      	mov	r6, r0
 800aece:	db01      	blt.n	800aed4 <_malloc_r+0x1c>
 800aed0:	42a9      	cmp	r1, r5
 800aed2:	d904      	bls.n	800aede <_malloc_r+0x26>
 800aed4:	230c      	movs	r3, #12
 800aed6:	6033      	str	r3, [r6, #0]
 800aed8:	2000      	movs	r0, #0
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afb4 <_malloc_r+0xfc>
 800aee2:	f000 f869 	bl	800afb8 <__malloc_lock>
 800aee6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeea:	461c      	mov	r4, r3
 800aeec:	bb44      	cbnz	r4, 800af40 <_malloc_r+0x88>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff ffbf 	bl	800ae74 <sbrk_aligned>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	4604      	mov	r4, r0
 800aefa:	d158      	bne.n	800afae <_malloc_r+0xf6>
 800aefc:	f8d8 4000 	ldr.w	r4, [r8]
 800af00:	4627      	mov	r7, r4
 800af02:	2f00      	cmp	r7, #0
 800af04:	d143      	bne.n	800af8e <_malloc_r+0xd6>
 800af06:	2c00      	cmp	r4, #0
 800af08:	d04b      	beq.n	800afa2 <_malloc_r+0xea>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	4639      	mov	r1, r7
 800af0e:	4630      	mov	r0, r6
 800af10:	eb04 0903 	add.w	r9, r4, r3
 800af14:	f000 fc90 	bl	800b838 <_sbrk_r>
 800af18:	4581      	cmp	r9, r0
 800af1a:	d142      	bne.n	800afa2 <_malloc_r+0xea>
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	1a6d      	subs	r5, r5, r1
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ffa6 	bl	800ae74 <sbrk_aligned>
 800af28:	3001      	adds	r0, #1
 800af2a:	d03a      	beq.n	800afa2 <_malloc_r+0xea>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	442b      	add	r3, r5
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	f8d8 3000 	ldr.w	r3, [r8]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	bb62      	cbnz	r2, 800af94 <_malloc_r+0xdc>
 800af3a:	f8c8 7000 	str.w	r7, [r8]
 800af3e:	e00f      	b.n	800af60 <_malloc_r+0xa8>
 800af40:	6822      	ldr	r2, [r4, #0]
 800af42:	1b52      	subs	r2, r2, r5
 800af44:	d420      	bmi.n	800af88 <_malloc_r+0xd0>
 800af46:	2a0b      	cmp	r2, #11
 800af48:	d917      	bls.n	800af7a <_malloc_r+0xc2>
 800af4a:	1961      	adds	r1, r4, r5
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	6025      	str	r5, [r4, #0]
 800af50:	bf18      	it	ne
 800af52:	6059      	strne	r1, [r3, #4]
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	bf08      	it	eq
 800af58:	f8c8 1000 	streq.w	r1, [r8]
 800af5c:	5162      	str	r2, [r4, r5]
 800af5e:	604b      	str	r3, [r1, #4]
 800af60:	4630      	mov	r0, r6
 800af62:	f000 f82f 	bl	800afc4 <__malloc_unlock>
 800af66:	f104 000b 	add.w	r0, r4, #11
 800af6a:	1d23      	adds	r3, r4, #4
 800af6c:	f020 0007 	bic.w	r0, r0, #7
 800af70:	1ac2      	subs	r2, r0, r3
 800af72:	bf1c      	itt	ne
 800af74:	1a1b      	subne	r3, r3, r0
 800af76:	50a3      	strne	r3, [r4, r2]
 800af78:	e7af      	b.n	800aeda <_malloc_r+0x22>
 800af7a:	6862      	ldr	r2, [r4, #4]
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	bf0c      	ite	eq
 800af80:	f8c8 2000 	streq.w	r2, [r8]
 800af84:	605a      	strne	r2, [r3, #4]
 800af86:	e7eb      	b.n	800af60 <_malloc_r+0xa8>
 800af88:	4623      	mov	r3, r4
 800af8a:	6864      	ldr	r4, [r4, #4]
 800af8c:	e7ae      	b.n	800aeec <_malloc_r+0x34>
 800af8e:	463c      	mov	r4, r7
 800af90:	687f      	ldr	r7, [r7, #4]
 800af92:	e7b6      	b.n	800af02 <_malloc_r+0x4a>
 800af94:	461a      	mov	r2, r3
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	d1fb      	bne.n	800af94 <_malloc_r+0xdc>
 800af9c:	2300      	movs	r3, #0
 800af9e:	6053      	str	r3, [r2, #4]
 800afa0:	e7de      	b.n	800af60 <_malloc_r+0xa8>
 800afa2:	230c      	movs	r3, #12
 800afa4:	6033      	str	r3, [r6, #0]
 800afa6:	4630      	mov	r0, r6
 800afa8:	f000 f80c 	bl	800afc4 <__malloc_unlock>
 800afac:	e794      	b.n	800aed8 <_malloc_r+0x20>
 800afae:	6005      	str	r5, [r0, #0]
 800afb0:	e7d6      	b.n	800af60 <_malloc_r+0xa8>
 800afb2:	bf00      	nop
 800afb4:	20008c00 	.word	0x20008c00

0800afb8 <__malloc_lock>:
 800afb8:	4801      	ldr	r0, [pc, #4]	@ (800afc0 <__malloc_lock+0x8>)
 800afba:	f7ff bf0e 	b.w	800adda <__retarget_lock_acquire_recursive>
 800afbe:	bf00      	nop
 800afc0:	20008bf8 	.word	0x20008bf8

0800afc4 <__malloc_unlock>:
 800afc4:	4801      	ldr	r0, [pc, #4]	@ (800afcc <__malloc_unlock+0x8>)
 800afc6:	f7ff bf09 	b.w	800addc <__retarget_lock_release_recursive>
 800afca:	bf00      	nop
 800afcc:	20008bf8 	.word	0x20008bf8

0800afd0 <__sfputc_r>:
 800afd0:	6893      	ldr	r3, [r2, #8]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	b410      	push	{r4}
 800afd8:	6093      	str	r3, [r2, #8]
 800afda:	da08      	bge.n	800afee <__sfputc_r+0x1e>
 800afdc:	6994      	ldr	r4, [r2, #24]
 800afde:	42a3      	cmp	r3, r4
 800afe0:	db01      	blt.n	800afe6 <__sfputc_r+0x16>
 800afe2:	290a      	cmp	r1, #10
 800afe4:	d103      	bne.n	800afee <__sfputc_r+0x1e>
 800afe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afea:	f7ff bde8 	b.w	800abbe <__swbuf_r>
 800afee:	6813      	ldr	r3, [r2, #0]
 800aff0:	1c58      	adds	r0, r3, #1
 800aff2:	6010      	str	r0, [r2, #0]
 800aff4:	7019      	strb	r1, [r3, #0]
 800aff6:	4608      	mov	r0, r1
 800aff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800affc:	4770      	bx	lr

0800affe <__sfputs_r>:
 800affe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b000:	4606      	mov	r6, r0
 800b002:	460f      	mov	r7, r1
 800b004:	4614      	mov	r4, r2
 800b006:	18d5      	adds	r5, r2, r3
 800b008:	42ac      	cmp	r4, r5
 800b00a:	d101      	bne.n	800b010 <__sfputs_r+0x12>
 800b00c:	2000      	movs	r0, #0
 800b00e:	e007      	b.n	800b020 <__sfputs_r+0x22>
 800b010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b014:	463a      	mov	r2, r7
 800b016:	4630      	mov	r0, r6
 800b018:	f7ff ffda 	bl	800afd0 <__sfputc_r>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d1f3      	bne.n	800b008 <__sfputs_r+0xa>
 800b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b024 <_vfiprintf_r>:
 800b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b028:	460d      	mov	r5, r1
 800b02a:	b09d      	sub	sp, #116	@ 0x74
 800b02c:	4614      	mov	r4, r2
 800b02e:	4698      	mov	r8, r3
 800b030:	4606      	mov	r6, r0
 800b032:	b118      	cbz	r0, 800b03c <_vfiprintf_r+0x18>
 800b034:	6a03      	ldr	r3, [r0, #32]
 800b036:	b90b      	cbnz	r3, 800b03c <_vfiprintf_r+0x18>
 800b038:	f7ff fcd0 	bl	800a9dc <__sinit>
 800b03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b03e:	07d9      	lsls	r1, r3, #31
 800b040:	d405      	bmi.n	800b04e <_vfiprintf_r+0x2a>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	059a      	lsls	r2, r3, #22
 800b046:	d402      	bmi.n	800b04e <_vfiprintf_r+0x2a>
 800b048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b04a:	f7ff fec6 	bl	800adda <__retarget_lock_acquire_recursive>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	071b      	lsls	r3, r3, #28
 800b052:	d501      	bpl.n	800b058 <_vfiprintf_r+0x34>
 800b054:	692b      	ldr	r3, [r5, #16]
 800b056:	b99b      	cbnz	r3, 800b080 <_vfiprintf_r+0x5c>
 800b058:	4629      	mov	r1, r5
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff fdee 	bl	800ac3c <__swsetup_r>
 800b060:	b170      	cbz	r0, 800b080 <_vfiprintf_r+0x5c>
 800b062:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b064:	07dc      	lsls	r4, r3, #31
 800b066:	d504      	bpl.n	800b072 <_vfiprintf_r+0x4e>
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	b01d      	add	sp, #116	@ 0x74
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	89ab      	ldrh	r3, [r5, #12]
 800b074:	0598      	lsls	r0, r3, #22
 800b076:	d4f7      	bmi.n	800b068 <_vfiprintf_r+0x44>
 800b078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b07a:	f7ff feaf 	bl	800addc <__retarget_lock_release_recursive>
 800b07e:	e7f3      	b.n	800b068 <_vfiprintf_r+0x44>
 800b080:	2300      	movs	r3, #0
 800b082:	9309      	str	r3, [sp, #36]	@ 0x24
 800b084:	2320      	movs	r3, #32
 800b086:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08e:	2330      	movs	r3, #48	@ 0x30
 800b090:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b240 <_vfiprintf_r+0x21c>
 800b094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b098:	f04f 0901 	mov.w	r9, #1
 800b09c:	4623      	mov	r3, r4
 800b09e:	469a      	mov	sl, r3
 800b0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a4:	b10a      	cbz	r2, 800b0aa <_vfiprintf_r+0x86>
 800b0a6:	2a25      	cmp	r2, #37	@ 0x25
 800b0a8:	d1f9      	bne.n	800b09e <_vfiprintf_r+0x7a>
 800b0aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ae:	d00b      	beq.n	800b0c8 <_vfiprintf_r+0xa4>
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7ff ffa1 	bl	800affe <__sfputs_r>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f000 80a7 	beq.w	800b210 <_vfiprintf_r+0x1ec>
 800b0c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0c4:	445a      	add	r2, fp
 800b0c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 809f 	beq.w	800b210 <_vfiprintf_r+0x1ec>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0dc:	f10a 0a01 	add.w	sl, sl, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	9307      	str	r3, [sp, #28]
 800b0e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ea:	4654      	mov	r4, sl
 800b0ec:	2205      	movs	r2, #5
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	4853      	ldr	r0, [pc, #332]	@ (800b240 <_vfiprintf_r+0x21c>)
 800b0f4:	f7f5 f88c 	bl	8000210 <memchr>
 800b0f8:	9a04      	ldr	r2, [sp, #16]
 800b0fa:	b9d8      	cbnz	r0, 800b134 <_vfiprintf_r+0x110>
 800b0fc:	06d1      	lsls	r1, r2, #27
 800b0fe:	bf44      	itt	mi
 800b100:	2320      	movmi	r3, #32
 800b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b106:	0713      	lsls	r3, r2, #28
 800b108:	bf44      	itt	mi
 800b10a:	232b      	movmi	r3, #43	@ 0x2b
 800b10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b110:	f89a 3000 	ldrb.w	r3, [sl]
 800b114:	2b2a      	cmp	r3, #42	@ 0x2a
 800b116:	d015      	beq.n	800b144 <_vfiprintf_r+0x120>
 800b118:	9a07      	ldr	r2, [sp, #28]
 800b11a:	4654      	mov	r4, sl
 800b11c:	2000      	movs	r0, #0
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	4621      	mov	r1, r4
 800b124:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b128:	3b30      	subs	r3, #48	@ 0x30
 800b12a:	2b09      	cmp	r3, #9
 800b12c:	d94b      	bls.n	800b1c6 <_vfiprintf_r+0x1a2>
 800b12e:	b1b0      	cbz	r0, 800b15e <_vfiprintf_r+0x13a>
 800b130:	9207      	str	r2, [sp, #28]
 800b132:	e014      	b.n	800b15e <_vfiprintf_r+0x13a>
 800b134:	eba0 0308 	sub.w	r3, r0, r8
 800b138:	fa09 f303 	lsl.w	r3, r9, r3
 800b13c:	4313      	orrs	r3, r2
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	46a2      	mov	sl, r4
 800b142:	e7d2      	b.n	800b0ea <_vfiprintf_r+0xc6>
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	1d19      	adds	r1, r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	9103      	str	r1, [sp, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfbb      	ittet	lt
 800b150:	425b      	neglt	r3, r3
 800b152:	f042 0202 	orrlt.w	r2, r2, #2
 800b156:	9307      	strge	r3, [sp, #28]
 800b158:	9307      	strlt	r3, [sp, #28]
 800b15a:	bfb8      	it	lt
 800b15c:	9204      	strlt	r2, [sp, #16]
 800b15e:	7823      	ldrb	r3, [r4, #0]
 800b160:	2b2e      	cmp	r3, #46	@ 0x2e
 800b162:	d10a      	bne.n	800b17a <_vfiprintf_r+0x156>
 800b164:	7863      	ldrb	r3, [r4, #1]
 800b166:	2b2a      	cmp	r3, #42	@ 0x2a
 800b168:	d132      	bne.n	800b1d0 <_vfiprintf_r+0x1ac>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	9203      	str	r2, [sp, #12]
 800b172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b176:	3402      	adds	r4, #2
 800b178:	9305      	str	r3, [sp, #20]
 800b17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b250 <_vfiprintf_r+0x22c>
 800b17e:	7821      	ldrb	r1, [r4, #0]
 800b180:	2203      	movs	r2, #3
 800b182:	4650      	mov	r0, sl
 800b184:	f7f5 f844 	bl	8000210 <memchr>
 800b188:	b138      	cbz	r0, 800b19a <_vfiprintf_r+0x176>
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	eba0 000a 	sub.w	r0, r0, sl
 800b190:	2240      	movs	r2, #64	@ 0x40
 800b192:	4082      	lsls	r2, r0
 800b194:	4313      	orrs	r3, r2
 800b196:	3401      	adds	r4, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19e:	4829      	ldr	r0, [pc, #164]	@ (800b244 <_vfiprintf_r+0x220>)
 800b1a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1a4:	2206      	movs	r2, #6
 800b1a6:	f7f5 f833 	bl	8000210 <memchr>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d03f      	beq.n	800b22e <_vfiprintf_r+0x20a>
 800b1ae:	4b26      	ldr	r3, [pc, #152]	@ (800b248 <_vfiprintf_r+0x224>)
 800b1b0:	bb1b      	cbnz	r3, 800b1fa <_vfiprintf_r+0x1d6>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	3307      	adds	r3, #7
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	443b      	add	r3, r7
 800b1c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1c4:	e76a      	b.n	800b09c <_vfiprintf_r+0x78>
 800b1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	e7a8      	b.n	800b122 <_vfiprintf_r+0xfe>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f04f 0c0a 	mov.w	ip, #10
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e2:	3a30      	subs	r2, #48	@ 0x30
 800b1e4:	2a09      	cmp	r2, #9
 800b1e6:	d903      	bls.n	800b1f0 <_vfiprintf_r+0x1cc>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0c6      	beq.n	800b17a <_vfiprintf_r+0x156>
 800b1ec:	9105      	str	r1, [sp, #20]
 800b1ee:	e7c4      	b.n	800b17a <_vfiprintf_r+0x156>
 800b1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e7f0      	b.n	800b1dc <_vfiprintf_r+0x1b8>
 800b1fa:	ab03      	add	r3, sp, #12
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	462a      	mov	r2, r5
 800b200:	4b12      	ldr	r3, [pc, #72]	@ (800b24c <_vfiprintf_r+0x228>)
 800b202:	a904      	add	r1, sp, #16
 800b204:	4630      	mov	r0, r6
 800b206:	f3af 8000 	nop.w
 800b20a:	4607      	mov	r7, r0
 800b20c:	1c78      	adds	r0, r7, #1
 800b20e:	d1d6      	bne.n	800b1be <_vfiprintf_r+0x19a>
 800b210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b212:	07d9      	lsls	r1, r3, #31
 800b214:	d405      	bmi.n	800b222 <_vfiprintf_r+0x1fe>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	059a      	lsls	r2, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_vfiprintf_r+0x1fe>
 800b21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b21e:	f7ff fddd 	bl	800addc <__retarget_lock_release_recursive>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	065b      	lsls	r3, r3, #25
 800b226:	f53f af1f 	bmi.w	800b068 <_vfiprintf_r+0x44>
 800b22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b22c:	e71e      	b.n	800b06c <_vfiprintf_r+0x48>
 800b22e:	ab03      	add	r3, sp, #12
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	462a      	mov	r2, r5
 800b234:	4b05      	ldr	r3, [pc, #20]	@ (800b24c <_vfiprintf_r+0x228>)
 800b236:	a904      	add	r1, sp, #16
 800b238:	4630      	mov	r0, r6
 800b23a:	f000 f879 	bl	800b330 <_printf_i>
 800b23e:	e7e4      	b.n	800b20a <_vfiprintf_r+0x1e6>
 800b240:	0800c96c 	.word	0x0800c96c
 800b244:	0800c976 	.word	0x0800c976
 800b248:	00000000 	.word	0x00000000
 800b24c:	0800afff 	.word	0x0800afff
 800b250:	0800c972 	.word	0x0800c972

0800b254 <_printf_common>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	4616      	mov	r6, r2
 800b25a:	4698      	mov	r8, r3
 800b25c:	688a      	ldr	r2, [r1, #8]
 800b25e:	690b      	ldr	r3, [r1, #16]
 800b260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b264:	4293      	cmp	r3, r2
 800b266:	bfb8      	it	lt
 800b268:	4613      	movlt	r3, r2
 800b26a:	6033      	str	r3, [r6, #0]
 800b26c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b270:	4607      	mov	r7, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b10a      	cbz	r2, 800b27a <_printf_common+0x26>
 800b276:	3301      	adds	r3, #1
 800b278:	6033      	str	r3, [r6, #0]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	0699      	lsls	r1, r3, #26
 800b27e:	bf42      	ittt	mi
 800b280:	6833      	ldrmi	r3, [r6, #0]
 800b282:	3302      	addmi	r3, #2
 800b284:	6033      	strmi	r3, [r6, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	f015 0506 	ands.w	r5, r5, #6
 800b28c:	d106      	bne.n	800b29c <_printf_common+0x48>
 800b28e:	f104 0a19 	add.w	sl, r4, #25
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	6832      	ldr	r2, [r6, #0]
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc26      	bgt.n	800b2ea <_printf_common+0x96>
 800b29c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	3b00      	subs	r3, #0
 800b2a4:	bf18      	it	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	0692      	lsls	r2, r2, #26
 800b2aa:	d42b      	bmi.n	800b304 <_printf_common+0xb0>
 800b2ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	47c8      	blx	r9
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d01e      	beq.n	800b2f8 <_printf_common+0xa4>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	6922      	ldr	r2, [r4, #16]
 800b2be:	f003 0306 	and.w	r3, r3, #6
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	bf02      	ittt	eq
 800b2c6:	68e5      	ldreq	r5, [r4, #12]
 800b2c8:	6833      	ldreq	r3, [r6, #0]
 800b2ca:	1aed      	subeq	r5, r5, r3
 800b2cc:	68a3      	ldr	r3, [r4, #8]
 800b2ce:	bf0c      	ite	eq
 800b2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d4:	2500      	movne	r5, #0
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	bfc4      	itt	gt
 800b2da:	1a9b      	subgt	r3, r3, r2
 800b2dc:	18ed      	addgt	r5, r5, r3
 800b2de:	2600      	movs	r6, #0
 800b2e0:	341a      	adds	r4, #26
 800b2e2:	42b5      	cmp	r5, r6
 800b2e4:	d11a      	bne.n	800b31c <_printf_common+0xc8>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	e008      	b.n	800b2fc <_printf_common+0xa8>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	47c8      	blx	r9
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d103      	bne.n	800b300 <_printf_common+0xac>
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	3501      	adds	r5, #1
 800b302:	e7c6      	b.n	800b292 <_printf_common+0x3e>
 800b304:	18e1      	adds	r1, r4, r3
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	2030      	movs	r0, #48	@ 0x30
 800b30a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b30e:	4422      	add	r2, r4
 800b310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b318:	3302      	adds	r3, #2
 800b31a:	e7c7      	b.n	800b2ac <_printf_common+0x58>
 800b31c:	2301      	movs	r3, #1
 800b31e:	4622      	mov	r2, r4
 800b320:	4641      	mov	r1, r8
 800b322:	4638      	mov	r0, r7
 800b324:	47c8      	blx	r9
 800b326:	3001      	adds	r0, #1
 800b328:	d0e6      	beq.n	800b2f8 <_printf_common+0xa4>
 800b32a:	3601      	adds	r6, #1
 800b32c:	e7d9      	b.n	800b2e2 <_printf_common+0x8e>
	...

0800b330 <_printf_i>:
 800b330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b334:	7e0f      	ldrb	r7, [r1, #24]
 800b336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b338:	2f78      	cmp	r7, #120	@ 0x78
 800b33a:	4691      	mov	r9, r2
 800b33c:	4680      	mov	r8, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	469a      	mov	sl, r3
 800b342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b346:	d807      	bhi.n	800b358 <_printf_i+0x28>
 800b348:	2f62      	cmp	r7, #98	@ 0x62
 800b34a:	d80a      	bhi.n	800b362 <_printf_i+0x32>
 800b34c:	2f00      	cmp	r7, #0
 800b34e:	f000 80d2 	beq.w	800b4f6 <_printf_i+0x1c6>
 800b352:	2f58      	cmp	r7, #88	@ 0x58
 800b354:	f000 80b9 	beq.w	800b4ca <_printf_i+0x19a>
 800b358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b35c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b360:	e03a      	b.n	800b3d8 <_printf_i+0xa8>
 800b362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b366:	2b15      	cmp	r3, #21
 800b368:	d8f6      	bhi.n	800b358 <_printf_i+0x28>
 800b36a:	a101      	add	r1, pc, #4	@ (adr r1, 800b370 <_printf_i+0x40>)
 800b36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3dd 	.word	0x0800b3dd
 800b378:	0800b359 	.word	0x0800b359
 800b37c:	0800b359 	.word	0x0800b359
 800b380:	0800b359 	.word	0x0800b359
 800b384:	0800b359 	.word	0x0800b359
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b359 	.word	0x0800b359
 800b390:	0800b359 	.word	0x0800b359
 800b394:	0800b359 	.word	0x0800b359
 800b398:	0800b359 	.word	0x0800b359
 800b39c:	0800b4dd 	.word	0x0800b4dd
 800b3a0:	0800b407 	.word	0x0800b407
 800b3a4:	0800b497 	.word	0x0800b497
 800b3a8:	0800b359 	.word	0x0800b359
 800b3ac:	0800b359 	.word	0x0800b359
 800b3b0:	0800b4ff 	.word	0x0800b4ff
 800b3b4:	0800b359 	.word	0x0800b359
 800b3b8:	0800b407 	.word	0x0800b407
 800b3bc:	0800b359 	.word	0x0800b359
 800b3c0:	0800b359 	.word	0x0800b359
 800b3c4:	0800b49f 	.word	0x0800b49f
 800b3c8:	6833      	ldr	r3, [r6, #0]
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6032      	str	r2, [r6, #0]
 800b3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e09d      	b.n	800b518 <_printf_i+0x1e8>
 800b3dc:	6833      	ldr	r3, [r6, #0]
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	1d19      	adds	r1, r3, #4
 800b3e2:	6031      	str	r1, [r6, #0]
 800b3e4:	0606      	lsls	r6, r0, #24
 800b3e6:	d501      	bpl.n	800b3ec <_printf_i+0xbc>
 800b3e8:	681d      	ldr	r5, [r3, #0]
 800b3ea:	e003      	b.n	800b3f4 <_printf_i+0xc4>
 800b3ec:	0645      	lsls	r5, r0, #25
 800b3ee:	d5fb      	bpl.n	800b3e8 <_printf_i+0xb8>
 800b3f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3f4:	2d00      	cmp	r5, #0
 800b3f6:	da03      	bge.n	800b400 <_printf_i+0xd0>
 800b3f8:	232d      	movs	r3, #45	@ 0x2d
 800b3fa:	426d      	negs	r5, r5
 800b3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b400:	4859      	ldr	r0, [pc, #356]	@ (800b568 <_printf_i+0x238>)
 800b402:	230a      	movs	r3, #10
 800b404:	e011      	b.n	800b42a <_printf_i+0xfa>
 800b406:	6821      	ldr	r1, [r4, #0]
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	0608      	lsls	r0, r1, #24
 800b40c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b410:	d402      	bmi.n	800b418 <_printf_i+0xe8>
 800b412:	0649      	lsls	r1, r1, #25
 800b414:	bf48      	it	mi
 800b416:	b2ad      	uxthmi	r5, r5
 800b418:	2f6f      	cmp	r7, #111	@ 0x6f
 800b41a:	4853      	ldr	r0, [pc, #332]	@ (800b568 <_printf_i+0x238>)
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	bf14      	ite	ne
 800b420:	230a      	movne	r3, #10
 800b422:	2308      	moveq	r3, #8
 800b424:	2100      	movs	r1, #0
 800b426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b42a:	6866      	ldr	r6, [r4, #4]
 800b42c:	60a6      	str	r6, [r4, #8]
 800b42e:	2e00      	cmp	r6, #0
 800b430:	bfa2      	ittt	ge
 800b432:	6821      	ldrge	r1, [r4, #0]
 800b434:	f021 0104 	bicge.w	r1, r1, #4
 800b438:	6021      	strge	r1, [r4, #0]
 800b43a:	b90d      	cbnz	r5, 800b440 <_printf_i+0x110>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	d04b      	beq.n	800b4d8 <_printf_i+0x1a8>
 800b440:	4616      	mov	r6, r2
 800b442:	fbb5 f1f3 	udiv	r1, r5, r3
 800b446:	fb03 5711 	mls	r7, r3, r1, r5
 800b44a:	5dc7      	ldrb	r7, [r0, r7]
 800b44c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b450:	462f      	mov	r7, r5
 800b452:	42bb      	cmp	r3, r7
 800b454:	460d      	mov	r5, r1
 800b456:	d9f4      	bls.n	800b442 <_printf_i+0x112>
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d10b      	bne.n	800b474 <_printf_i+0x144>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07df      	lsls	r7, r3, #31
 800b460:	d508      	bpl.n	800b474 <_printf_i+0x144>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	6861      	ldr	r1, [r4, #4]
 800b466:	4299      	cmp	r1, r3
 800b468:	bfde      	ittt	le
 800b46a:	2330      	movle	r3, #48	@ 0x30
 800b46c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b470:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b474:	1b92      	subs	r2, r2, r6
 800b476:	6122      	str	r2, [r4, #16]
 800b478:	f8cd a000 	str.w	sl, [sp]
 800b47c:	464b      	mov	r3, r9
 800b47e:	aa03      	add	r2, sp, #12
 800b480:	4621      	mov	r1, r4
 800b482:	4640      	mov	r0, r8
 800b484:	f7ff fee6 	bl	800b254 <_printf_common>
 800b488:	3001      	adds	r0, #1
 800b48a:	d14a      	bne.n	800b522 <_printf_i+0x1f2>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b004      	add	sp, #16
 800b492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f043 0320 	orr.w	r3, r3, #32
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	4833      	ldr	r0, [pc, #204]	@ (800b56c <_printf_i+0x23c>)
 800b4a0:	2778      	movs	r7, #120	@ 0x78
 800b4a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	6831      	ldr	r1, [r6, #0]
 800b4aa:	061f      	lsls	r7, r3, #24
 800b4ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4b0:	d402      	bmi.n	800b4b8 <_printf_i+0x188>
 800b4b2:	065f      	lsls	r7, r3, #25
 800b4b4:	bf48      	it	mi
 800b4b6:	b2ad      	uxthmi	r5, r5
 800b4b8:	6031      	str	r1, [r6, #0]
 800b4ba:	07d9      	lsls	r1, r3, #31
 800b4bc:	bf44      	itt	mi
 800b4be:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c2:	6023      	strmi	r3, [r4, #0]
 800b4c4:	b11d      	cbz	r5, 800b4ce <_printf_i+0x19e>
 800b4c6:	2310      	movs	r3, #16
 800b4c8:	e7ac      	b.n	800b424 <_printf_i+0xf4>
 800b4ca:	4827      	ldr	r0, [pc, #156]	@ (800b568 <_printf_i+0x238>)
 800b4cc:	e7e9      	b.n	800b4a2 <_printf_i+0x172>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	f023 0320 	bic.w	r3, r3, #32
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	e7f6      	b.n	800b4c6 <_printf_i+0x196>
 800b4d8:	4616      	mov	r6, r2
 800b4da:	e7bd      	b.n	800b458 <_printf_i+0x128>
 800b4dc:	6833      	ldr	r3, [r6, #0]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	6961      	ldr	r1, [r4, #20]
 800b4e2:	1d18      	adds	r0, r3, #4
 800b4e4:	6030      	str	r0, [r6, #0]
 800b4e6:	062e      	lsls	r6, r5, #24
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_i+0x1c0>
 800b4ec:	6019      	str	r1, [r3, #0]
 800b4ee:	e002      	b.n	800b4f6 <_printf_i+0x1c6>
 800b4f0:	0668      	lsls	r0, r5, #25
 800b4f2:	d5fb      	bpl.n	800b4ec <_printf_i+0x1bc>
 800b4f4:	8019      	strh	r1, [r3, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	4616      	mov	r6, r2
 800b4fc:	e7bc      	b.n	800b478 <_printf_i+0x148>
 800b4fe:	6833      	ldr	r3, [r6, #0]
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	6032      	str	r2, [r6, #0]
 800b504:	681e      	ldr	r6, [r3, #0]
 800b506:	6862      	ldr	r2, [r4, #4]
 800b508:	2100      	movs	r1, #0
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7f4 fe80 	bl	8000210 <memchr>
 800b510:	b108      	cbz	r0, 800b516 <_printf_i+0x1e6>
 800b512:	1b80      	subs	r0, r0, r6
 800b514:	6060      	str	r0, [r4, #4]
 800b516:	6863      	ldr	r3, [r4, #4]
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	2300      	movs	r3, #0
 800b51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b520:	e7aa      	b.n	800b478 <_printf_i+0x148>
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	4632      	mov	r2, r6
 800b526:	4649      	mov	r1, r9
 800b528:	4640      	mov	r0, r8
 800b52a:	47d0      	blx	sl
 800b52c:	3001      	adds	r0, #1
 800b52e:	d0ad      	beq.n	800b48c <_printf_i+0x15c>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	079b      	lsls	r3, r3, #30
 800b534:	d413      	bmi.n	800b55e <_printf_i+0x22e>
 800b536:	68e0      	ldr	r0, [r4, #12]
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	4298      	cmp	r0, r3
 800b53c:	bfb8      	it	lt
 800b53e:	4618      	movlt	r0, r3
 800b540:	e7a6      	b.n	800b490 <_printf_i+0x160>
 800b542:	2301      	movs	r3, #1
 800b544:	4632      	mov	r2, r6
 800b546:	4649      	mov	r1, r9
 800b548:	4640      	mov	r0, r8
 800b54a:	47d0      	blx	sl
 800b54c:	3001      	adds	r0, #1
 800b54e:	d09d      	beq.n	800b48c <_printf_i+0x15c>
 800b550:	3501      	adds	r5, #1
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	9903      	ldr	r1, [sp, #12]
 800b556:	1a5b      	subs	r3, r3, r1
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dcf2      	bgt.n	800b542 <_printf_i+0x212>
 800b55c:	e7eb      	b.n	800b536 <_printf_i+0x206>
 800b55e:	2500      	movs	r5, #0
 800b560:	f104 0619 	add.w	r6, r4, #25
 800b564:	e7f5      	b.n	800b552 <_printf_i+0x222>
 800b566:	bf00      	nop
 800b568:	0800c97d 	.word	0x0800c97d
 800b56c:	0800c98e 	.word	0x0800c98e

0800b570 <__sflush_r>:
 800b570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	0716      	lsls	r6, r2, #28
 800b57a:	4605      	mov	r5, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	d454      	bmi.n	800b62a <__sflush_r+0xba>
 800b580:	684b      	ldr	r3, [r1, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dc02      	bgt.n	800b58c <__sflush_r+0x1c>
 800b586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dd48      	ble.n	800b61e <__sflush_r+0xae>
 800b58c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b58e:	2e00      	cmp	r6, #0
 800b590:	d045      	beq.n	800b61e <__sflush_r+0xae>
 800b592:	2300      	movs	r3, #0
 800b594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b598:	682f      	ldr	r7, [r5, #0]
 800b59a:	6a21      	ldr	r1, [r4, #32]
 800b59c:	602b      	str	r3, [r5, #0]
 800b59e:	d030      	beq.n	800b602 <__sflush_r+0x92>
 800b5a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	0759      	lsls	r1, r3, #29
 800b5a6:	d505      	bpl.n	800b5b4 <__sflush_r+0x44>
 800b5a8:	6863      	ldr	r3, [r4, #4]
 800b5aa:	1ad2      	subs	r2, r2, r3
 800b5ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5ae:	b10b      	cbz	r3, 800b5b4 <__sflush_r+0x44>
 800b5b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5b2:	1ad2      	subs	r2, r2, r3
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5b8:	6a21      	ldr	r1, [r4, #32]
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	47b0      	blx	r6
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	d106      	bne.n	800b5d2 <__sflush_r+0x62>
 800b5c4:	6829      	ldr	r1, [r5, #0]
 800b5c6:	291d      	cmp	r1, #29
 800b5c8:	d82b      	bhi.n	800b622 <__sflush_r+0xb2>
 800b5ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b674 <__sflush_r+0x104>)
 800b5cc:	410a      	asrs	r2, r1
 800b5ce:	07d6      	lsls	r6, r2, #31
 800b5d0:	d427      	bmi.n	800b622 <__sflush_r+0xb2>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	6062      	str	r2, [r4, #4]
 800b5d6:	04d9      	lsls	r1, r3, #19
 800b5d8:	6922      	ldr	r2, [r4, #16]
 800b5da:	6022      	str	r2, [r4, #0]
 800b5dc:	d504      	bpl.n	800b5e8 <__sflush_r+0x78>
 800b5de:	1c42      	adds	r2, r0, #1
 800b5e0:	d101      	bne.n	800b5e6 <__sflush_r+0x76>
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	b903      	cbnz	r3, 800b5e8 <__sflush_r+0x78>
 800b5e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5ea:	602f      	str	r7, [r5, #0]
 800b5ec:	b1b9      	cbz	r1, 800b61e <__sflush_r+0xae>
 800b5ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5f2:	4299      	cmp	r1, r3
 800b5f4:	d002      	beq.n	800b5fc <__sflush_r+0x8c>
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f7ff fbf2 	bl	800ade0 <_free_r>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800b600:	e00d      	b.n	800b61e <__sflush_r+0xae>
 800b602:	2301      	movs	r3, #1
 800b604:	4628      	mov	r0, r5
 800b606:	47b0      	blx	r6
 800b608:	4602      	mov	r2, r0
 800b60a:	1c50      	adds	r0, r2, #1
 800b60c:	d1c9      	bne.n	800b5a2 <__sflush_r+0x32>
 800b60e:	682b      	ldr	r3, [r5, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d0c6      	beq.n	800b5a2 <__sflush_r+0x32>
 800b614:	2b1d      	cmp	r3, #29
 800b616:	d001      	beq.n	800b61c <__sflush_r+0xac>
 800b618:	2b16      	cmp	r3, #22
 800b61a:	d11e      	bne.n	800b65a <__sflush_r+0xea>
 800b61c:	602f      	str	r7, [r5, #0]
 800b61e:	2000      	movs	r0, #0
 800b620:	e022      	b.n	800b668 <__sflush_r+0xf8>
 800b622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b626:	b21b      	sxth	r3, r3
 800b628:	e01b      	b.n	800b662 <__sflush_r+0xf2>
 800b62a:	690f      	ldr	r7, [r1, #16]
 800b62c:	2f00      	cmp	r7, #0
 800b62e:	d0f6      	beq.n	800b61e <__sflush_r+0xae>
 800b630:	0793      	lsls	r3, r2, #30
 800b632:	680e      	ldr	r6, [r1, #0]
 800b634:	bf08      	it	eq
 800b636:	694b      	ldreq	r3, [r1, #20]
 800b638:	600f      	str	r7, [r1, #0]
 800b63a:	bf18      	it	ne
 800b63c:	2300      	movne	r3, #0
 800b63e:	eba6 0807 	sub.w	r8, r6, r7
 800b642:	608b      	str	r3, [r1, #8]
 800b644:	f1b8 0f00 	cmp.w	r8, #0
 800b648:	dde9      	ble.n	800b61e <__sflush_r+0xae>
 800b64a:	6a21      	ldr	r1, [r4, #32]
 800b64c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b64e:	4643      	mov	r3, r8
 800b650:	463a      	mov	r2, r7
 800b652:	4628      	mov	r0, r5
 800b654:	47b0      	blx	r6
 800b656:	2800      	cmp	r0, #0
 800b658:	dc08      	bgt.n	800b66c <__sflush_r+0xfc>
 800b65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b662:	81a3      	strh	r3, [r4, #12]
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	4407      	add	r7, r0
 800b66e:	eba8 0800 	sub.w	r8, r8, r0
 800b672:	e7e7      	b.n	800b644 <__sflush_r+0xd4>
 800b674:	dfbffffe 	.word	0xdfbffffe

0800b678 <_fflush_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	690b      	ldr	r3, [r1, #16]
 800b67c:	4605      	mov	r5, r0
 800b67e:	460c      	mov	r4, r1
 800b680:	b913      	cbnz	r3, 800b688 <_fflush_r+0x10>
 800b682:	2500      	movs	r5, #0
 800b684:	4628      	mov	r0, r5
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	b118      	cbz	r0, 800b692 <_fflush_r+0x1a>
 800b68a:	6a03      	ldr	r3, [r0, #32]
 800b68c:	b90b      	cbnz	r3, 800b692 <_fflush_r+0x1a>
 800b68e:	f7ff f9a5 	bl	800a9dc <__sinit>
 800b692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0f3      	beq.n	800b682 <_fflush_r+0xa>
 800b69a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b69c:	07d0      	lsls	r0, r2, #31
 800b69e:	d404      	bmi.n	800b6aa <_fflush_r+0x32>
 800b6a0:	0599      	lsls	r1, r3, #22
 800b6a2:	d402      	bmi.n	800b6aa <_fflush_r+0x32>
 800b6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6a6:	f7ff fb98 	bl	800adda <__retarget_lock_acquire_recursive>
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f7ff ff5f 	bl	800b570 <__sflush_r>
 800b6b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6b4:	07da      	lsls	r2, r3, #31
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	d4e4      	bmi.n	800b684 <_fflush_r+0xc>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	059b      	lsls	r3, r3, #22
 800b6be:	d4e1      	bmi.n	800b684 <_fflush_r+0xc>
 800b6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6c2:	f7ff fb8b 	bl	800addc <__retarget_lock_release_recursive>
 800b6c6:	e7dd      	b.n	800b684 <_fflush_r+0xc>

0800b6c8 <__swhatbuf_r>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d0:	2900      	cmp	r1, #0
 800b6d2:	b096      	sub	sp, #88	@ 0x58
 800b6d4:	4615      	mov	r5, r2
 800b6d6:	461e      	mov	r6, r3
 800b6d8:	da0d      	bge.n	800b6f6 <__swhatbuf_r+0x2e>
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6e0:	f04f 0100 	mov.w	r1, #0
 800b6e4:	bf14      	ite	ne
 800b6e6:	2340      	movne	r3, #64	@ 0x40
 800b6e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	6031      	str	r1, [r6, #0]
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	b016      	add	sp, #88	@ 0x58
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	466a      	mov	r2, sp
 800b6f8:	f000 f87c 	bl	800b7f4 <_fstat_r>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dbec      	blt.n	800b6da <__swhatbuf_r+0x12>
 800b700:	9901      	ldr	r1, [sp, #4]
 800b702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b70a:	4259      	negs	r1, r3
 800b70c:	4159      	adcs	r1, r3
 800b70e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b712:	e7eb      	b.n	800b6ec <__swhatbuf_r+0x24>

0800b714 <__smakebuf_r>:
 800b714:	898b      	ldrh	r3, [r1, #12]
 800b716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b718:	079d      	lsls	r5, r3, #30
 800b71a:	4606      	mov	r6, r0
 800b71c:	460c      	mov	r4, r1
 800b71e:	d507      	bpl.n	800b730 <__smakebuf_r+0x1c>
 800b720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	2301      	movs	r3, #1
 800b72a:	6163      	str	r3, [r4, #20]
 800b72c:	b003      	add	sp, #12
 800b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b730:	ab01      	add	r3, sp, #4
 800b732:	466a      	mov	r2, sp
 800b734:	f7ff ffc8 	bl	800b6c8 <__swhatbuf_r>
 800b738:	9f00      	ldr	r7, [sp, #0]
 800b73a:	4605      	mov	r5, r0
 800b73c:	4639      	mov	r1, r7
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff fbba 	bl	800aeb8 <_malloc_r>
 800b744:	b948      	cbnz	r0, 800b75a <__smakebuf_r+0x46>
 800b746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74a:	059a      	lsls	r2, r3, #22
 800b74c:	d4ee      	bmi.n	800b72c <__smakebuf_r+0x18>
 800b74e:	f023 0303 	bic.w	r3, r3, #3
 800b752:	f043 0302 	orr.w	r3, r3, #2
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	e7e2      	b.n	800b720 <__smakebuf_r+0xc>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	6020      	str	r0, [r4, #0]
 800b75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	9b01      	ldr	r3, [sp, #4]
 800b766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b76a:	b15b      	cbz	r3, 800b784 <__smakebuf_r+0x70>
 800b76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b770:	4630      	mov	r0, r6
 800b772:	f000 f851 	bl	800b818 <_isatty_r>
 800b776:	b128      	cbz	r0, 800b784 <__smakebuf_r+0x70>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	431d      	orrs	r5, r3
 800b788:	81a5      	strh	r5, [r4, #12]
 800b78a:	e7cf      	b.n	800b72c <__smakebuf_r+0x18>

0800b78c <_putc_r>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	460d      	mov	r5, r1
 800b790:	4614      	mov	r4, r2
 800b792:	4606      	mov	r6, r0
 800b794:	b118      	cbz	r0, 800b79e <_putc_r+0x12>
 800b796:	6a03      	ldr	r3, [r0, #32]
 800b798:	b90b      	cbnz	r3, 800b79e <_putc_r+0x12>
 800b79a:	f7ff f91f 	bl	800a9dc <__sinit>
 800b79e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7a0:	07d8      	lsls	r0, r3, #31
 800b7a2:	d405      	bmi.n	800b7b0 <_putc_r+0x24>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	0599      	lsls	r1, r3, #22
 800b7a8:	d402      	bmi.n	800b7b0 <_putc_r+0x24>
 800b7aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ac:	f7ff fb15 	bl	800adda <__retarget_lock_acquire_recursive>
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	60a3      	str	r3, [r4, #8]
 800b7b8:	da05      	bge.n	800b7c6 <_putc_r+0x3a>
 800b7ba:	69a2      	ldr	r2, [r4, #24]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	db12      	blt.n	800b7e6 <_putc_r+0x5a>
 800b7c0:	b2eb      	uxtb	r3, r5
 800b7c2:	2b0a      	cmp	r3, #10
 800b7c4:	d00f      	beq.n	800b7e6 <_putc_r+0x5a>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	6022      	str	r2, [r4, #0]
 800b7cc:	701d      	strb	r5, [r3, #0]
 800b7ce:	b2ed      	uxtb	r5, r5
 800b7d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7d2:	07da      	lsls	r2, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_putc_r+0x56>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	059b      	lsls	r3, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_putc_r+0x56>
 800b7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7de:	f7ff fafd 	bl	800addc <__retarget_lock_release_recursive>
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	bd70      	pop	{r4, r5, r6, pc}
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff f9e7 	bl	800abbe <__swbuf_r>
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	e7ed      	b.n	800b7d0 <_putc_r+0x44>

0800b7f4 <_fstat_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	@ (800b814 <_fstat_r+0x20>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	f7f5 ff7a 	bl	80016fa <_fstat>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	d102      	bne.n	800b810 <_fstat_r+0x1c>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b103      	cbz	r3, 800b810 <_fstat_r+0x1c>
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	bf00      	nop
 800b814:	20008bf4 	.word	0x20008bf4

0800b818 <_isatty_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d06      	ldr	r5, [pc, #24]	@ (800b834 <_isatty_r+0x1c>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f5 ff79 	bl	800171a <_isatty>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_isatty_r+0x1a>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_isatty_r+0x1a>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20008bf4 	.word	0x20008bf4

0800b838 <_sbrk_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d06      	ldr	r5, [pc, #24]	@ (800b854 <_sbrk_r+0x1c>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f5 ff82 	bl	800174c <_sbrk>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_sbrk_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_sbrk_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20008bf4 	.word	0x20008bf4

0800b858 <sin>:
 800b858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b85a:	ec53 2b10 	vmov	r2, r3, d0
 800b85e:	4826      	ldr	r0, [pc, #152]	@ (800b8f8 <sin+0xa0>)
 800b860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b864:	4281      	cmp	r1, r0
 800b866:	d807      	bhi.n	800b878 <sin+0x20>
 800b868:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b8f0 <sin+0x98>
 800b86c:	2000      	movs	r0, #0
 800b86e:	b005      	add	sp, #20
 800b870:	f85d eb04 	ldr.w	lr, [sp], #4
 800b874:	f000 b90c 	b.w	800ba90 <__kernel_sin>
 800b878:	4820      	ldr	r0, [pc, #128]	@ (800b8fc <sin+0xa4>)
 800b87a:	4281      	cmp	r1, r0
 800b87c:	d908      	bls.n	800b890 <sin+0x38>
 800b87e:	4610      	mov	r0, r2
 800b880:	4619      	mov	r1, r3
 800b882:	f7f4 fe43 	bl	800050c <__aeabi_dsub>
 800b886:	ec41 0b10 	vmov	d0, r0, r1
 800b88a:	b005      	add	sp, #20
 800b88c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b890:	4668      	mov	r0, sp
 800b892:	f000 f9b9 	bl	800bc08 <__ieee754_rem_pio2>
 800b896:	f000 0003 	and.w	r0, r0, #3
 800b89a:	2801      	cmp	r0, #1
 800b89c:	d00c      	beq.n	800b8b8 <sin+0x60>
 800b89e:	2802      	cmp	r0, #2
 800b8a0:	d011      	beq.n	800b8c6 <sin+0x6e>
 800b8a2:	b9e8      	cbnz	r0, 800b8e0 <sin+0x88>
 800b8a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8a8:	ed9d 0b00 	vldr	d0, [sp]
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	f000 f8ef 	bl	800ba90 <__kernel_sin>
 800b8b2:	ec51 0b10 	vmov	r0, r1, d0
 800b8b6:	e7e6      	b.n	800b886 <sin+0x2e>
 800b8b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8bc:	ed9d 0b00 	vldr	d0, [sp]
 800b8c0:	f000 f81e 	bl	800b900 <__kernel_cos>
 800b8c4:	e7f5      	b.n	800b8b2 <sin+0x5a>
 800b8c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8ca:	ed9d 0b00 	vldr	d0, [sp]
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	f000 f8de 	bl	800ba90 <__kernel_sin>
 800b8d4:	ec53 2b10 	vmov	r2, r3, d0
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b8de:	e7d2      	b.n	800b886 <sin+0x2e>
 800b8e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8e4:	ed9d 0b00 	vldr	d0, [sp]
 800b8e8:	f000 f80a 	bl	800b900 <__kernel_cos>
 800b8ec:	e7f2      	b.n	800b8d4 <sin+0x7c>
 800b8ee:	bf00      	nop
	...
 800b8f8:	3fe921fb 	.word	0x3fe921fb
 800b8fc:	7fefffff 	.word	0x7fefffff

0800b900 <__kernel_cos>:
 800b900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ec57 6b10 	vmov	r6, r7, d0
 800b908:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b90c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b910:	ed8d 1b00 	vstr	d1, [sp]
 800b914:	d206      	bcs.n	800b924 <__kernel_cos+0x24>
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f5 f837 	bl	800098c <__aeabi_d2iz>
 800b91e:	2800      	cmp	r0, #0
 800b920:	f000 8088 	beq.w	800ba34 <__kernel_cos+0x134>
 800b924:	4632      	mov	r2, r6
 800b926:	463b      	mov	r3, r7
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f4 fcc0 	bl	80002b0 <__aeabi_dmul>
 800b930:	4b51      	ldr	r3, [pc, #324]	@ (800ba78 <__kernel_cos+0x178>)
 800b932:	2200      	movs	r2, #0
 800b934:	4604      	mov	r4, r0
 800b936:	460d      	mov	r5, r1
 800b938:	f7f4 fcba 	bl	80002b0 <__aeabi_dmul>
 800b93c:	a340      	add	r3, pc, #256	@ (adr r3, 800ba40 <__kernel_cos+0x140>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	4682      	mov	sl, r0
 800b944:	468b      	mov	fp, r1
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	f7f4 fcb1 	bl	80002b0 <__aeabi_dmul>
 800b94e:	a33e      	add	r3, pc, #248	@ (adr r3, 800ba48 <__kernel_cos+0x148>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fddc 	bl	8000510 <__adddf3>
 800b958:	4622      	mov	r2, r4
 800b95a:	462b      	mov	r3, r5
 800b95c:	f7f4 fca8 	bl	80002b0 <__aeabi_dmul>
 800b960:	a33b      	add	r3, pc, #236	@ (adr r3, 800ba50 <__kernel_cos+0x150>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	f7f4 fdd1 	bl	800050c <__aeabi_dsub>
 800b96a:	4622      	mov	r2, r4
 800b96c:	462b      	mov	r3, r5
 800b96e:	f7f4 fc9f 	bl	80002b0 <__aeabi_dmul>
 800b972:	a339      	add	r3, pc, #228	@ (adr r3, 800ba58 <__kernel_cos+0x158>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fdca 	bl	8000510 <__adddf3>
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f4 fc96 	bl	80002b0 <__aeabi_dmul>
 800b984:	a336      	add	r3, pc, #216	@ (adr r3, 800ba60 <__kernel_cos+0x160>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	f7f4 fdbf 	bl	800050c <__aeabi_dsub>
 800b98e:	4622      	mov	r2, r4
 800b990:	462b      	mov	r3, r5
 800b992:	f7f4 fc8d 	bl	80002b0 <__aeabi_dmul>
 800b996:	a334      	add	r3, pc, #208	@ (adr r3, 800ba68 <__kernel_cos+0x168>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fdb8 	bl	8000510 <__adddf3>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fc84 	bl	80002b0 <__aeabi_dmul>
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	f7f4 fc80 	bl	80002b0 <__aeabi_dmul>
 800b9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	f7f4 fc78 	bl	80002b0 <__aeabi_dmul>
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7f4 fda0 	bl	800050c <__aeabi_dsub>
 800b9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800ba7c <__kernel_cos+0x17c>)
 800b9ce:	4598      	cmp	r8, r3
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	460f      	mov	r7, r1
 800b9d4:	d810      	bhi.n	800b9f8 <__kernel_cos+0xf8>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4650      	mov	r0, sl
 800b9dc:	4659      	mov	r1, fp
 800b9de:	f7f4 fd95 	bl	800050c <__aeabi_dsub>
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4926      	ldr	r1, [pc, #152]	@ (800ba80 <__kernel_cos+0x180>)
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	f7f4 fd8f 	bl	800050c <__aeabi_dsub>
 800b9ee:	ec41 0b10 	vmov	d0, r0, r1
 800b9f2:	b003      	add	sp, #12
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	4b22      	ldr	r3, [pc, #136]	@ (800ba84 <__kernel_cos+0x184>)
 800b9fa:	4921      	ldr	r1, [pc, #132]	@ (800ba80 <__kernel_cos+0x180>)
 800b9fc:	4598      	cmp	r8, r3
 800b9fe:	bf8c      	ite	hi
 800ba00:	4d21      	ldrhi	r5, [pc, #132]	@ (800ba88 <__kernel_cos+0x188>)
 800ba02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ba06:	2400      	movs	r4, #0
 800ba08:	4622      	mov	r2, r4
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	f7f4 fd7d 	bl	800050c <__aeabi_dsub>
 800ba12:	4622      	mov	r2, r4
 800ba14:	4680      	mov	r8, r0
 800ba16:	4689      	mov	r9, r1
 800ba18:	462b      	mov	r3, r5
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	4659      	mov	r1, fp
 800ba1e:	f7f4 fd75 	bl	800050c <__aeabi_dsub>
 800ba22:	4632      	mov	r2, r6
 800ba24:	463b      	mov	r3, r7
 800ba26:	f7f4 fd71 	bl	800050c <__aeabi_dsub>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	e7da      	b.n	800b9ea <__kernel_cos+0xea>
 800ba34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800ba70 <__kernel_cos+0x170>
 800ba38:	e7db      	b.n	800b9f2 <__kernel_cos+0xf2>
 800ba3a:	bf00      	nop
 800ba3c:	f3af 8000 	nop.w
 800ba40:	be8838d4 	.word	0xbe8838d4
 800ba44:	bda8fae9 	.word	0xbda8fae9
 800ba48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba4c:	3e21ee9e 	.word	0x3e21ee9e
 800ba50:	809c52ad 	.word	0x809c52ad
 800ba54:	3e927e4f 	.word	0x3e927e4f
 800ba58:	19cb1590 	.word	0x19cb1590
 800ba5c:	3efa01a0 	.word	0x3efa01a0
 800ba60:	16c15177 	.word	0x16c15177
 800ba64:	3f56c16c 	.word	0x3f56c16c
 800ba68:	5555554c 	.word	0x5555554c
 800ba6c:	3fa55555 	.word	0x3fa55555
 800ba70:	00000000 	.word	0x00000000
 800ba74:	3ff00000 	.word	0x3ff00000
 800ba78:	3fe00000 	.word	0x3fe00000
 800ba7c:	3fd33332 	.word	0x3fd33332
 800ba80:	3ff00000 	.word	0x3ff00000
 800ba84:	3fe90000 	.word	0x3fe90000
 800ba88:	3fd20000 	.word	0x3fd20000
 800ba8c:	00000000 	.word	0x00000000

0800ba90 <__kernel_sin>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ec55 4b10 	vmov	r4, r5, d0
 800ba98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800baa2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800baa6:	4680      	mov	r8, r0
 800baa8:	d205      	bcs.n	800bab6 <__kernel_sin+0x26>
 800baaa:	4620      	mov	r0, r4
 800baac:	4629      	mov	r1, r5
 800baae:	f7f4 ff6d 	bl	800098c <__aeabi_d2iz>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d052      	beq.n	800bb5c <__kernel_sin+0xcc>
 800bab6:	4622      	mov	r2, r4
 800bab8:	462b      	mov	r3, r5
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	f7f4 fbf7 	bl	80002b0 <__aeabi_dmul>
 800bac2:	4682      	mov	sl, r0
 800bac4:	468b      	mov	fp, r1
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f4 fbef 	bl	80002b0 <__aeabi_dmul>
 800bad2:	a342      	add	r3, pc, #264	@ (adr r3, 800bbdc <__kernel_sin+0x14c>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	e9cd 0100 	strd	r0, r1, [sp]
 800badc:	4650      	mov	r0, sl
 800bade:	4659      	mov	r1, fp
 800bae0:	f7f4 fbe6 	bl	80002b0 <__aeabi_dmul>
 800bae4:	a33f      	add	r3, pc, #252	@ (adr r3, 800bbe4 <__kernel_sin+0x154>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fd0f 	bl	800050c <__aeabi_dsub>
 800baee:	4652      	mov	r2, sl
 800baf0:	465b      	mov	r3, fp
 800baf2:	f7f4 fbdd 	bl	80002b0 <__aeabi_dmul>
 800baf6:	a33d      	add	r3, pc, #244	@ (adr r3, 800bbec <__kernel_sin+0x15c>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fd08 	bl	8000510 <__adddf3>
 800bb00:	4652      	mov	r2, sl
 800bb02:	465b      	mov	r3, fp
 800bb04:	f7f4 fbd4 	bl	80002b0 <__aeabi_dmul>
 800bb08:	a33a      	add	r3, pc, #232	@ (adr r3, 800bbf4 <__kernel_sin+0x164>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fcfd 	bl	800050c <__aeabi_dsub>
 800bb12:	4652      	mov	r2, sl
 800bb14:	465b      	mov	r3, fp
 800bb16:	f7f4 fbcb 	bl	80002b0 <__aeabi_dmul>
 800bb1a:	a338      	add	r3, pc, #224	@ (adr r3, 800bbfc <__kernel_sin+0x16c>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fcf6 	bl	8000510 <__adddf3>
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	f1b8 0f00 	cmp.w	r8, #0
 800bb2c:	d11b      	bne.n	800bb66 <__kernel_sin+0xd6>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4650      	mov	r0, sl
 800bb34:	4659      	mov	r1, fp
 800bb36:	f7f4 fbbb 	bl	80002b0 <__aeabi_dmul>
 800bb3a:	a325      	add	r3, pc, #148	@ (adr r3, 800bbd0 <__kernel_sin+0x140>)
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f7f4 fce4 	bl	800050c <__aeabi_dsub>
 800bb44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb48:	f7f4 fbb2 	bl	80002b0 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fcdc 	bl	8000510 <__adddf3>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	ec45 4b10 	vmov	d0, r4, r5
 800bb60:	b005      	add	sp, #20
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6a:	4b1b      	ldr	r3, [pc, #108]	@ (800bbd8 <__kernel_sin+0x148>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f7f4 fb9f 	bl	80002b0 <__aeabi_dmul>
 800bb72:	4632      	mov	r2, r6
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	463b      	mov	r3, r7
 800bb7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb7e:	f7f4 fb97 	bl	80002b0 <__aeabi_dmul>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 fcbf 	bl	800050c <__aeabi_dsub>
 800bb8e:	4652      	mov	r2, sl
 800bb90:	465b      	mov	r3, fp
 800bb92:	f7f4 fb8d 	bl	80002b0 <__aeabi_dmul>
 800bb96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb9a:	f7f4 fcb7 	bl	800050c <__aeabi_dsub>
 800bb9e:	a30c      	add	r3, pc, #48	@ (adr r3, 800bbd0 <__kernel_sin+0x140>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbac:	f7f4 fb80 	bl	80002b0 <__aeabi_dmul>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	f7f4 fcaa 	bl	8000510 <__adddf3>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f4 fca2 	bl	800050c <__aeabi_dsub>
 800bbc8:	e7c6      	b.n	800bb58 <__kernel_sin+0xc8>
 800bbca:	bf00      	nop
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	55555549 	.word	0x55555549
 800bbd4:	3fc55555 	.word	0x3fc55555
 800bbd8:	3fe00000 	.word	0x3fe00000
 800bbdc:	5acfd57c 	.word	0x5acfd57c
 800bbe0:	3de5d93a 	.word	0x3de5d93a
 800bbe4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bbe8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bbec:	57b1fe7d 	.word	0x57b1fe7d
 800bbf0:	3ec71de3 	.word	0x3ec71de3
 800bbf4:	19c161d5 	.word	0x19c161d5
 800bbf8:	3f2a01a0 	.word	0x3f2a01a0
 800bbfc:	1110f8a6 	.word	0x1110f8a6
 800bc00:	3f811111 	.word	0x3f811111
 800bc04:	00000000 	.word	0x00000000

0800bc08 <__ieee754_rem_pio2>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ec57 6b10 	vmov	r6, r7, d0
 800bc10:	4bc5      	ldr	r3, [pc, #788]	@ (800bf28 <__ieee754_rem_pio2+0x320>)
 800bc12:	b08d      	sub	sp, #52	@ 0x34
 800bc14:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bc18:	4598      	cmp	r8, r3
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	9704      	str	r7, [sp, #16]
 800bc1e:	d807      	bhi.n	800bc30 <__ieee754_rem_pio2+0x28>
 800bc20:	2200      	movs	r2, #0
 800bc22:	2300      	movs	r3, #0
 800bc24:	ed80 0b00 	vstr	d0, [r0]
 800bc28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	e028      	b.n	800bc82 <__ieee754_rem_pio2+0x7a>
 800bc30:	4bbe      	ldr	r3, [pc, #760]	@ (800bf2c <__ieee754_rem_pio2+0x324>)
 800bc32:	4598      	cmp	r8, r3
 800bc34:	d878      	bhi.n	800bd28 <__ieee754_rem_pio2+0x120>
 800bc36:	9b04      	ldr	r3, [sp, #16]
 800bc38:	4dbd      	ldr	r5, [pc, #756]	@ (800bf30 <__ieee754_rem_pio2+0x328>)
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bef0 <__ieee754_rem_pio2+0x2e8>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	4639      	mov	r1, r7
 800bc46:	dd38      	ble.n	800bcba <__ieee754_rem_pio2+0xb2>
 800bc48:	f7f4 fc60 	bl	800050c <__aeabi_dsub>
 800bc4c:	45a8      	cmp	r8, r5
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460f      	mov	r7, r1
 800bc52:	d01a      	beq.n	800bc8a <__ieee754_rem_pio2+0x82>
 800bc54:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bef8 <__ieee754_rem_pio2+0x2f0>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fc57 	bl	800050c <__aeabi_dsub>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4680      	mov	r8, r0
 800bc64:	4689      	mov	r9, r1
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 fc4f 	bl	800050c <__aeabi_dsub>
 800bc6e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bef8 <__ieee754_rem_pio2+0x2f0>)
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f7f4 fc4a 	bl	800050c <__aeabi_dsub>
 800bc78:	e9c4 8900 	strd	r8, r9, [r4]
 800bc7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc80:	2501      	movs	r5, #1
 800bc82:	4628      	mov	r0, r5
 800bc84:	b00d      	add	sp, #52	@ 0x34
 800bc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8a:	a39d      	add	r3, pc, #628	@ (adr r3, 800bf00 <__ieee754_rem_pio2+0x2f8>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fc3c 	bl	800050c <__aeabi_dsub>
 800bc94:	a39c      	add	r3, pc, #624	@ (adr r3, 800bf08 <__ieee754_rem_pio2+0x300>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	460f      	mov	r7, r1
 800bc9e:	f7f4 fc35 	bl	800050c <__aeabi_dsub>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4680      	mov	r8, r0
 800bca8:	4689      	mov	r9, r1
 800bcaa:	4630      	mov	r0, r6
 800bcac:	4639      	mov	r1, r7
 800bcae:	f7f4 fc2d 	bl	800050c <__aeabi_dsub>
 800bcb2:	a395      	add	r3, pc, #596	@ (adr r3, 800bf08 <__ieee754_rem_pio2+0x300>)
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	e7dc      	b.n	800bc74 <__ieee754_rem_pio2+0x6c>
 800bcba:	f7f4 fc29 	bl	8000510 <__adddf3>
 800bcbe:	45a8      	cmp	r8, r5
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460f      	mov	r7, r1
 800bcc4:	d018      	beq.n	800bcf8 <__ieee754_rem_pio2+0xf0>
 800bcc6:	a38c      	add	r3, pc, #560	@ (adr r3, 800bef8 <__ieee754_rem_pio2+0x2f0>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 fc20 	bl	8000510 <__adddf3>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4680      	mov	r8, r0
 800bcd6:	4689      	mov	r9, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fc16 	bl	800050c <__aeabi_dsub>
 800bce0:	a385      	add	r3, pc, #532	@ (adr r3, 800bef8 <__ieee754_rem_pio2+0x2f0>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f7f4 fc13 	bl	8000510 <__adddf3>
 800bcea:	f04f 35ff 	mov.w	r5, #4294967295
 800bcee:	e9c4 8900 	strd	r8, r9, [r4]
 800bcf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bcf6:	e7c4      	b.n	800bc82 <__ieee754_rem_pio2+0x7a>
 800bcf8:	a381      	add	r3, pc, #516	@ (adr r3, 800bf00 <__ieee754_rem_pio2+0x2f8>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 fc07 	bl	8000510 <__adddf3>
 800bd02:	a381      	add	r3, pc, #516	@ (adr r3, 800bf08 <__ieee754_rem_pio2+0x300>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	f7f4 fc00 	bl	8000510 <__adddf3>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4680      	mov	r8, r0
 800bd16:	4689      	mov	r9, r1
 800bd18:	4630      	mov	r0, r6
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	f7f4 fbf6 	bl	800050c <__aeabi_dsub>
 800bd20:	a379      	add	r3, pc, #484	@ (adr r3, 800bf08 <__ieee754_rem_pio2+0x300>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	e7de      	b.n	800bce6 <__ieee754_rem_pio2+0xde>
 800bd28:	4b82      	ldr	r3, [pc, #520]	@ (800bf34 <__ieee754_rem_pio2+0x32c>)
 800bd2a:	4598      	cmp	r8, r3
 800bd2c:	f200 80d1 	bhi.w	800bed2 <__ieee754_rem_pio2+0x2ca>
 800bd30:	f000 f966 	bl	800c000 <fabs>
 800bd34:	ec57 6b10 	vmov	r6, r7, d0
 800bd38:	a375      	add	r3, pc, #468	@ (adr r3, 800bf10 <__ieee754_rem_pio2+0x308>)
 800bd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fab5 	bl	80002b0 <__aeabi_dmul>
 800bd46:	4b7c      	ldr	r3, [pc, #496]	@ (800bf38 <__ieee754_rem_pio2+0x330>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f7f4 fbe1 	bl	8000510 <__adddf3>
 800bd4e:	f7f4 fe1d 	bl	800098c <__aeabi_d2iz>
 800bd52:	4605      	mov	r5, r0
 800bd54:	f7f4 fd28 	bl	80007a8 <__aeabi_i2d>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd60:	a363      	add	r3, pc, #396	@ (adr r3, 800bef0 <__ieee754_rem_pio2+0x2e8>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 faa3 	bl	80002b0 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 fbcb 	bl	800050c <__aeabi_dsub>
 800bd76:	a360      	add	r3, pc, #384	@ (adr r3, 800bef8 <__ieee754_rem_pio2+0x2f0>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	468b      	mov	fp, r1
 800bd80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd84:	f7f4 fa94 	bl	80002b0 <__aeabi_dmul>
 800bd88:	2d1f      	cmp	r5, #31
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460f      	mov	r7, r1
 800bd8e:	dc0c      	bgt.n	800bdaa <__ieee754_rem_pio2+0x1a2>
 800bd90:	4b6a      	ldr	r3, [pc, #424]	@ (800bf3c <__ieee754_rem_pio2+0x334>)
 800bd92:	1e6a      	subs	r2, r5, #1
 800bd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd98:	4543      	cmp	r3, r8
 800bd9a:	d006      	beq.n	800bdaa <__ieee754_rem_pio2+0x1a2>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	4650      	mov	r0, sl
 800bda2:	4659      	mov	r1, fp
 800bda4:	f7f4 fbb2 	bl	800050c <__aeabi_dsub>
 800bda8:	e00e      	b.n	800bdc8 <__ieee754_rem_pio2+0x1c0>
 800bdaa:	463b      	mov	r3, r7
 800bdac:	4632      	mov	r2, r6
 800bdae:	4650      	mov	r0, sl
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	f7f4 fbab 	bl	800050c <__aeabi_dsub>
 800bdb6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bdc0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	dc02      	bgt.n	800bdce <__ieee754_rem_pio2+0x1c6>
 800bdc8:	e9c4 0100 	strd	r0, r1, [r4]
 800bdcc:	e039      	b.n	800be42 <__ieee754_rem_pio2+0x23a>
 800bdce:	a34c      	add	r3, pc, #304	@ (adr r3, 800bf00 <__ieee754_rem_pio2+0x2f8>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd8:	f7f4 fa6a 	bl	80002b0 <__aeabi_dmul>
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4650      	mov	r0, sl
 800bde6:	4659      	mov	r1, fp
 800bde8:	f7f4 fb90 	bl	800050c <__aeabi_dsub>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	4689      	mov	r9, r1
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	4659      	mov	r1, fp
 800bdf8:	f7f4 fb88 	bl	800050c <__aeabi_dsub>
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	463b      	mov	r3, r7
 800be00:	f7f4 fb84 	bl	800050c <__aeabi_dsub>
 800be04:	a340      	add	r3, pc, #256	@ (adr r3, 800bf08 <__ieee754_rem_pio2+0x300>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	4606      	mov	r6, r0
 800be0c:	460f      	mov	r7, r1
 800be0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be12:	f7f4 fa4d 	bl	80002b0 <__aeabi_dmul>
 800be16:	4632      	mov	r2, r6
 800be18:	463b      	mov	r3, r7
 800be1a:	f7f4 fb77 	bl	800050c <__aeabi_dsub>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	4640      	mov	r0, r8
 800be28:	4649      	mov	r1, r9
 800be2a:	f7f4 fb6f 	bl	800050c <__aeabi_dsub>
 800be2e:	9a05      	ldr	r2, [sp, #20]
 800be30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	2b31      	cmp	r3, #49	@ 0x31
 800be38:	dc20      	bgt.n	800be7c <__ieee754_rem_pio2+0x274>
 800be3a:	e9c4 0100 	strd	r0, r1, [r4]
 800be3e:	46c2      	mov	sl, r8
 800be40:	46cb      	mov	fp, r9
 800be42:	e9d4 8900 	ldrd	r8, r9, [r4]
 800be46:	4650      	mov	r0, sl
 800be48:	4642      	mov	r2, r8
 800be4a:	464b      	mov	r3, r9
 800be4c:	4659      	mov	r1, fp
 800be4e:	f7f4 fb5d 	bl	800050c <__aeabi_dsub>
 800be52:	463b      	mov	r3, r7
 800be54:	4632      	mov	r2, r6
 800be56:	f7f4 fb59 	bl	800050c <__aeabi_dsub>
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be62:	f6bf af0e 	bge.w	800bc82 <__ieee754_rem_pio2+0x7a>
 800be66:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800be6a:	6063      	str	r3, [r4, #4]
 800be6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be70:	f8c4 8000 	str.w	r8, [r4]
 800be74:	60a0      	str	r0, [r4, #8]
 800be76:	60e3      	str	r3, [r4, #12]
 800be78:	426d      	negs	r5, r5
 800be7a:	e702      	b.n	800bc82 <__ieee754_rem_pio2+0x7a>
 800be7c:	a326      	add	r3, pc, #152	@ (adr r3, 800bf18 <__ieee754_rem_pio2+0x310>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be86:	f7f4 fa13 	bl	80002b0 <__aeabi_dmul>
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	f7f4 fb39 	bl	800050c <__aeabi_dsub>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4682      	mov	sl, r0
 800bea0:	468b      	mov	fp, r1
 800bea2:	4640      	mov	r0, r8
 800bea4:	4649      	mov	r1, r9
 800bea6:	f7f4 fb31 	bl	800050c <__aeabi_dsub>
 800beaa:	4632      	mov	r2, r6
 800beac:	463b      	mov	r3, r7
 800beae:	f7f4 fb2d 	bl	800050c <__aeabi_dsub>
 800beb2:	a31b      	add	r3, pc, #108	@ (adr r3, 800bf20 <__ieee754_rem_pio2+0x318>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec0:	f7f4 f9f6 	bl	80002b0 <__aeabi_dmul>
 800bec4:	4632      	mov	r2, r6
 800bec6:	463b      	mov	r3, r7
 800bec8:	f7f4 fb20 	bl	800050c <__aeabi_dsub>
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	e764      	b.n	800bd9c <__ieee754_rem_pio2+0x194>
 800bed2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf40 <__ieee754_rem_pio2+0x338>)
 800bed4:	4598      	cmp	r8, r3
 800bed6:	d935      	bls.n	800bf44 <__ieee754_rem_pio2+0x33c>
 800bed8:	4632      	mov	r2, r6
 800beda:	463b      	mov	r3, r7
 800bedc:	4630      	mov	r0, r6
 800bede:	4639      	mov	r1, r7
 800bee0:	f7f4 fb14 	bl	800050c <__aeabi_dsub>
 800bee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bee8:	e9c4 0100 	strd	r0, r1, [r4]
 800beec:	e69e      	b.n	800bc2c <__ieee754_rem_pio2+0x24>
 800beee:	bf00      	nop
 800bef0:	54400000 	.word	0x54400000
 800bef4:	3ff921fb 	.word	0x3ff921fb
 800bef8:	1a626331 	.word	0x1a626331
 800befc:	3dd0b461 	.word	0x3dd0b461
 800bf00:	1a600000 	.word	0x1a600000
 800bf04:	3dd0b461 	.word	0x3dd0b461
 800bf08:	2e037073 	.word	0x2e037073
 800bf0c:	3ba3198a 	.word	0x3ba3198a
 800bf10:	6dc9c883 	.word	0x6dc9c883
 800bf14:	3fe45f30 	.word	0x3fe45f30
 800bf18:	2e000000 	.word	0x2e000000
 800bf1c:	3ba3198a 	.word	0x3ba3198a
 800bf20:	252049c1 	.word	0x252049c1
 800bf24:	397b839a 	.word	0x397b839a
 800bf28:	3fe921fb 	.word	0x3fe921fb
 800bf2c:	4002d97b 	.word	0x4002d97b
 800bf30:	3ff921fb 	.word	0x3ff921fb
 800bf34:	413921fb 	.word	0x413921fb
 800bf38:	3fe00000 	.word	0x3fe00000
 800bf3c:	0800c9a0 	.word	0x0800c9a0
 800bf40:	7fefffff 	.word	0x7fefffff
 800bf44:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bf48:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bf4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bf50:	4630      	mov	r0, r6
 800bf52:	460f      	mov	r7, r1
 800bf54:	f7f4 fd1a 	bl	800098c <__aeabi_d2iz>
 800bf58:	f7f4 fc26 	bl	80007a8 <__aeabi_i2d>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf68:	f7f4 fad0 	bl	800050c <__aeabi_dsub>
 800bf6c:	4b22      	ldr	r3, [pc, #136]	@ (800bff8 <__ieee754_rem_pio2+0x3f0>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f7f4 f99e 	bl	80002b0 <__aeabi_dmul>
 800bf74:	460f      	mov	r7, r1
 800bf76:	4606      	mov	r6, r0
 800bf78:	f7f4 fd08 	bl	800098c <__aeabi_d2iz>
 800bf7c:	f7f4 fc14 	bl	80007a8 <__aeabi_i2d>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf8c:	f7f4 fabe 	bl	800050c <__aeabi_dsub>
 800bf90:	4b19      	ldr	r3, [pc, #100]	@ (800bff8 <__ieee754_rem_pio2+0x3f0>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	f7f4 f98c 	bl	80002b0 <__aeabi_dmul>
 800bf98:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bf9c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bfa0:	f04f 0803 	mov.w	r8, #3
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	2700      	movs	r7, #0
 800bfa8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	46c2      	mov	sl, r8
 800bfb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfb6:	f7f4 fcb7 	bl	8000928 <__aeabi_dcmpeq>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d1f4      	bne.n	800bfa8 <__ieee754_rem_pio2+0x3a0>
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bffc <__ieee754_rem_pio2+0x3f4>)
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	462a      	mov	r2, r5
 800bfc8:	4653      	mov	r3, sl
 800bfca:	4621      	mov	r1, r4
 800bfcc:	a806      	add	r0, sp, #24
 800bfce:	f000 f81f 	bl	800c010 <__kernel_rem_pio2>
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	f6bf ae53 	bge.w	800bc82 <__ieee754_rem_pio2+0x7a>
 800bfdc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bfe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bfe4:	e9c4 2300 	strd	r2, r3, [r4]
 800bfe8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bfec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bff0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bff4:	e740      	b.n	800be78 <__ieee754_rem_pio2+0x270>
 800bff6:	bf00      	nop
 800bff8:	41700000 	.word	0x41700000
 800bffc:	0800ca20 	.word	0x0800ca20

0800c000 <fabs>:
 800c000:	ec51 0b10 	vmov	r0, r1, d0
 800c004:	4602      	mov	r2, r0
 800c006:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c00a:	ec43 2b10 	vmov	d0, r2, r3
 800c00e:	4770      	bx	lr

0800c010 <__kernel_rem_pio2>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	ed2d 8b02 	vpush	{d8}
 800c018:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c01c:	f112 0f14 	cmn.w	r2, #20
 800c020:	9306      	str	r3, [sp, #24]
 800c022:	9104      	str	r1, [sp, #16]
 800c024:	4bbe      	ldr	r3, [pc, #760]	@ (800c320 <__kernel_rem_pio2+0x310>)
 800c026:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c028:	9008      	str	r0, [sp, #32]
 800c02a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	9b06      	ldr	r3, [sp, #24]
 800c032:	f103 33ff 	add.w	r3, r3, #4294967295
 800c036:	bfa8      	it	ge
 800c038:	1ed4      	subge	r4, r2, #3
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	bfb2      	itee	lt
 800c03e:	2400      	movlt	r4, #0
 800c040:	2318      	movge	r3, #24
 800c042:	fb94 f4f3 	sdivge	r4, r4, r3
 800c046:	f06f 0317 	mvn.w	r3, #23
 800c04a:	fb04 3303 	mla	r3, r4, r3, r3
 800c04e:	eb03 0b02 	add.w	fp, r3, r2
 800c052:	9b00      	ldr	r3, [sp, #0]
 800c054:	9a05      	ldr	r2, [sp, #20]
 800c056:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c310 <__kernel_rem_pio2+0x300>
 800c05a:	eb03 0802 	add.w	r8, r3, r2
 800c05e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c060:	1aa7      	subs	r7, r4, r2
 800c062:	ae20      	add	r6, sp, #128	@ 0x80
 800c064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c068:	2500      	movs	r5, #0
 800c06a:	4545      	cmp	r5, r8
 800c06c:	dd13      	ble.n	800c096 <__kernel_rem_pio2+0x86>
 800c06e:	9b06      	ldr	r3, [sp, #24]
 800c070:	aa20      	add	r2, sp, #128	@ 0x80
 800c072:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c076:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c07a:	f04f 0800 	mov.w	r8, #0
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	4598      	cmp	r8, r3
 800c082:	dc31      	bgt.n	800c0e8 <__kernel_rem_pio2+0xd8>
 800c084:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c310 <__kernel_rem_pio2+0x300>
 800c088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c090:	462f      	mov	r7, r5
 800c092:	2600      	movs	r6, #0
 800c094:	e01b      	b.n	800c0ce <__kernel_rem_pio2+0xbe>
 800c096:	42ef      	cmn	r7, r5
 800c098:	d407      	bmi.n	800c0aa <__kernel_rem_pio2+0x9a>
 800c09a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c09e:	f7f4 fb83 	bl	80007a8 <__aeabi_i2d>
 800c0a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	e7df      	b.n	800c06a <__kernel_rem_pio2+0x5a>
 800c0aa:	ec51 0b18 	vmov	r0, r1, d8
 800c0ae:	e7f8      	b.n	800c0a2 <__kernel_rem_pio2+0x92>
 800c0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0b8:	f7f4 f8fa 	bl	80002b0 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c4:	f7f4 fa24 	bl	8000510 <__adddf3>
 800c0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0cc:	3601      	adds	r6, #1
 800c0ce:	9b05      	ldr	r3, [sp, #20]
 800c0d0:	429e      	cmp	r6, r3
 800c0d2:	f1a7 0708 	sub.w	r7, r7, #8
 800c0d6:	ddeb      	ble.n	800c0b0 <__kernel_rem_pio2+0xa0>
 800c0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0dc:	f108 0801 	add.w	r8, r8, #1
 800c0e0:	ecaa 7b02 	vstmia	sl!, {d7}
 800c0e4:	3508      	adds	r5, #8
 800c0e6:	e7ca      	b.n	800c07e <__kernel_rem_pio2+0x6e>
 800c0e8:	9b00      	ldr	r3, [sp, #0]
 800c0ea:	f8dd 8000 	ldr.w	r8, [sp]
 800c0ee:	aa0c      	add	r2, sp, #48	@ 0x30
 800c0f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c0f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c102:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c104:	ab98      	add	r3, sp, #608	@ 0x260
 800c106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c10a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c10e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c112:	ac0c      	add	r4, sp, #48	@ 0x30
 800c114:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c116:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c11a:	46a1      	mov	r9, r4
 800c11c:	46c2      	mov	sl, r8
 800c11e:	f1ba 0f00 	cmp.w	sl, #0
 800c122:	f1a5 0508 	sub.w	r5, r5, #8
 800c126:	dc77      	bgt.n	800c218 <__kernel_rem_pio2+0x208>
 800c128:	4658      	mov	r0, fp
 800c12a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c12e:	f000 fac7 	bl	800c6c0 <scalbn>
 800c132:	ec57 6b10 	vmov	r6, r7, d0
 800c136:	2200      	movs	r2, #0
 800c138:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 f8b6 	bl	80002b0 <__aeabi_dmul>
 800c144:	ec41 0b10 	vmov	d0, r0, r1
 800c148:	f000 fb3a 	bl	800c7c0 <floor>
 800c14c:	4b75      	ldr	r3, [pc, #468]	@ (800c324 <__kernel_rem_pio2+0x314>)
 800c14e:	ec51 0b10 	vmov	r0, r1, d0
 800c152:	2200      	movs	r2, #0
 800c154:	f7f4 f8ac 	bl	80002b0 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f9d4 	bl	800050c <__aeabi_dsub>
 800c164:	460f      	mov	r7, r1
 800c166:	4606      	mov	r6, r0
 800c168:	f7f4 fc10 	bl	800098c <__aeabi_d2iz>
 800c16c:	9002      	str	r0, [sp, #8]
 800c16e:	f7f4 fb1b 	bl	80007a8 <__aeabi_i2d>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 f9c7 	bl	800050c <__aeabi_dsub>
 800c17e:	f1bb 0f00 	cmp.w	fp, #0
 800c182:	4606      	mov	r6, r0
 800c184:	460f      	mov	r7, r1
 800c186:	dd6c      	ble.n	800c262 <__kernel_rem_pio2+0x252>
 800c188:	f108 31ff 	add.w	r1, r8, #4294967295
 800c18c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c18e:	9d02      	ldr	r5, [sp, #8]
 800c190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c194:	f1cb 0018 	rsb	r0, fp, #24
 800c198:	fa43 f200 	asr.w	r2, r3, r0
 800c19c:	4415      	add	r5, r2
 800c19e:	4082      	lsls	r2, r0
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	aa0c      	add	r2, sp, #48	@ 0x30
 800c1a4:	9502      	str	r5, [sp, #8]
 800c1a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c1aa:	f1cb 0217 	rsb	r2, fp, #23
 800c1ae:	fa43 f902 	asr.w	r9, r3, r2
 800c1b2:	f1b9 0f00 	cmp.w	r9, #0
 800c1b6:	dd64      	ble.n	800c282 <__kernel_rem_pio2+0x272>
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	3301      	adds	r3, #1
 800c1be:	9302      	str	r3, [sp, #8]
 800c1c0:	4615      	mov	r5, r2
 800c1c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c1c6:	4590      	cmp	r8, r2
 800c1c8:	f300 80b8 	bgt.w	800c33c <__kernel_rem_pio2+0x32c>
 800c1cc:	f1bb 0f00 	cmp.w	fp, #0
 800c1d0:	dd07      	ble.n	800c1e2 <__kernel_rem_pio2+0x1d2>
 800c1d2:	f1bb 0f01 	cmp.w	fp, #1
 800c1d6:	f000 80bf 	beq.w	800c358 <__kernel_rem_pio2+0x348>
 800c1da:	f1bb 0f02 	cmp.w	fp, #2
 800c1de:	f000 80c6 	beq.w	800c36e <__kernel_rem_pio2+0x35e>
 800c1e2:	f1b9 0f02 	cmp.w	r9, #2
 800c1e6:	d14c      	bne.n	800c282 <__kernel_rem_pio2+0x272>
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	494e      	ldr	r1, [pc, #312]	@ (800c328 <__kernel_rem_pio2+0x318>)
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	f7f4 f98c 	bl	800050c <__aeabi_dsub>
 800c1f4:	4606      	mov	r6, r0
 800c1f6:	460f      	mov	r7, r1
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	d042      	beq.n	800c282 <__kernel_rem_pio2+0x272>
 800c1fc:	4658      	mov	r0, fp
 800c1fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c318 <__kernel_rem_pio2+0x308>
 800c202:	f000 fa5d 	bl	800c6c0 <scalbn>
 800c206:	4630      	mov	r0, r6
 800c208:	4639      	mov	r1, r7
 800c20a:	ec53 2b10 	vmov	r2, r3, d0
 800c20e:	f7f4 f97d 	bl	800050c <__aeabi_dsub>
 800c212:	4606      	mov	r6, r0
 800c214:	460f      	mov	r7, r1
 800c216:	e034      	b.n	800c282 <__kernel_rem_pio2+0x272>
 800c218:	4b44      	ldr	r3, [pc, #272]	@ (800c32c <__kernel_rem_pio2+0x31c>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c220:	f7f4 f846 	bl	80002b0 <__aeabi_dmul>
 800c224:	f7f4 fbb2 	bl	800098c <__aeabi_d2iz>
 800c228:	f7f4 fabe 	bl	80007a8 <__aeabi_i2d>
 800c22c:	4b40      	ldr	r3, [pc, #256]	@ (800c330 <__kernel_rem_pio2+0x320>)
 800c22e:	2200      	movs	r2, #0
 800c230:	4606      	mov	r6, r0
 800c232:	460f      	mov	r7, r1
 800c234:	f7f4 f83c 	bl	80002b0 <__aeabi_dmul>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c240:	f7f4 f964 	bl	800050c <__aeabi_dsub>
 800c244:	f7f4 fba2 	bl	800098c <__aeabi_d2iz>
 800c248:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c24c:	f849 0b04 	str.w	r0, [r9], #4
 800c250:	4639      	mov	r1, r7
 800c252:	4630      	mov	r0, r6
 800c254:	f7f4 f95c 	bl	8000510 <__adddf3>
 800c258:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c260:	e75d      	b.n	800c11e <__kernel_rem_pio2+0x10e>
 800c262:	d107      	bne.n	800c274 <__kernel_rem_pio2+0x264>
 800c264:	f108 33ff 	add.w	r3, r8, #4294967295
 800c268:	aa0c      	add	r2, sp, #48	@ 0x30
 800c26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c26e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c272:	e79e      	b.n	800c1b2 <__kernel_rem_pio2+0x1a2>
 800c274:	4b2f      	ldr	r3, [pc, #188]	@ (800c334 <__kernel_rem_pio2+0x324>)
 800c276:	2200      	movs	r2, #0
 800c278:	f7f4 fb74 	bl	8000964 <__aeabi_dcmpge>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d143      	bne.n	800c308 <__kernel_rem_pio2+0x2f8>
 800c280:	4681      	mov	r9, r0
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	4630      	mov	r0, r6
 800c288:	4639      	mov	r1, r7
 800c28a:	f7f4 fb4d 	bl	8000928 <__aeabi_dcmpeq>
 800c28e:	2800      	cmp	r0, #0
 800c290:	f000 80bf 	beq.w	800c412 <__kernel_rem_pio2+0x402>
 800c294:	f108 33ff 	add.w	r3, r8, #4294967295
 800c298:	2200      	movs	r2, #0
 800c29a:	9900      	ldr	r1, [sp, #0]
 800c29c:	428b      	cmp	r3, r1
 800c29e:	da6e      	bge.n	800c37e <__kernel_rem_pio2+0x36e>
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	f000 8089 	beq.w	800c3b8 <__kernel_rem_pio2+0x3a8>
 800c2a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2ac:	f1ab 0b18 	sub.w	fp, fp, #24
 800c2b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f6      	beq.n	800c2a6 <__kernel_rem_pio2+0x296>
 800c2b8:	4658      	mov	r0, fp
 800c2ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c318 <__kernel_rem_pio2+0x308>
 800c2be:	f000 f9ff 	bl	800c6c0 <scalbn>
 800c2c2:	f108 0301 	add.w	r3, r8, #1
 800c2c6:	00da      	lsls	r2, r3, #3
 800c2c8:	9205      	str	r2, [sp, #20]
 800c2ca:	ec55 4b10 	vmov	r4, r5, d0
 800c2ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c2d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c32c <__kernel_rem_pio2+0x31c>
 800c2d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c2d8:	4646      	mov	r6, r8
 800c2da:	f04f 0a00 	mov.w	sl, #0
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	f280 80cf 	bge.w	800c482 <__kernel_rem_pio2+0x472>
 800c2e4:	4644      	mov	r4, r8
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	f2c0 80fd 	blt.w	800c4e6 <__kernel_rem_pio2+0x4d6>
 800c2ec:	4b12      	ldr	r3, [pc, #72]	@ (800c338 <__kernel_rem_pio2+0x328>)
 800c2ee:	461f      	mov	r7, r3
 800c2f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f6:	9306      	str	r3, [sp, #24]
 800c2f8:	f04f 0a00 	mov.w	sl, #0
 800c2fc:	f04f 0b00 	mov.w	fp, #0
 800c300:	2600      	movs	r6, #0
 800c302:	eba8 0504 	sub.w	r5, r8, r4
 800c306:	e0e2      	b.n	800c4ce <__kernel_rem_pio2+0x4be>
 800c308:	f04f 0902 	mov.w	r9, #2
 800c30c:	e754      	b.n	800c1b8 <__kernel_rem_pio2+0x1a8>
 800c30e:	bf00      	nop
	...
 800c31c:	3ff00000 	.word	0x3ff00000
 800c320:	0800cb68 	.word	0x0800cb68
 800c324:	40200000 	.word	0x40200000
 800c328:	3ff00000 	.word	0x3ff00000
 800c32c:	3e700000 	.word	0x3e700000
 800c330:	41700000 	.word	0x41700000
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	0800cb28 	.word	0x0800cb28
 800c33c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c340:	b945      	cbnz	r5, 800c354 <__kernel_rem_pio2+0x344>
 800c342:	b123      	cbz	r3, 800c34e <__kernel_rem_pio2+0x33e>
 800c344:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c348:	f844 3c04 	str.w	r3, [r4, #-4]
 800c34c:	2301      	movs	r3, #1
 800c34e:	3201      	adds	r2, #1
 800c350:	461d      	mov	r5, r3
 800c352:	e738      	b.n	800c1c6 <__kernel_rem_pio2+0x1b6>
 800c354:	1acb      	subs	r3, r1, r3
 800c356:	e7f7      	b.n	800c348 <__kernel_rem_pio2+0x338>
 800c358:	f108 32ff 	add.w	r2, r8, #4294967295
 800c35c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c362:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c366:	a90c      	add	r1, sp, #48	@ 0x30
 800c368:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c36c:	e739      	b.n	800c1e2 <__kernel_rem_pio2+0x1d2>
 800c36e:	f108 32ff 	add.w	r2, r8, #4294967295
 800c372:	ab0c      	add	r3, sp, #48	@ 0x30
 800c374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c378:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c37c:	e7f3      	b.n	800c366 <__kernel_rem_pio2+0x356>
 800c37e:	a90c      	add	r1, sp, #48	@ 0x30
 800c380:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c384:	3b01      	subs	r3, #1
 800c386:	430a      	orrs	r2, r1
 800c388:	e787      	b.n	800c29a <__kernel_rem_pio2+0x28a>
 800c38a:	3401      	adds	r4, #1
 800c38c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c390:	2a00      	cmp	r2, #0
 800c392:	d0fa      	beq.n	800c38a <__kernel_rem_pio2+0x37a>
 800c394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c396:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c39a:	eb0d 0503 	add.w	r5, sp, r3
 800c39e:	9b06      	ldr	r3, [sp, #24]
 800c3a0:	aa20      	add	r2, sp, #128	@ 0x80
 800c3a2:	4443      	add	r3, r8
 800c3a4:	f108 0701 	add.w	r7, r8, #1
 800c3a8:	3d98      	subs	r5, #152	@ 0x98
 800c3aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c3ae:	4444      	add	r4, r8
 800c3b0:	42bc      	cmp	r4, r7
 800c3b2:	da04      	bge.n	800c3be <__kernel_rem_pio2+0x3ae>
 800c3b4:	46a0      	mov	r8, r4
 800c3b6:	e6a2      	b.n	800c0fe <__kernel_rem_pio2+0xee>
 800c3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ba:	2401      	movs	r4, #1
 800c3bc:	e7e6      	b.n	800c38c <__kernel_rem_pio2+0x37c>
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c3c4:	f7f4 f9f0 	bl	80007a8 <__aeabi_i2d>
 800c3c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c690 <__kernel_rem_pio2+0x680>
 800c3cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3d8:	46b2      	mov	sl, r6
 800c3da:	f04f 0800 	mov.w	r8, #0
 800c3de:	9b05      	ldr	r3, [sp, #20]
 800c3e0:	4598      	cmp	r8, r3
 800c3e2:	dd05      	ble.n	800c3f0 <__kernel_rem_pio2+0x3e0>
 800c3e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3e8:	3701      	adds	r7, #1
 800c3ea:	eca5 7b02 	vstmia	r5!, {d7}
 800c3ee:	e7df      	b.n	800c3b0 <__kernel_rem_pio2+0x3a0>
 800c3f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c3f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c3f8:	f7f3 ff5a 	bl	80002b0 <__aeabi_dmul>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c404:	f7f4 f884 	bl	8000510 <__adddf3>
 800c408:	f108 0801 	add.w	r8, r8, #1
 800c40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c410:	e7e5      	b.n	800c3de <__kernel_rem_pio2+0x3ce>
 800c412:	f1cb 0000 	rsb	r0, fp, #0
 800c416:	ec47 6b10 	vmov	d0, r6, r7
 800c41a:	f000 f951 	bl	800c6c0 <scalbn>
 800c41e:	ec55 4b10 	vmov	r4, r5, d0
 800c422:	4b9d      	ldr	r3, [pc, #628]	@ (800c698 <__kernel_rem_pio2+0x688>)
 800c424:	2200      	movs	r2, #0
 800c426:	4620      	mov	r0, r4
 800c428:	4629      	mov	r1, r5
 800c42a:	f7f4 fa9b 	bl	8000964 <__aeabi_dcmpge>
 800c42e:	b300      	cbz	r0, 800c472 <__kernel_rem_pio2+0x462>
 800c430:	4b9a      	ldr	r3, [pc, #616]	@ (800c69c <__kernel_rem_pio2+0x68c>)
 800c432:	2200      	movs	r2, #0
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	f7f3 ff3a 	bl	80002b0 <__aeabi_dmul>
 800c43c:	f7f4 faa6 	bl	800098c <__aeabi_d2iz>
 800c440:	4606      	mov	r6, r0
 800c442:	f7f4 f9b1 	bl	80007a8 <__aeabi_i2d>
 800c446:	4b94      	ldr	r3, [pc, #592]	@ (800c698 <__kernel_rem_pio2+0x688>)
 800c448:	2200      	movs	r2, #0
 800c44a:	f7f3 ff31 	bl	80002b0 <__aeabi_dmul>
 800c44e:	460b      	mov	r3, r1
 800c450:	4602      	mov	r2, r0
 800c452:	4629      	mov	r1, r5
 800c454:	4620      	mov	r0, r4
 800c456:	f7f4 f859 	bl	800050c <__aeabi_dsub>
 800c45a:	f7f4 fa97 	bl	800098c <__aeabi_d2iz>
 800c45e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c460:	f10b 0b18 	add.w	fp, fp, #24
 800c464:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c468:	f108 0801 	add.w	r8, r8, #1
 800c46c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c470:	e722      	b.n	800c2b8 <__kernel_rem_pio2+0x2a8>
 800c472:	4620      	mov	r0, r4
 800c474:	4629      	mov	r1, r5
 800c476:	f7f4 fa89 	bl	800098c <__aeabi_d2iz>
 800c47a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c47c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c480:	e71a      	b.n	800c2b8 <__kernel_rem_pio2+0x2a8>
 800c482:	ab0c      	add	r3, sp, #48	@ 0x30
 800c484:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c488:	f7f4 f98e 	bl	80007a8 <__aeabi_i2d>
 800c48c:	4622      	mov	r2, r4
 800c48e:	462b      	mov	r3, r5
 800c490:	f7f3 ff0e 	bl	80002b0 <__aeabi_dmul>
 800c494:	4652      	mov	r2, sl
 800c496:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c49a:	465b      	mov	r3, fp
 800c49c:	4620      	mov	r0, r4
 800c49e:	4629      	mov	r1, r5
 800c4a0:	f7f3 ff06 	bl	80002b0 <__aeabi_dmul>
 800c4a4:	3e01      	subs	r6, #1
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	e718      	b.n	800c2de <__kernel_rem_pio2+0x2ce>
 800c4ac:	9906      	ldr	r1, [sp, #24]
 800c4ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c4b2:	9106      	str	r1, [sp, #24]
 800c4b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c4b8:	f7f3 fefa 	bl	80002b0 <__aeabi_dmul>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	f7f4 f824 	bl	8000510 <__adddf3>
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	4682      	mov	sl, r0
 800c4cc:	468b      	mov	fp, r1
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	429e      	cmp	r6, r3
 800c4d2:	dc01      	bgt.n	800c4d8 <__kernel_rem_pio2+0x4c8>
 800c4d4:	42b5      	cmp	r5, r6
 800c4d6:	dae9      	bge.n	800c4ac <__kernel_rem_pio2+0x49c>
 800c4d8:	ab48      	add	r3, sp, #288	@ 0x120
 800c4da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c4de:	e9c5 ab00 	strd	sl, fp, [r5]
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	e6ff      	b.n	800c2e6 <__kernel_rem_pio2+0x2d6>
 800c4e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	dc0b      	bgt.n	800c504 <__kernel_rem_pio2+0x4f4>
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	dc39      	bgt.n	800c564 <__kernel_rem_pio2+0x554>
 800c4f0:	d05d      	beq.n	800c5ae <__kernel_rem_pio2+0x59e>
 800c4f2:	9b02      	ldr	r3, [sp, #8]
 800c4f4:	f003 0007 	and.w	r0, r3, #7
 800c4f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c4fc:	ecbd 8b02 	vpop	{d8}
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c506:	2b03      	cmp	r3, #3
 800c508:	d1f3      	bne.n	800c4f2 <__kernel_rem_pio2+0x4e2>
 800c50a:	9b05      	ldr	r3, [sp, #20]
 800c50c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c510:	eb0d 0403 	add.w	r4, sp, r3
 800c514:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c518:	4625      	mov	r5, r4
 800c51a:	46c2      	mov	sl, r8
 800c51c:	f1ba 0f00 	cmp.w	sl, #0
 800c520:	f1a5 0508 	sub.w	r5, r5, #8
 800c524:	dc6b      	bgt.n	800c5fe <__kernel_rem_pio2+0x5ee>
 800c526:	4645      	mov	r5, r8
 800c528:	2d01      	cmp	r5, #1
 800c52a:	f1a4 0408 	sub.w	r4, r4, #8
 800c52e:	f300 8087 	bgt.w	800c640 <__kernel_rem_pio2+0x630>
 800c532:	9c05      	ldr	r4, [sp, #20]
 800c534:	ab48      	add	r3, sp, #288	@ 0x120
 800c536:	441c      	add	r4, r3
 800c538:	2000      	movs	r0, #0
 800c53a:	2100      	movs	r1, #0
 800c53c:	f1b8 0f01 	cmp.w	r8, #1
 800c540:	f300 809c 	bgt.w	800c67c <__kernel_rem_pio2+0x66c>
 800c544:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c548:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c54c:	f1b9 0f00 	cmp.w	r9, #0
 800c550:	f040 80a6 	bne.w	800c6a0 <__kernel_rem_pio2+0x690>
 800c554:	9b04      	ldr	r3, [sp, #16]
 800c556:	e9c3 7800 	strd	r7, r8, [r3]
 800c55a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c55e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c562:	e7c6      	b.n	800c4f2 <__kernel_rem_pio2+0x4e2>
 800c564:	9d05      	ldr	r5, [sp, #20]
 800c566:	ab48      	add	r3, sp, #288	@ 0x120
 800c568:	441d      	add	r5, r3
 800c56a:	4644      	mov	r4, r8
 800c56c:	2000      	movs	r0, #0
 800c56e:	2100      	movs	r1, #0
 800c570:	2c00      	cmp	r4, #0
 800c572:	da35      	bge.n	800c5e0 <__kernel_rem_pio2+0x5d0>
 800c574:	f1b9 0f00 	cmp.w	r9, #0
 800c578:	d038      	beq.n	800c5ec <__kernel_rem_pio2+0x5dc>
 800c57a:	4602      	mov	r2, r0
 800c57c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c580:	9c04      	ldr	r4, [sp, #16]
 800c582:	e9c4 2300 	strd	r2, r3, [r4]
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c58e:	f7f3 ffbd 	bl	800050c <__aeabi_dsub>
 800c592:	ad4a      	add	r5, sp, #296	@ 0x128
 800c594:	2401      	movs	r4, #1
 800c596:	45a0      	cmp	r8, r4
 800c598:	da2b      	bge.n	800c5f2 <__kernel_rem_pio2+0x5e2>
 800c59a:	f1b9 0f00 	cmp.w	r9, #0
 800c59e:	d002      	beq.n	800c5a6 <__kernel_rem_pio2+0x596>
 800c5a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c5ac:	e7a1      	b.n	800c4f2 <__kernel_rem_pio2+0x4e2>
 800c5ae:	9c05      	ldr	r4, [sp, #20]
 800c5b0:	ab48      	add	r3, sp, #288	@ 0x120
 800c5b2:	441c      	add	r4, r3
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	f1b8 0f00 	cmp.w	r8, #0
 800c5bc:	da09      	bge.n	800c5d2 <__kernel_rem_pio2+0x5c2>
 800c5be:	f1b9 0f00 	cmp.w	r9, #0
 800c5c2:	d002      	beq.n	800c5ca <__kernel_rem_pio2+0x5ba>
 800c5c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	9b04      	ldr	r3, [sp, #16]
 800c5cc:	e9c3 0100 	strd	r0, r1, [r3]
 800c5d0:	e78f      	b.n	800c4f2 <__kernel_rem_pio2+0x4e2>
 800c5d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c5d6:	f7f3 ff9b 	bl	8000510 <__adddf3>
 800c5da:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5de:	e7eb      	b.n	800c5b8 <__kernel_rem_pio2+0x5a8>
 800c5e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c5e4:	f7f3 ff94 	bl	8000510 <__adddf3>
 800c5e8:	3c01      	subs	r4, #1
 800c5ea:	e7c1      	b.n	800c570 <__kernel_rem_pio2+0x560>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	e7c6      	b.n	800c580 <__kernel_rem_pio2+0x570>
 800c5f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c5f6:	f7f3 ff8b 	bl	8000510 <__adddf3>
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	e7cb      	b.n	800c596 <__kernel_rem_pio2+0x586>
 800c5fe:	ed95 7b00 	vldr	d7, [r5]
 800c602:	ed8d 7b00 	vstr	d7, [sp]
 800c606:	ed95 7b02 	vldr	d7, [r5, #8]
 800c60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c60e:	ec53 2b17 	vmov	r2, r3, d7
 800c612:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c616:	f7f3 ff7b 	bl	8000510 <__adddf3>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4606      	mov	r6, r0
 800c620:	460f      	mov	r7, r1
 800c622:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c626:	f7f3 ff71 	bl	800050c <__aeabi_dsub>
 800c62a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c62e:	f7f3 ff6f 	bl	8000510 <__adddf3>
 800c632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c636:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c63a:	e9c5 6700 	strd	r6, r7, [r5]
 800c63e:	e76d      	b.n	800c51c <__kernel_rem_pio2+0x50c>
 800c640:	ed94 7b00 	vldr	d7, [r4]
 800c644:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c648:	ec51 0b17 	vmov	r0, r1, d7
 800c64c:	4652      	mov	r2, sl
 800c64e:	465b      	mov	r3, fp
 800c650:	ed8d 7b00 	vstr	d7, [sp]
 800c654:	f7f3 ff5c 	bl	8000510 <__adddf3>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4606      	mov	r6, r0
 800c65e:	460f      	mov	r7, r1
 800c660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c664:	f7f3 ff52 	bl	800050c <__aeabi_dsub>
 800c668:	4652      	mov	r2, sl
 800c66a:	465b      	mov	r3, fp
 800c66c:	f7f3 ff50 	bl	8000510 <__adddf3>
 800c670:	3d01      	subs	r5, #1
 800c672:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c676:	e9c4 6700 	strd	r6, r7, [r4]
 800c67a:	e755      	b.n	800c528 <__kernel_rem_pio2+0x518>
 800c67c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c680:	f7f3 ff46 	bl	8000510 <__adddf3>
 800c684:	f108 38ff 	add.w	r8, r8, #4294967295
 800c688:	e758      	b.n	800c53c <__kernel_rem_pio2+0x52c>
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w
	...
 800c698:	41700000 	.word	0x41700000
 800c69c:	3e700000 	.word	0x3e700000
 800c6a0:	9b04      	ldr	r3, [sp, #16]
 800c6a2:	9a04      	ldr	r2, [sp, #16]
 800c6a4:	601f      	str	r7, [r3, #0]
 800c6a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c6aa:	605c      	str	r4, [r3, #4]
 800c6ac:	609d      	str	r5, [r3, #8]
 800c6ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6b2:	60d3      	str	r3, [r2, #12]
 800c6b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6b8:	6110      	str	r0, [r2, #16]
 800c6ba:	6153      	str	r3, [r2, #20]
 800c6bc:	e719      	b.n	800c4f2 <__kernel_rem_pio2+0x4e2>
 800c6be:	bf00      	nop

0800c6c0 <scalbn>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	ec55 4b10 	vmov	r4, r5, d0
 800c6c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	b991      	cbnz	r1, 800c6f6 <scalbn+0x36>
 800c6d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6d4:	4323      	orrs	r3, r4
 800c6d6:	d03d      	beq.n	800c754 <scalbn+0x94>
 800c6d8:	4b35      	ldr	r3, [pc, #212]	@ (800c7b0 <scalbn+0xf0>)
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f7f3 fde6 	bl	80002b0 <__aeabi_dmul>
 800c6e4:	4b33      	ldr	r3, [pc, #204]	@ (800c7b4 <scalbn+0xf4>)
 800c6e6:	429e      	cmp	r6, r3
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	da0f      	bge.n	800c70e <scalbn+0x4e>
 800c6ee:	a328      	add	r3, pc, #160	@ (adr r3, 800c790 <scalbn+0xd0>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	e01e      	b.n	800c734 <scalbn+0x74>
 800c6f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c6fa:	4291      	cmp	r1, r2
 800c6fc:	d10b      	bne.n	800c716 <scalbn+0x56>
 800c6fe:	4622      	mov	r2, r4
 800c700:	4620      	mov	r0, r4
 800c702:	4629      	mov	r1, r5
 800c704:	f7f3 ff04 	bl	8000510 <__adddf3>
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	e022      	b.n	800c754 <scalbn+0x94>
 800c70e:	460b      	mov	r3, r1
 800c710:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c714:	3936      	subs	r1, #54	@ 0x36
 800c716:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c71a:	4296      	cmp	r6, r2
 800c71c:	dd0d      	ble.n	800c73a <scalbn+0x7a>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	a11d      	add	r1, pc, #116	@ (adr r1, 800c798 <scalbn+0xd8>)
 800c722:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c726:	da02      	bge.n	800c72e <scalbn+0x6e>
 800c728:	a11d      	add	r1, pc, #116	@ (adr r1, 800c7a0 <scalbn+0xe0>)
 800c72a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c72e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c798 <scalbn+0xd8>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fdbc 	bl	80002b0 <__aeabi_dmul>
 800c738:	e7e6      	b.n	800c708 <scalbn+0x48>
 800c73a:	1872      	adds	r2, r6, r1
 800c73c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c740:	428a      	cmp	r2, r1
 800c742:	dcec      	bgt.n	800c71e <scalbn+0x5e>
 800c744:	2a00      	cmp	r2, #0
 800c746:	dd08      	ble.n	800c75a <scalbn+0x9a>
 800c748:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c74c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c750:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c754:	ec45 4b10 	vmov	d0, r4, r5
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c75e:	da08      	bge.n	800c772 <scalbn+0xb2>
 800c760:	2d00      	cmp	r5, #0
 800c762:	a10b      	add	r1, pc, #44	@ (adr r1, 800c790 <scalbn+0xd0>)
 800c764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c768:	dac1      	bge.n	800c6ee <scalbn+0x2e>
 800c76a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c7a8 <scalbn+0xe8>)
 800c76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c770:	e7bd      	b.n	800c6ee <scalbn+0x2e>
 800c772:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c776:	3236      	adds	r2, #54	@ 0x36
 800c778:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c77c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c780:	4620      	mov	r0, r4
 800c782:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <scalbn+0xf8>)
 800c784:	4629      	mov	r1, r5
 800c786:	2200      	movs	r2, #0
 800c788:	e7d4      	b.n	800c734 <scalbn+0x74>
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w
 800c790:	c2f8f359 	.word	0xc2f8f359
 800c794:	01a56e1f 	.word	0x01a56e1f
 800c798:	8800759c 	.word	0x8800759c
 800c79c:	7e37e43c 	.word	0x7e37e43c
 800c7a0:	8800759c 	.word	0x8800759c
 800c7a4:	fe37e43c 	.word	0xfe37e43c
 800c7a8:	c2f8f359 	.word	0xc2f8f359
 800c7ac:	81a56e1f 	.word	0x81a56e1f
 800c7b0:	43500000 	.word	0x43500000
 800c7b4:	ffff3cb0 	.word	0xffff3cb0
 800c7b8:	3c900000 	.word	0x3c900000
 800c7bc:	00000000 	.word	0x00000000

0800c7c0 <floor>:
 800c7c0:	ec51 0b10 	vmov	r0, r1, d0
 800c7c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c7d0:	2e13      	cmp	r6, #19
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	dc34      	bgt.n	800c844 <floor+0x84>
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	da17      	bge.n	800c80e <floor+0x4e>
 800c7de:	a332      	add	r3, pc, #200	@ (adr r3, 800c8a8 <floor+0xe8>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f7f3 fe94 	bl	8000510 <__adddf3>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f7f4 f8c4 	bl	8000978 <__aeabi_dcmpgt>
 800c7f0:	b150      	cbz	r0, 800c808 <floor+0x48>
 800c7f2:	2c00      	cmp	r4, #0
 800c7f4:	da55      	bge.n	800c8a2 <floor+0xe2>
 800c7f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c7fa:	432c      	orrs	r4, r5
 800c7fc:	2500      	movs	r5, #0
 800c7fe:	42ac      	cmp	r4, r5
 800c800:	4c2b      	ldr	r4, [pc, #172]	@ (800c8b0 <floor+0xf0>)
 800c802:	bf08      	it	eq
 800c804:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c808:	4621      	mov	r1, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	e023      	b.n	800c856 <floor+0x96>
 800c80e:	4f29      	ldr	r7, [pc, #164]	@ (800c8b4 <floor+0xf4>)
 800c810:	4137      	asrs	r7, r6
 800c812:	ea01 0307 	and.w	r3, r1, r7
 800c816:	4303      	orrs	r3, r0
 800c818:	d01d      	beq.n	800c856 <floor+0x96>
 800c81a:	a323      	add	r3, pc, #140	@ (adr r3, 800c8a8 <floor+0xe8>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fe76 	bl	8000510 <__adddf3>
 800c824:	2200      	movs	r2, #0
 800c826:	2300      	movs	r3, #0
 800c828:	f7f4 f8a6 	bl	8000978 <__aeabi_dcmpgt>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d0eb      	beq.n	800c808 <floor+0x48>
 800c830:	2c00      	cmp	r4, #0
 800c832:	bfbe      	ittt	lt
 800c834:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c838:	4133      	asrlt	r3, r6
 800c83a:	18e4      	addlt	r4, r4, r3
 800c83c:	ea24 0407 	bic.w	r4, r4, r7
 800c840:	2500      	movs	r5, #0
 800c842:	e7e1      	b.n	800c808 <floor+0x48>
 800c844:	2e33      	cmp	r6, #51	@ 0x33
 800c846:	dd0a      	ble.n	800c85e <floor+0x9e>
 800c848:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c84c:	d103      	bne.n	800c856 <floor+0x96>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	f7f3 fe5d 	bl	8000510 <__adddf3>
 800c856:	ec41 0b10 	vmov	d0, r0, r1
 800c85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c862:	f04f 37ff 	mov.w	r7, #4294967295
 800c866:	40df      	lsrs	r7, r3
 800c868:	4207      	tst	r7, r0
 800c86a:	d0f4      	beq.n	800c856 <floor+0x96>
 800c86c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8a8 <floor+0xe8>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f3 fe4d 	bl	8000510 <__adddf3>
 800c876:	2200      	movs	r2, #0
 800c878:	2300      	movs	r3, #0
 800c87a:	f7f4 f87d 	bl	8000978 <__aeabi_dcmpgt>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0c2      	beq.n	800c808 <floor+0x48>
 800c882:	2c00      	cmp	r4, #0
 800c884:	da0a      	bge.n	800c89c <floor+0xdc>
 800c886:	2e14      	cmp	r6, #20
 800c888:	d101      	bne.n	800c88e <floor+0xce>
 800c88a:	3401      	adds	r4, #1
 800c88c:	e006      	b.n	800c89c <floor+0xdc>
 800c88e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c892:	2301      	movs	r3, #1
 800c894:	40b3      	lsls	r3, r6
 800c896:	441d      	add	r5, r3
 800c898:	4545      	cmp	r5, r8
 800c89a:	d3f6      	bcc.n	800c88a <floor+0xca>
 800c89c:	ea25 0507 	bic.w	r5, r5, r7
 800c8a0:	e7b2      	b.n	800c808 <floor+0x48>
 800c8a2:	2500      	movs	r5, #0
 800c8a4:	462c      	mov	r4, r5
 800c8a6:	e7af      	b.n	800c808 <floor+0x48>
 800c8a8:	8800759c 	.word	0x8800759c
 800c8ac:	7e37e43c 	.word	0x7e37e43c
 800c8b0:	bff00000 	.word	0xbff00000
 800c8b4:	000fffff 	.word	0x000fffff

0800c8b8 <_init>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	bf00      	nop
 800c8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8be:	bc08      	pop	{r3}
 800c8c0:	469e      	mov	lr, r3
 800c8c2:	4770      	bx	lr

0800c8c4 <_fini>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr
