
F446-USB-Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800c280  0800c280  0000d280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c528  0800c528  0000e19c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c528  0800c528  0000d528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c530  0800c530  0000e19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c530  0800c530  0000d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c534  0800c534  0000d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  0800c538  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058cc  2000019c  0800c6d4  0000e19c  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20005a68  0800c6d4  0000ea68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e19c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016693  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa1  00000000  00000000  0002485f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00028800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d89  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263a4  00000000  00000000  0002a779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d05  00000000  00000000  00050b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d243e  00000000  00000000  0006a822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cc60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  0013cca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00142040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c268 	.word	0x0800c268

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	0800c268 	.word	0x0800c268

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b96a 	b.w	8000cc8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	460c      	mov	r4, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14e      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a18:	4694      	mov	ip, r2
 8000a1a:	458c      	cmp	ip, r1
 8000a1c:	4686      	mov	lr, r0
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	d962      	bls.n	8000aea <__udivmoddi4+0xde>
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	4319      	orrs	r1, r3
 8000a36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3e:	fa1f f68c 	uxth.w	r6, ip
 8000a42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a52:	fb04 f106 	mul.w	r1, r4, r6
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a62:	f080 8112 	bcs.w	8000c8a <__udivmoddi4+0x27e>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 810f 	bls.w	8000c8a <__udivmoddi4+0x27e>
 8000a6c:	3c02      	subs	r4, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	fa1f f38e 	uxth.w	r3, lr
 8000a76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb00 f606 	mul.w	r6, r0, r6
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x94>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a92:	f080 80fc 	bcs.w	8000c8e <__udivmoddi4+0x282>
 8000a96:	429e      	cmp	r6, r3
 8000a98:	f240 80f9 	bls.w	8000c8e <__udivmoddi4+0x282>
 8000a9c:	4463      	add	r3, ip
 8000a9e:	3802      	subs	r0, #2
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	b11d      	cbz	r5, 8000ab2 <__udivmoddi4+0xa6>
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d905      	bls.n	8000ac6 <__udivmoddi4+0xba>
 8000aba:	b10d      	cbz	r5, 8000ac0 <__udivmoddi4+0xb4>
 8000abc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e7f5      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000ac6:	fab3 f183 	clz	r1, r3
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d146      	bne.n	8000b5c <__udivmoddi4+0x150>
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xcc>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	f0c0 80f0 	bcc.w	8000cb8 <__udivmoddi4+0x2ac>
 8000ad8:	1a86      	subs	r6, r0, r2
 8000ada:	eb64 0303 	sbc.w	r3, r4, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0e6      	beq.n	8000ab2 <__udivmoddi4+0xa6>
 8000ae4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae8:	e7e3      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8090 	bne.w	8000c10 <__udivmoddi4+0x204>
 8000af0:	eba1 040c 	sub.w	r4, r1, ip
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa1f f78c 	uxth.w	r7, ip
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0e:	fb07 f006 	mul.w	r0, r7, r6
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x11c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x11a>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	f200 80cd 	bhi.w	8000cc0 <__udivmoddi4+0x2b4>
 8000b26:	4626      	mov	r6, r4
 8000b28:	1a1c      	subs	r4, r3, r0
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b32:	fb08 4410 	mls	r4, r8, r0, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb00 f707 	mul.w	r7, r0, r7
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x148>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x146>
 8000b4c:	429f      	cmp	r7, r3
 8000b4e:	f200 80b0 	bhi.w	8000cb2 <__udivmoddi4+0x2a6>
 8000b52:	4620      	mov	r0, r4
 8000b54:	1bdb      	subs	r3, r3, r7
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	e7a5      	b.n	8000aa8 <__udivmoddi4+0x9c>
 8000b5c:	f1c1 0620 	rsb	r6, r1, #32
 8000b60:	408b      	lsls	r3, r1
 8000b62:	fa22 f706 	lsr.w	r7, r2, r6
 8000b66:	431f      	orrs	r7, r3
 8000b68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b70:	ea43 030c 	orr.w	r3, r3, ip
 8000b74:	40f4      	lsrs	r4, r6
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	0c38      	lsrs	r0, r7, #16
 8000b7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b80:	fbb4 fef0 	udiv	lr, r4, r0
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	fb00 441e 	mls	r4, r0, lr, r4
 8000b8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b90:	fb0e f90c 	mul.w	r9, lr, ip
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x1a6>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ba2:	f080 8084 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8081 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000bac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	eba4 0409 	sub.w	r4, r4, r9
 8000bb6:	fa1f f983 	uxth.w	r9, r3
 8000bba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1d2>
 8000bce:	193c      	adds	r4, r7, r4
 8000bd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd4:	d267      	bcs.n	8000ca6 <__udivmoddi4+0x29a>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	d965      	bls.n	8000ca6 <__udivmoddi4+0x29a>
 8000bda:	3b02      	subs	r3, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be2:	fba0 9302 	umull	r9, r3, r0, r2
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	429c      	cmp	r4, r3
 8000bec:	46ce      	mov	lr, r9
 8000bee:	469c      	mov	ip, r3
 8000bf0:	d351      	bcc.n	8000c96 <__udivmoddi4+0x28a>
 8000bf2:	d04e      	beq.n	8000c92 <__udivmoddi4+0x286>
 8000bf4:	b155      	cbz	r5, 8000c0c <__udivmoddi4+0x200>
 8000bf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000c02:	40cb      	lsrs	r3, r1
 8000c04:	431e      	orrs	r6, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e750      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f103 	lsr.w	r1, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	430c      	orrs	r4, r1
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2c:	fa1f f78c 	uxth.w	r7, ip
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3110 	mls	r1, r8, r0, r3
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f107 	mul.w	r1, r0, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x24c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c4e:	d22c      	bcs.n	8000caa <__udivmoddi4+0x29e>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d92a      	bls.n	8000caa <__udivmoddi4+0x29e>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c60:	fb08 3311 	mls	r3, r8, r1, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb01 f307 	mul.w	r3, r1, r7
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x276>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c78:	d213      	bcs.n	8000ca2 <__udivmoddi4+0x296>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d911      	bls.n	8000ca2 <__udivmoddi4+0x296>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4464      	add	r4, ip
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c88:	e739      	b.n	8000afe <__udivmoddi4+0xf2>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	e6f0      	b.n	8000a70 <__udivmoddi4+0x64>
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e706      	b.n	8000aa0 <__udivmoddi4+0x94>
 8000c92:	45c8      	cmp	r8, r9
 8000c94:	d2ae      	bcs.n	8000bf4 <__udivmoddi4+0x1e8>
 8000c96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9e:	3801      	subs	r0, #1
 8000ca0:	e7a8      	b.n	8000bf4 <__udivmoddi4+0x1e8>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e7ed      	b.n	8000c82 <__udivmoddi4+0x276>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e799      	b.n	8000bde <__udivmoddi4+0x1d2>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e7d4      	b.n	8000c58 <__udivmoddi4+0x24c>
 8000cae:	46d6      	mov	lr, sl
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1a6>
 8000cb2:	4463      	add	r3, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e74d      	b.n	8000b54 <__udivmoddi4+0x148>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e70f      	b.n	8000ae0 <__udivmoddi4+0xd4>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	e730      	b.n	8000b28 <__udivmoddi4+0x11c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_DMA_Init+0x4c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2039      	movs	r0, #57	@ 0x39
 8000cf4:	f000 fe93 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cf8:	2039      	movs	r0, #57	@ 0x39
 8000cfa:	f000 feac 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	203c      	movs	r0, #60	@ 0x3c
 8000d04:	f000 fe8b 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d08:	203c      	movs	r0, #60	@ 0x3c
 8000d0a:	f000 fea4 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b53      	ldr	r3, [pc, #332]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a52      	ldr	r2, [pc, #328]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b50      	ldr	r3, [pc, #320]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b4c      	ldr	r3, [pc, #304]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a4b      	ldr	r2, [pc, #300]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b49      	ldr	r3, [pc, #292]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b45      	ldr	r3, [pc, #276]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a44      	ldr	r2, [pc, #272]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b42      	ldr	r3, [pc, #264]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b3b      	ldr	r3, [pc, #236]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a36      	ldr	r2, [pc, #216]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_GPIO_Init+0x168>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000dfc:	4822      	ldr	r0, [pc, #136]	@ (8000e88 <MX_GPIO_Init+0x16c>)
 8000dfe:	f001 fb4f 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2140      	movs	r1, #64	@ 0x40
 8000e06:	4821      	ldr	r0, [pc, #132]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000e08:	f001 fb4a 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	481b      	ldr	r0, [pc, #108]	@ (8000e90 <MX_GPIO_Init+0x174>)
 8000e24:	f001 f9a8 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e28:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_GPIO_Init+0x16c>)
 8000e42:	f001 f999 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e46:	2340      	movs	r3, #64	@ 0x40
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000e5e:	f001 f98b 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000e76:	f001 f97f 	bl	8002178 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	@ 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	00000000 	.word	0x00000000

08000e98 <GenerateSineWave>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

void GenerateSineWave(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
    /* W trybie stereo dla każdej ramki generujemy 1 próbkę (np. ten sam sygnał dla lewego i prawego kanału).
       Dlatego pętla przebiega od 0 do FRAMES_COUNT.
       W wyniku powstanie bufor o rozmiarze FRAMES_COUNT * 2 halfwordów.
       Faza zmienia się tylko raz na ramkę.
    */
    double phase = 0.0;
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double phaseIncrement = 2.0 * PI * SINE_FREQ / SAMPLE_RATE;
 8000eaa:	a32c      	add	r3, pc, #176	@ (adr r3, 8000f5c <GenerateSineWave+0xc4>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (int frame = 0; frame < FRAMES_COUNT; frame++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e041      	b.n	8000f3e <GenerateSineWave+0xa6>
    {
        int16_t sample = (int16_t)(AMPLITUDE * sin(phase));
 8000eba:	ed97 0b06 	vldr	d0, [r7, #24]
 8000ebe:	f00a f9a3 	bl	800b208 <sin>
 8000ec2:	ec51 0b10 	vmov	r0, r1, d0
 8000ec6:	a327      	add	r3, pc, #156	@ (adr r3, 8000f64 <GenerateSineWave+0xcc>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff f9f0 	bl	80002b0 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd58 	bl	800098c <__aeabi_d2iz>
 8000edc:	4603      	mov	r3, r0
 8000ede:	80fb      	strh	r3, [r7, #6]
        /* Ustaw tę samą próbkę dla obu kanałów */
        sineBuffer[frame * 2] = sample;     // lewy kanał
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	491c      	ldr	r1, [pc, #112]	@ (8000f58 <GenerateSineWave+0xc0>)
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        sineBuffer[frame * 2 + 1] = sample; // prawy kanał
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4919      	ldr	r1, [pc, #100]	@ (8000f58 <GenerateSineWave+0xc0>)
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

        phase += phaseIncrement;
 8000efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000efe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f02:	f7ff fb05 	bl	8000510 <__adddf3>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if (phase >= 2.0 * PI)
 8000f0e:	a310      	add	r3, pc, #64	@ (adr r3, 8000f50 <GenerateSineWave+0xb8>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f18:	f7ff fd24 	bl	8000964 <__aeabi_dcmpge>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00a      	beq.n	8000f38 <GenerateSineWave+0xa0>
            phase -= 2.0 * PI;
 8000f22:	a30b      	add	r3, pc, #44	@ (adr r3, 8000f50 <GenerateSineWave+0xb8>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f2c:	f7ff faee 	bl	800050c <__aeabi_dsub>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int frame = 0; frame < FRAMES_COUNT; frame++)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8000f44:	dbb9      	blt.n	8000eba <GenerateSineWave+0x22>
    }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	54442d18 	.word	0x54442d18
 8000f54:	401921fb 	.word	0x401921fb
 8000f58:	200001b8 	.word	0x200001b8
 8000f5c:	1dcc76a2 	.word	0x1dcc76a2
 8000f60:	3fb23ca6 	.word	0x3fb23ca6
 8000f64:	00000000 	.word	0x00000000
 8000f68:	40dd4c00 	.word	0x40dd4c00

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f000 fbe4 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f816 	bl	8000fa4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f78:	f000 f880 	bl	800107c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f7ff fece 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f80:	f7ff fea4 	bl	8000ccc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f84:	f000 fb3e 	bl	8001604 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f88:	f008 fb7c 	bl	8009684 <MX_USB_DEVICE_Init>
  MX_SAI1_Init();
 8000f8c:	f000 f8c6 	bl	800111c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Test\n");
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <main+0x34>)
 8000f92:	f009 fa9f 	bl	800a4d4 <puts>




    GenerateSineWave();
 8000f96:	f7ff ff7f 	bl	8000e98 <GenerateSineWave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9a:	bf00      	nop
 8000f9c:	e7fd      	b.n	8000f9a <main+0x2e>
 8000f9e:	bf00      	nop
 8000fa0:	0800c280 	.word	0x0800c280

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2234      	movs	r2, #52	@ 0x34
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 fb6e 	bl	800a694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a28      	ldr	r2, [pc, #160]	@ (8001074 <SystemClock_Config+0xd0>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <SystemClock_Config+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <SystemClock_Config+0xd4>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001004:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001008:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001018:	23a8      	movs	r3, #168	@ 0xa8
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001020:	2307      	movs	r3, #7
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fdad 	bl	8004b8c <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001038:	f000 f86a 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001048:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800104c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001052:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fcd8 	bl	8003a10 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001066:	f000 f853 	bl	8001110 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	@ 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b098      	sub	sp, #96	@ 0x60
 8001080:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	225c      	movs	r2, #92	@ 0x5c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f009 fb03 	bl	800a694 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800108e:	2304      	movs	r3, #4
 8001090:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001092:	2308      	movs	r3, #8
 8001094:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 180;
 8001096:	23b4      	movs	r3, #180	@ 0xb4
 8001098:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 800109a:	2304      	movs	r3, #4
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fdc9 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 80010b8:	f000 f82a 	bl	8001110 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3760      	adds	r7, #96	@ 0x60
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Tutaj wywołujesz np. funkcję AUDIO_FeedbackUpdate_44100Hz() */
  AUDIO_FeedbackUpdate_44100Hz();
 80010c8:	f008 fc12 	bl	80098f0 <AUDIO_FeedbackUpdate_44100Hz>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <__io_putchar>:


int __io_putchar(int ch)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d109      	bne.n	80010f2 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80010de:	230d      	movs	r3, #13
 80010e0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart3, &ch2, 1, HAL_MAX_DELAY);
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	2201      	movs	r2, #1
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <__io_putchar+0x3c>)
 80010ee:	f004 fcd9 	bl	8005aa4 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010f2:	1d39      	adds	r1, r7, #4
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	2201      	movs	r2, #1
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <__io_putchar+0x3c>)
 80010fc:	f004 fcd2 	bl	8005aa4 <HAL_UART_Transmit>
    return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200007b0 	.word	0x200007b0

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <MX_SAI1_Init+0xbc>)
 8001124:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001138:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001150:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001154:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800116e:	2302      	movs	r3, #2
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <MX_SAI1_Init+0xb8>)
 8001176:	f003 ffa7 	bl	80050c8 <HAL_SAI_InitProtocol>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_SAI1_Init+0x68>
  {
    Error_Handler();
 8001180:	f7ff ffc6 	bl	8001110 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_SAI1_Init+0xc0>)
 8001186:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <MX_SAI1_Init+0xc4>)
 8001188:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_SAI1_Init+0xc0>)
 800118c:	2203      	movs	r2, #3
 800118e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_SAI1_Init+0xc0>)
 8001192:	2201      	movs	r2, #1
 8001194:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_SAI1_Init+0xc0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_SAI1_Init+0xc0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_SAI1_Init+0xc0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_SAI1_Init+0xc0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_SAI1_Init+0xc0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_SAI1_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80011ba:	2302      	movs	r3, #2
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_SAI1_Init+0xc0>)
 80011c2:	f003 ff81 	bl	80050c8 <HAL_SAI_InitProtocol>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_SAI1_Init+0xb4>
  {
    Error_Handler();
 80011cc:	f7ff ffa0 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200005d8 	.word	0x200005d8
 80011d8:	40015804 	.word	0x40015804
 80011dc:	20000660 	.word	0x20000660
 80011e0:	40015824 	.word	0x40015824

080011e4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a64      	ldr	r2, [pc, #400]	@ (8001384 <HAL_SAI_MspInit+0x1a0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d15d      	bne.n	80012b2 <HAL_SAI_MspInit+0xce>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b62      	ldr	r3, [pc, #392]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a61      	ldr	r2, [pc, #388]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 8001208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a59      	ldr	r2, [pc, #356]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 8001222:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001224:	2374      	movs	r3, #116	@ 0x74
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001234:	2306      	movs	r3, #6
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4854      	ldr	r0, [pc, #336]	@ (8001390 <HAL_SAI_MspInit+0x1ac>)
 8001240:	f000 ff9a 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001246:	4a54      	ldr	r2, [pc, #336]	@ (8001398 <HAL_SAI_MspInit+0x1b4>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800124a:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001250:	4b50      	ldr	r3, [pc, #320]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001252:	2240      	movs	r2, #64	@ 0x40
 8001254:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001256:	4b4f      	ldr	r3, [pc, #316]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800125c:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800125e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001262:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800126a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126c:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800126e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001272:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001274:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800127a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800127e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001282:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800128a:	4842      	ldr	r0, [pc, #264]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800128c:	f000 fc04 	bl	8001a98 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 8001296:	f7ff ff3b 	bl	8001110 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a3d      	ldr	r2, [pc, #244]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 800129e:	675a      	str	r2, [r3, #116]	@ 0x74
 80012a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 80012aa:	671a      	str	r2, [r3, #112]	@ 0x70
 80012ac:	4a39      	ldr	r2, [pc, #228]	@ (8001394 <HAL_SAI_MspInit+0x1b0>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a39      	ldr	r2, [pc, #228]	@ (800139c <HAL_SAI_MspInit+0x1b8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d15e      	bne.n	800137a <HAL_SAI_MspInit+0x196>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10d      	bne.n	80012e0 <HAL_SAI_MspInit+0xfc>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 80012ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_SAI_MspInit+0x1a8>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <HAL_SAI_MspInit+0x1a4>)
 80012e8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ea:	2308      	movs	r3, #8
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012fa:	2306      	movs	r3, #6
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4822      	ldr	r0, [pc, #136]	@ (8001390 <HAL_SAI_MspInit+0x1ac>)
 8001306:	f000 ff37 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800130a:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800130c:	4a25      	ldr	r2, [pc, #148]	@ (80013a4 <HAL_SAI_MspInit+0x1c0>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001312:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001316:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800132e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001332:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800133e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001342:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001346:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800134a:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001352:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001354:	f000 fba0 	bl	8001a98 <HAL_DMA_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_SAI_MspInit+0x17e>
    {
      Error_Handler();
 800135e:	f7ff fed7 	bl	8001110 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001366:	675a      	str	r2, [r3, #116]	@ 0x74
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001372:	671a      	str	r2, [r3, #112]	@ 0x70
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_SAI_MspInit+0x1bc>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40015804 	.word	0x40015804
 8001388:	200007a8 	.word	0x200007a8
 800138c:	40023800 	.word	0x40023800
 8001390:	40021000 	.word	0x40021000
 8001394:	200006e8 	.word	0x200006e8
 8001398:	40026428 	.word	0x40026428
 800139c:	40015824 	.word	0x40015824
 80013a0:	20000748 	.word	0x20000748
 80013a4:	40026470 	.word	0x40026470

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f9c7 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler(); //FX turn on SYSTICK interrupt
 8001452:	f000 fb1a 	bl	8001a8a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <DMA2_Stream1_IRQHandler+0x10>)
 8001462:	f000 fc1f 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200006e8 	.word	0x200006e8

08001470 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA2_Stream4_IRQHandler+0x10>)
 8001476:	f000 fc15 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000748 	.word	0x20000748

08001484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <OTG_FS_IRQHandler+0x10>)
 800148a:	f001 f96d 	bl	8002768 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20001ce4 	.word	0x20001ce4

08001498 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdef 	bl	80010d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
  }
  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001532:	605a      	str	r2, [r3, #4]
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f009 f8c4 	bl	800a730 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00008000 	.word	0x00008000
 80015d8:	200007ac 	.word	0x200007ac
 80015dc:	20005a68 	.word	0x20005a68

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <MX_USART3_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_USART3_UART_Init+0x4c>)
 800163c:	f004 f9e2 	bl	8005a04 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f7ff fd63 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200007b0 	.word	0x200007b0
 8001654:	40004800 	.word	0x40004800

08001658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <HAL_UART_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12c      	bne.n	80016d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c4:	2307      	movs	r3, #7
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_UART_MspInit+0x8c>)
 80016d0:	f000 fd52 	bl	8002178 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40004800 	.word	0x40004800
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020c00 	.word	0x40020c00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016ec:	f7ff ff78 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001716:	f009 f811 	bl	800a73c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff fc27 	bl	8000f6c <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800172c:	0800c538 	.word	0x0800c538
  ldr r2, =_sbss
 8001730:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001734:	20005a68 	.word	0x20005a68

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f94f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fe1a 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f967 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f92f 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	@ (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	200007f8 	.word	0x200007f8

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200007f8 	.word	0x200007f8

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a8e:	f7ff fb19 	bl	80010c4 <HAL_SYSTICK_Callback>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff feb0 	bl	8001808 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e099      	b.n	8001be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad4:	e00f      	b.n	8001af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fe97 	bl	8001808 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d908      	bls.n	8001af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e078      	b.n	8001be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e8      	bne.n	8001ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <HAL_DMA_Init+0x158>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f023 0307 	bic.w	r3, r3, #7
 8001b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d117      	bne.n	8001bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fa6f 	bl	8002080 <DMA_CheckFifoParam>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2240      	movs	r2, #64	@ 0x40
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e016      	b.n	8001be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fa26 	bl	8002014 <DMA_CalcBaseAndBitshift>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	223f      	movs	r2, #63	@ 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	f010803f 	.word	0xf010803f

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_DMA_Start_IT+0x26>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e040      	b.n	8001c9c <HAL_DMA_Start_IT+0xa8>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12f      	bne.n	8001c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f9b8 	bl	8001fb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	223f      	movs	r2, #63	@ 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0216 	orr.w	r2, r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0208 	orr.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e005      	b.n	8001c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8001eec <HAL_DMA_IRQHandler+0x248>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001ef0 <HAL_DMA_IRQHandler+0x24c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cce:	2208      	movs	r2, #8
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01a      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3e:	f043 0202 	orr.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	2204      	movs	r2, #4
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2210      	movs	r2, #16
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d043      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03c      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	2210      	movs	r2, #16
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d024      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	e01f      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
 8001de4:	e016      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e18:	2220      	movs	r2, #32
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808f 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8087 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d136      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_IRQHandler+0x1da>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	223f      	movs	r2, #63	@ 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d07e      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
        }
        return;
 8001eba:	e079      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01d      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
 8001ee8:	e02c      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e01e      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0210 	bic.w	r2, r2, #16
 8001f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d032      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d022      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d307      	bcc.n	8001f8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x2cc>
 8001f8a:	e000      	b.n	8001f8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb0:	bf00      	nop
    }
  }
}
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b40      	cmp	r3, #64	@ 0x40
 8001fe4:	d108      	bne.n	8001ff8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ff6:	e007      	b.n	8002008 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	3b10      	subs	r3, #16
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <DMA_CalcBaseAndBitshift+0x64>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202e:	4a13      	ldr	r2, [pc, #76]	@ (800207c <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d909      	bls.n	8002056 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	@ 0x58
 8002054:	e007      	b.n	8002066 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	aaaaaaab 	.word	0xaaaaaaab
 800207c:	0800c314 	.word	0x0800c314

08002080 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11f      	bne.n	80020da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d856      	bhi.n	800214e <DMA_CheckFifoParam+0xce>
 80020a0:	a201      	add	r2, pc, #4	@ (adr r2, 80020a8 <DMA_CheckFifoParam+0x28>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	080020b9 	.word	0x080020b9
 80020b4:	0800214f 	.word	0x0800214f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d046      	beq.n	8002152 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c8:	e043      	b.n	8002152 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020d2:	d140      	bne.n	8002156 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e03d      	b.n	8002156 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e2:	d121      	bne.n	8002128 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d837      	bhi.n	800215a <DMA_CheckFifoParam+0xda>
 80020ea:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <DMA_CheckFifoParam+0x70>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002107 	.word	0x08002107
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e030      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d025      	beq.n	800215e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002116:	e022      	b.n	800215e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002120:	d11f      	bne.n	8002162 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002126:	e01c      	b.n	8002162 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d903      	bls.n	8002136 <DMA_CheckFifoParam+0xb6>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d003      	beq.n	800213c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002134:	e018      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      break;
 800213a:	e015      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e00b      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 800214e:	bf00      	nop
 8002150:	e00a      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e008      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e006      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e004      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
 8002160:	e002      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;   
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
    }
  } 
  
  return status; 
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e165      	b.n	8002460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8154 	bne.w	800245a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d005      	beq.n	80021ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d130      	bne.n	800222c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b03      	cmp	r3, #3
 8002236:	d017      	beq.n	8002268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d123      	bne.n	80022bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80ae 	beq.w	800245a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b5d      	ldr	r3, [pc, #372]	@ (8002478 <HAL_GPIO_Init+0x300>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a5c      	ldr	r2, [pc, #368]	@ (8002478 <HAL_GPIO_Init+0x300>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b5a      	ldr	r3, [pc, #360]	@ (8002478 <HAL_GPIO_Init+0x300>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a58      	ldr	r2, [pc, #352]	@ (800247c <HAL_GPIO_Init+0x304>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4f      	ldr	r2, [pc, #316]	@ (8002480 <HAL_GPIO_Init+0x308>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d025      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <HAL_GPIO_Init+0x30c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <HAL_GPIO_Init+0x216>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4d      	ldr	r2, [pc, #308]	@ (8002488 <HAL_GPIO_Init+0x310>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x212>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4c      	ldr	r2, [pc, #304]	@ (800248c <HAL_GPIO_Init+0x314>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x20e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4b      	ldr	r2, [pc, #300]	@ (8002490 <HAL_GPIO_Init+0x318>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x20a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4a      	ldr	r2, [pc, #296]	@ (8002494 <HAL_GPIO_Init+0x31c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x206>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a49      	ldr	r2, [pc, #292]	@ (8002498 <HAL_GPIO_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x202>
 8002376:	2306      	movs	r3, #6
 8002378:	e00c      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800237a:	2307      	movs	r3, #7
 800237c:	e00a      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800237e:	2305      	movs	r3, #5
 8002380:	e008      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002382:	2304      	movs	r3, #4
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002386:	2303      	movs	r3, #3
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002392:	2300      	movs	r3, #0
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a4:	4935      	ldr	r1, [pc, #212]	@ (800247c <HAL_GPIO_Init+0x304>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_GPIO_Init+0x324>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_GPIO_Init+0x324>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b2f      	ldr	r3, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x324>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a26      	ldr	r2, [pc, #152]	@ (800249c <HAL_GPIO_Init+0x324>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_GPIO_Init+0x324>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242a:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_GPIO_Init+0x324>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <HAL_GPIO_Init+0x324>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002454:	4a11      	ldr	r2, [pc, #68]	@ (800249c <HAL_GPIO_Init+0x324>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	f67f ae96 	bls.w	8002194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40013800 	.word	0x40013800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e108      	b.n	80026f6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f007 fb30 	bl	8009b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002512:	d102      	bne.n	800251a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 ff93 	bl	800644a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7c1a      	ldrb	r2, [r3, #16]
 800252c:	f88d 2000 	strb.w	r2, [sp]
 8002530:	3304      	adds	r3, #4
 8002532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002534:	f003 fe72 	bl	800621c <USB_CoreInit>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0d5      	b.n	80026f6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f003 ff8b 	bl	800646c <USB_SetCurrentMode>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0c6      	b.n	80026f6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e04a      	b.n	8002604 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3315      	adds	r3, #21
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3314      	adds	r3, #20
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	b298      	uxth	r0, r3
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	332e      	adds	r3, #46	@ 0x2e
 80025aa:	4602      	mov	r2, r0
 80025ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3318      	adds	r3, #24
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	331c      	adds	r3, #28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3320      	adds	r3, #32
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3324      	adds	r3, #36	@ 0x24
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3301      	adds	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	791b      	ldrb	r3, [r3, #4]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3af      	bcc.n	800256e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e044      	b.n	800269e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3301      	adds	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3b5      	bcc.n	8002614 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7c1a      	ldrb	r2, [r3, #16]
 80026b0:	f88d 2000 	strb.w	r2, [sp]
 80026b4:	3304      	adds	r3, #4
 80026b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b8:	f003 ff24 	bl	8006504 <USB_DevInit>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e013      	b.n	80026f6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7b1b      	ldrb	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f001 f96f 	bl	80039c8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 ff61 	bl	80075b6 <USB_DevDisconnect>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_Start+0x1c>
 8002716:	2302      	movs	r3, #2
 8002718:	e022      	b.n	8002760 <HAL_PCD_Start+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fe6e 	bl	8006428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f004 ff0f 	bl	8007574 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b08d      	sub	sp, #52	@ 0x34
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 ffcd 	bl	800771e <USB_GetMode>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 84b9 	bne.w	80030fe <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 ff31 	bl	80075f8 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 84af 	beq.w	80030fc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 ff1e 	bl	80075f8 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 0202 	and.w	r2, r2, #2
 80027d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 ff0c 	bl	80075f8 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d161      	bne.n	80028ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0210 	bic.w	r2, r2, #16
 80027f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 020f 	and.w	r2, r3, #15
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	0c5b      	lsrs	r3, r3, #17
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	2b02      	cmp	r3, #2
 8002824:	d124      	bne.n	8002870 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d035      	beq.n	800289e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800283c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	6a38      	ldr	r0, [r7, #32]
 8002846:	f004 fd43 	bl	80072d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002856:	441a      	add	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002868:	441a      	add	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	e016      	b.n	800289e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	0c5b      	lsrs	r3, r3, #17
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	2b06      	cmp	r3, #6
 800287a:	d110      	bne.n	800289e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002882:	2208      	movs	r2, #8
 8002884:	4619      	mov	r1, r3
 8002886:	6a38      	ldr	r0, [r7, #32]
 8002888:	f004 fd22 	bl	80072d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002898:	441a      	add	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0210 	orr.w	r2, r2, #16
 80028ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fea0 	bl	80075f8 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028c2:	f040 80a7 	bne.w	8002a14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fea5 	bl	800761e <USB_ReadDevAllOutEpInterrupt>
 80028d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028d6:	e099      	b.n	8002a0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 808e 	beq.w	8002a00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fec9 	bl	8007686 <USB_ReadDevOutEPInterrupt>
 80028f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00c      	beq.n	800291a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fed1 	bl	80036bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	2308      	movs	r3, #8
 8002934:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 ffa7 	bl	800388c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d030      	beq.n	80029c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296c:	2b80      	cmp	r3, #128	@ 0x80
 800296e:	d109      	bne.n	8002984 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800297e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002982:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f007 fa02 	bl	8009db8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c0:	461a      	mov	r2, r3
 80029c2:	2302      	movs	r3, #2
 80029c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	2320      	movs	r3, #32
 80029e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f af62 	bne.w	80028d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f004 fded 	bl	80075f8 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a28:	f040 80db 	bne.w	8002be2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 fe0e 	bl	8007652 <USB_ReadDevAllInEpInterrupt>
 8002a36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a3c:	e0cd      	b.n	8002bda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80c2 	beq.w	8002bce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fe34 	bl	80076c2 <USB_ReadDevInEPInterrupt>
 8002a5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d057      	beq.n	8002b16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69f9      	ldr	r1, [r7, #28]
 8002a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a86:	4013      	ands	r3, r2
 8002a88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a96:	461a      	mov	r2, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	799b      	ldrb	r3, [r3, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d132      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3320      	adds	r3, #32
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4403      	add	r3, r0
 8002ac4:	331c      	adds	r3, #28
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4419      	add	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4403      	add	r3, r0
 8002ad8:	3320      	adds	r3, #32
 8002ada:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d113      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x3a2>
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3324      	adds	r3, #36	@ 0x24
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b02:	461a      	mov	r2, r3
 8002b04:	2101      	movs	r1, #1
 8002b06:	f004 fe3b 	bl	8007780 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f007 f8cc 	bl	8009cae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2308      	movs	r3, #8
 8002b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b64:	461a      	mov	r2, r3
 8002b66:	2340      	movs	r3, #64	@ 0x40
 8002b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b76:	6a38      	ldr	r0, [r7, #32]
 8002b78:	f003 fe22 	bl	80067c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3310      	adds	r3, #16
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f007 f919 	bl	8009ddc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2302      	movs	r3, #2
 8002bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fcea 	bl	80035a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f47f af2e 	bne.w	8002a3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fd06 	bl	80075f8 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bf6:	d122      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c1e:	2100      	movs	r1, #0
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f007 fa93 	bl	800a14c <HAL_PCDEx_LPM_Callback>
 8002c26:	e002      	b.n	8002c2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f007 f8b7 	bl	8009d9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fcd8 	bl	80075f8 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c52:	d112      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f007 f873 	bl	8009d50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c78:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 fcba 	bl	80075f8 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8e:	d121      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002c9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d111      	bne.n	8002cce <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f007 fa40 	bl	800a14c <HAL_PCDEx_LPM_Callback>
 8002ccc:	e002      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f007 f83e 	bl	8009d50 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 fc8d 	bl	80075f8 <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce8:	f040 80b7 	bne.w	8002e5a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2110      	movs	r1, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fd5a 	bl	80067c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d10:	e046      	b.n	8002da0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d36:	0151      	lsls	r1, r2, #5
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	440a      	add	r2, r1
 8002d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d52:	461a      	mov	r2, r3
 8002d54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	791b      	ldrb	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d3b2      	bcc.n	8002d12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002dbe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7bdb      	ldrb	r3, [r3, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dd8:	f043 030b 	orr.w	r3, r3, #11
 8002ddc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dee:	f043 030b 	orr.w	r3, r3, #11
 8002df2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df4:	e015      	b.n	8002e22 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e08:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1c:	f043 030b 	orr.w	r3, r3, #11
 8002e20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e30:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e44:	461a      	mov	r2, r3
 8002e46:	f004 fc9b 	bl	8007780 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 fbca 	bl	80075f8 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	d123      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fc60 	bl	800773a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fd17 	bl	80068b2 <USB_GetDevSpeed>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	f000 fea4 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8002e94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f003 fa21 	bl	80062e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f006 ff2b 	bl	8009cfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fb9b 	bl	80075f8 <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d10a      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f006 ff08 	bl	8009ce2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f002 0208 	and.w	r2, r2, #8
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fb86 	bl	80075f8 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d123      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f02:	2301      	movs	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f06:	e014      	b.n	8002f32 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fb0a 	bl	8003540 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	3301      	adds	r3, #1
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d3e4      	bcc.n	8002f08 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fb58 	bl	80075f8 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f52:	d13c      	bne.n	8002fce <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f54:	2301      	movs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f58:	e02b      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3318      	adds	r3, #24
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d115      	bne.n	8002fac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da12      	bge.n	8002fac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3317      	adds	r3, #23
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 faca 	bl	8003540 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	791b      	ldrb	r3, [r3, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d3cd      	bcc.n	8002f5a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb10 	bl	80075f8 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fe2:	d156      	bne.n	8003092 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe8:	e045      	b.n	8003076 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d12e      	bne.n	8003070 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003012:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	da2b      	bge.n	8003070 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003024:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306c:	6053      	str	r3, [r2, #4]
            break;
 800306e:	e008      	b.n	8003082 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	4293      	cmp	r3, r2
 8003080:	d3b3      	bcc.n	8002fea <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 faae 	bl	80075f8 <USB_ReadInterrupts>
 800309c:	4603      	mov	r3, r0
 800309e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a6:	d10a      	bne.n	80030be <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fea9 	bl	8009e00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 fa98 	bl	80075f8 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d115      	bne.n	80030fe <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f006 fe99 	bl	8009e1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e000      	b.n	80030fe <HAL_PCD_IRQHandler+0x996>
      return;
 80030fc:	bf00      	nop
    }
  }
}
 80030fe:	3734      	adds	r7, #52	@ 0x34
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}

08003104 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_PCD_SetAddress+0x1a>
 800311a:	2302      	movs	r3, #2
 800311c:	e012      	b.n	8003144 <HAL_PCD_SetAddress+0x40>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f004 f9f7 	bl	8007528 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	70fb      	strb	r3, [r7, #3]
 800315e:	460b      	mov	r3, r1
 8003160:	803b      	strh	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800316a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	da0f      	bge.n	8003192 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	3310      	adds	r3, #16
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	705a      	strb	r2, [r3, #1]
 8003190:	e00f      	b.n	80031b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	3304      	adds	r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031be:	883b      	ldrh	r3, [r7, #0]
 80031c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	78ba      	ldrb	r2, [r7, #2]
 80031cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031e0:	78bb      	ldrb	r3, [r7, #2]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d102      	bne.n	80031ec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_Open+0xae>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_Open+0xcc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fb77 	bl	80068fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003216:	7afb      	ldrb	r3, [r7, #11]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800322c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da0f      	bge.n	8003254 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	3310      	adds	r3, #16
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	705a      	strb	r2, [r3, #1]
 8003252:	e00f      	b.n	8003274 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	f003 020f 	and.w	r2, r3, #15
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_PCD_EP_Close+0x6e>
 800328a:	2302      	movs	r3, #2
 800328c:	e00e      	b.n	80032ac <HAL_PCD_EP_Close+0x8c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fbb5 	bl	8006a0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	460b      	mov	r3, r1
 80032c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	799b      	ldrb	r3, [r3, #6]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	799b      	ldrb	r3, [r3, #6]
 8003318:	461a      	mov	r2, r3
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	f003 fc52 	bl	8006bc4 <USB_EPStartXfer>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800334c:	681b      	ldr	r3, [r3, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	460b      	mov	r3, r1
 8003368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	3310      	adds	r3, #16
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	7afb      	ldrb	r3, [r7, #11]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	799b      	ldrb	r3, [r3, #6]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	799b      	ldrb	r3, [r3, #6]
 80033bc:	461a      	mov	r2, r3
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	f003 fc00 	bl	8006bc4 <USB_EPStartXfer>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	7912      	ldrb	r2, [r2, #4]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04f      	b.n	800348c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3310      	adds	r3, #16
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00d      	b.n	8003430 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_PCD_EP_SetStall+0x82>
 800344c:	2302      	movs	r3, #2
 800344e:	e01d      	b.n	800348c <HAL_PCD_EP_SetStall+0xbe>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 ff8e 	bl	8007380 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7999      	ldrb	r1, [r3, #6]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800347c:	461a      	mov	r2, r3
 800347e:	f004 f97f 	bl	8007780 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	7912      	ldrb	r2, [r2, #4]
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e042      	b.n	8003538 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da0f      	bge.n	80034da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3310      	adds	r3, #16
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	705a      	strb	r2, [r3, #1]
 80034d8:	e00f      	b.n	80034fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_PCD_EP_ClrStall+0x86>
 8003516:	2302      	movs	r3, #2
 8003518:	e00e      	b.n	8003538 <HAL_PCD_EP_ClrStall+0xa4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68f9      	ldr	r1, [r7, #12]
 8003528:	4618      	mov	r0, r3
 800352a:	f003 ff97 	bl	800745c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800354c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da0c      	bge.n	800356e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 020f 	and.w	r2, r3, #15
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	3310      	adds	r3, #16
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e00c      	b.n	8003588 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f003 fdb6 	bl	8007100 <USB_EPStopXfer>
 8003594:	4603      	mov	r3, r0
 8003596:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003598:	7afb      	ldrb	r3, [r7, #11]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	@ 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	3310      	adds	r3, #16
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d901      	bls.n	80035da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d902      	bls.n	80035f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3303      	adds	r3, #3
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fe:	e02a      	b.n	8003656 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	429a      	cmp	r2, r3
 8003614:	d902      	bls.n	800361c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3303      	adds	r3, #3
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4603      	mov	r3, r0
 8003638:	6978      	ldr	r0, [r7, #20]
 800363a:	f003 fe0b 	bl	8007254 <USB_WritePacket>

    ep->xfer_buff  += len;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d809      	bhi.n	8003680 <PCD_WriteEmptyTxFifo+0xde>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003674:	429a      	cmp	r2, r3
 8003676:	d203      	bcs.n	8003680 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1bf      	bne.n	8003600 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d811      	bhi.n	80036b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	6939      	ldr	r1, [r7, #16]
 80036a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036ac:	4013      	ands	r3, r2
 80036ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	333c      	adds	r3, #60	@ 0x3c
 80036d4:	3304      	adds	r3, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d17b      	bne.n	80037ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4a61      	ldr	r2, [pc, #388]	@ (8003884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	f240 80b9 	bls.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80b3 	beq.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003724:	6093      	str	r3, [r2, #8]
 8003726:	e0a7      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800373e:	461a      	mov	r2, r3
 8003740:	2320      	movs	r3, #32
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e098      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	f040 8093 	bne.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4a4b      	ldr	r2, [pc, #300]	@ (8003884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d90f      	bls.n	800377a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003776:	6093      	str	r3, [r2, #8]
 8003778:	e07e      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	440b      	add	r3, r1
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d114      	bne.n	80037dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037c4:	461a      	mov	r2, r3
 80037c6:	2101      	movs	r1, #1
 80037c8:	f003 ffda 	bl	8007780 <USB_EP0_OutStart>
 80037cc:	e006      	b.n	80037dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f006 fa48 	bl	8009c78 <HAL_PCD_DataOutStageCallback>
 80037e8:	e046      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d124      	bne.n	800383c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800380e:	6093      	str	r3, [r2, #8]
 8003810:	e032      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	2320      	movs	r3, #32
 800382c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f006 fa1f 	bl	8009c78 <HAL_PCD_DataOutStageCallback>
 800383a:	e01d      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d114      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003864:	461a      	mov	r2, r3
 8003866:	2100      	movs	r1, #0
 8003868:	f003 ff8a 	bl	8007780 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f006 fa00 	bl	8009c78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	4f54300a 	.word	0x4f54300a
 8003888:	4f54310a 	.word	0x4f54310a

0800388c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	333c      	adds	r3, #60	@ 0x3c
 80038a4:	3304      	adds	r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <PCD_EP_OutSetupPacket_int+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d90e      	bls.n	80038e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f006 f9b7 	bl	8009c54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90c      	bls.n	8003908 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	799b      	ldrb	r3, [r3, #6]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d108      	bne.n	8003908 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003900:	461a      	mov	r2, r3
 8003902:	2101      	movs	r1, #1
 8003904:	f003 ff3c 	bl	8007780 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	4f54300a 	.word	0x4f54300a

08003918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
 8003924:	4613      	mov	r3, r2
 8003926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003936:	883b      	ldrh	r3, [r7, #0]
 8003938:	0419      	lsls	r1, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	430a      	orrs	r2, r1
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
 8003944:	e028      	b.n	8003998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e00d      	b.n	8003976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3340      	adds	r3, #64	@ 0x40
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	3b01      	subs	r3, #1
 800397c:	429a      	cmp	r2, r3
 800397e:	d3ec      	bcc.n	800395a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003980:	883b      	ldrh	r3, [r7, #0]
 8003982:	0418      	lsls	r0, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	3b01      	subs	r3, #1
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4302      	orrs	r2, r0
 8003990:	3340      	adds	r3, #64	@ 0x40
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	f043 0303 	orr.w	r3, r3, #3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cc      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b68      	ldr	r3, [pc, #416]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d90c      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b65      	ldr	r3, [pc, #404]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d044      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ace:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e067      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4934      	ldr	r1, [pc, #208]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b00:	f7fd fe82 	bl	8001808 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7fd fe7e 	bl	8001808 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e04f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 020c 	and.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b30:	4b25      	ldr	r3, [pc, #148]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20c      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 fdc9 	bl	800472c <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490a      	ldr	r1, [pc, #40]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fde2 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	0800c2fc 	.word	0x0800c2fc
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	@ (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a9b      	lsrs	r3, r3, #10
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	0800c30c 	.word	0x0800c30c

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c20:	f7ff ffdc 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0b5b      	lsrs	r3, r3, #13
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4903      	ldr	r1, [pc, #12]	@ (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	0800c30c 	.word	0x0800c30c

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	@ 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c82:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	496c      	ldr	r1, [pc, #432]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003caa:	4b64      	ldr	r3, [pc, #400]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cb0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	4960      	ldr	r1, [pc, #384]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd8:	4b58      	ldr	r3, [pc, #352]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4955      	ldr	r1, [pc, #340]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d04:	2301      	movs	r3, #1
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d017      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d14:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d22:	4946      	ldr	r1, [pc, #280]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d32:	d101      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d40:	2301      	movs	r3, #1
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 808a 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	4b39      	ldr	r3, [pc, #228]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	4a38      	ldr	r2, [pc, #224]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d62:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d6e:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a33      	ldr	r2, [pc, #204]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fd45 	bl	8001808 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd fd41 	bl	8001808 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e278      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d94:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da0:	4b26      	ldr	r3, [pc, #152]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dda:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d114      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fd fd0f 	bl	8001808 <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd fd0b 	bl	8001808 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e240      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e1c:	d114      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e32:	4902      	ldr	r1, [pc, #8]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
 8003e38:	e00c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470e40 	.word	0x42470e40
 8003e48:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a49      	ldr	r2, [pc, #292]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e52:	6093      	str	r3, [r2, #8]
 8003e54:	4b47      	ldr	r3, [pc, #284]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	4944      	ldr	r1, [pc, #272]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003e78:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e88:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	4937      	ldr	r1, [pc, #220]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eaa:	4b32      	ldr	r3, [pc, #200]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb8:	492e      	ldr	r1, [pc, #184]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ecc:	4b29      	ldr	r3, [pc, #164]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	4926      	ldr	r1, [pc, #152]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003efc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	491a      	ldr	r1, [pc, #104]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	4911      	ldr	r1, [pc, #68]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d005      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f50:	f040 80ff 	bne.w	8004152 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fc55 	bl	8001808 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f60:	e00e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f62:	f7fd fc51 	bl	8001808 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d907      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e188      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f74:	40023800 	.word	0x40023800
 8003f78:	424711e0 	.word	0x424711e0
 8003f7c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f80:	4b7e      	ldr	r3, [pc, #504]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ea      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d028      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d124      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fb4:	4b71      	ldr	r3, [pc, #452]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fcc:	0e1b      	lsrs	r3, r3, #24
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	4961      	ldr	r1, [pc, #388]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800401c:	2b00      	cmp	r3, #0
 800401e:	d035      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004028:	d130      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800402a:	4b54      	ldr	r3, [pc, #336]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800403c:	4b4f      	ldr	r3, [pc, #316]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004042:	0f1b      	lsrs	r3, r3, #28
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	019b      	lsls	r3, r3, #6
 8004054:	431a      	orrs	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	431a      	orrs	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	071b      	lsls	r3, r3, #28
 800406c:	4943      	ldr	r1, [pc, #268]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004074:	4b41      	ldr	r3, [pc, #260]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800407a:	f023 021f 	bic.w	r2, r3, #31
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	493d      	ldr	r1, [pc, #244]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d029      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a0:	d124      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040a2:	4b36      	ldr	r3, [pc, #216]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	3301      	adds	r3, #1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040b4:	4b31      	ldr	r3, [pc, #196]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	0f1b      	lsrs	r3, r3, #28
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	019b      	lsls	r3, r3, #6
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	431a      	orrs	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	071b      	lsls	r3, r3, #28
 80040e4:	4925      	ldr	r1, [pc, #148]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	071b      	lsls	r3, r3, #28
 800411e:	4917      	ldr	r1, [pc, #92]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004126:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800412c:	f7fd fb6c 	bl	8001808 <HAL_GetTick>
 8004130:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004134:	f7fd fb68 	bl	8001808 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e09f      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004146:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 8095 	bne.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800415a:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004160:	f7fd fb52 	bl	8001808 <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004166:	e00f      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004168:	f7fd fb4e 	bl	8001808 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d908      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e085      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	42470068 	.word	0x42470068
 8004184:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004188:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004194:	d0e8      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d127      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041be:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	3301      	adds	r3, #1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	431a      	orrs	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	061b      	lsls	r3, r3, #24
 80041ec:	4928      	ldr	r1, [pc, #160]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041f4:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	3b01      	subs	r3, #1
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	4922      	ldr	r1, [pc, #136]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01d      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004222:	d118      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004224:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	019b      	lsls	r3, r3, #6
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	3b01      	subs	r3, #1
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	4910      	ldr	r1, [pc, #64]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004256:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800425c:	f7fd fad4 	bl	8001808 <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004264:	f7fd fad0 	bl	8001808 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e007      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800427e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004282:	d1ef      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3730      	adds	r7, #48	@ 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	42470070 	.word	0x42470070

08004298 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	2b07      	cmp	r3, #7
 80042be:	f200 8224 	bhi.w	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80042c2:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080044cb 	.word	0x080044cb
 80042cc:	080045f5 	.word	0x080045f5
 80042d0:	0800470b 	.word	0x0800470b
 80042d4:	080042e9 	.word	0x080042e9
 80042d8:	0800470b 	.word	0x0800470b
 80042dc:	0800470b 	.word	0x0800470b
 80042e0:	0800470b 	.word	0x0800470b
 80042e4:	080042e9 	.word	0x080042e9
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80042e8:	4ba8      	ldr	r3, [pc, #672]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ee:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042fe:	f000 80d6 	beq.w	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004308:	f200 80dd 	bhi.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004312:	f000 809f 	beq.w	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800431c:	f200 80d3 	bhi.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004326:	d05b      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432e:	f200 80ca 	bhi.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004338:	f000 80b6 	beq.w	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004342:	f200 80c0 	bhi.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800434c:	f000 8082 	beq.w	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004356:	f200 80b6 	bhi.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004366:	d03b      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8004368:	e0ad      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800436a:	4b88      	ldr	r3, [pc, #544]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004376:	4b85      	ldr	r3, [pc, #532]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004380:	4a83      	ldr	r2, [pc, #524]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e008      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800438a:	4b80      	ldr	r3, [pc, #512]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	4a7f      	ldr	r2, [pc, #508]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800439c:	4b7b      	ldr	r3, [pc, #492]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 80043aa:	4b78      	ldr	r3, [pc, #480]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	fb03 f202 	mul.w	r2, r3, r2
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80043c4:	4b71      	ldr	r3, [pc, #452]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	3301      	adds	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	61fb      	str	r3, [r7, #28]
          break;
 80043de:	e073      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043e0:	4b6a      	ldr	r3, [pc, #424]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043ec:	4b67      	ldr	r3, [pc, #412]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f6:	4a66      	ldr	r2, [pc, #408]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004400:	4b62      	ldr	r3, [pc, #392]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004406:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800440a:	4a62      	ldr	r2, [pc, #392]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004412:	4b5e      	ldr	r3, [pc, #376]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8004420:	4b5a      	ldr	r3, [pc, #360]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800443a:	4b54      	ldr	r3, [pc, #336]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	61fb      	str	r3, [r7, #28]
          break;
 8004452:	e039      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004454:	4b4d      	ldr	r3, [pc, #308]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004460:	4b4a      	ldr	r3, [pc, #296]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004468:	4a49      	ldr	r2, [pc, #292]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e007      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004472:	4b46      	ldr	r3, [pc, #280]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800447a:	4a46      	ldr	r2, [pc, #280]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004482:	4b42      	ldr	r3, [pc, #264]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0f1b      	lsrs	r3, r3, #28
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 800448e:	4b3f      	ldr	r3, [pc, #252]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	fb03 f202 	mul.w	r2, r3, r2
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	61fb      	str	r3, [r7, #28]
          break;
 80044a6:	e00f      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80044aa:	61fb      	str	r3, [r7, #28]
          break;
 80044ac:	e00c      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80044ba:	4b35      	ldr	r3, [pc, #212]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044bc:	61fb      	str	r3, [r7, #28]
          break;
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80044c0:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044c2:	61fb      	str	r3, [r7, #28]
          break;
 80044c4:	e000      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80044c6:	bf00      	nop
        }
      }
      break;
 80044c8:	e120      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80044ca:	4b30      	ldr	r3, [pc, #192]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80044dc:	d079      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80044e4:	f200 8082 	bhi.w	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ee:	d03c      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044f6:	d879      	bhi.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004504:	d172      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004508:	61fb      	str	r3, [r7, #28]
          break;
 800450a:	e072      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800450c:	4b1f      	ldr	r3, [pc, #124]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004518:	d109      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800451a:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004524:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e008      	b.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800452e:	4b17      	ldr	r3, [pc, #92]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004538:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004554:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455a:	0f1b      	lsrs	r3, r3, #28
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	61fb      	str	r3, [r7, #28]
          break;
 8004568:	e043      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004576:	d111      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004580:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e010      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	007a1200 	.word	0x007a1200
 8004598:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800459c:	4b5f      	ldr	r3, [pc, #380]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80045ac:	4b5b      	ldr	r3, [pc, #364]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	099b      	lsrs	r3, r3, #6
 80045b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045be:	4b57      	ldr	r3, [pc, #348]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	61fb      	str	r3, [r7, #28]
          break;
 80045d0:	e00f      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045d2:	4b52      	ldr	r3, [pc, #328]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045de:	d102      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80045e0:	4b50      	ldr	r3, [pc, #320]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80045e2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80045e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80045e8:	61fb      	str	r3, [r7, #28]
          break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
          break;
 80045f0:	bf00      	nop
        }
      }
      break;
 80045f2:	e08b      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80045f4:	4b49      	ldr	r3, [pc, #292]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045fa:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004606:	d06f      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800460e:	d878      	bhi.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004616:	d03c      	beq.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800461e:	d870      	bhi.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462c:	d169      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800462e:	4b3e      	ldr	r3, [pc, #248]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8004630:	61fb      	str	r3, [r7, #28]
          break;
 8004632:	e069      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004634:	4b39      	ldr	r3, [pc, #228]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004640:	d109      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004642:	4b36      	ldr	r3, [pc, #216]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800464c:	4a35      	ldr	r2, [pc, #212]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004656:	4b31      	ldr	r3, [pc, #196]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004660:	4a2f      	ldr	r2, [pc, #188]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004668:	4b2c      	ldr	r3, [pc, #176]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800467c:	4b27      	ldr	r3, [pc, #156]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61fb      	str	r3, [r7, #28]
          break;
 8004690:	e03a      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004692:	4b22      	ldr	r3, [pc, #136]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469e:	d108      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046a0:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e007      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b2:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ba:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80046c2:	4b16      	ldr	r3, [pc, #88]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	0f1b      	lsrs	r3, r3, #28
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	61fb      	str	r3, [r7, #28]
          break;
 80046e6:	e00f      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f4:	d102      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80046f8:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80046fa:	e005      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80046fe:	61fb      	str	r3, [r7, #28]
          break;
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
          break;
 8004706:	bf00      	nop
        }
      }
      break;
 8004708:	e000      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 800470a:	bf00      	nop
    }
  }
  return frequency;
 800470c:	69fb      	ldr	r3, [r7, #28]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200
 8004728:	00bb8000 	.word	0x00bb8000

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b0ae      	sub	sp, #184	@ 0xb8
 8004732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004752:	4bcb      	ldr	r3, [pc, #812]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b0c      	cmp	r3, #12
 800475c:	f200 8206 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x440>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800479d 	.word	0x0800479d
 800476c:	08004b6d 	.word	0x08004b6d
 8004770:	08004b6d 	.word	0x08004b6d
 8004774:	08004b6d 	.word	0x08004b6d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	08004b6d 	.word	0x08004b6d
 8004780:	08004b6d 	.word	0x08004b6d
 8004784:	08004b6d 	.word	0x08004b6d
 8004788:	080047ad 	.word	0x080047ad
 800478c:	08004b6d 	.word	0x08004b6d
 8004790:	08004b6d 	.word	0x08004b6d
 8004794:	08004b6d 	.word	0x08004b6d
 8004798:	0800499d 	.word	0x0800499d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4bb9      	ldr	r3, [pc, #740]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x358>)
 800479e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047a2:	e1e7      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047aa:	e1e3      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ac:	4bb4      	ldr	r3, [pc, #720]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b8:	4bb1      	ldr	r3, [pc, #708]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d071      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c4:	4bae      	ldr	r3, [pc, #696]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80047d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	f04f 0000 	mov.w	r0, #0
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047fc:	0150      	lsls	r0, r2, #5
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4621      	mov	r1, r4
 8004804:	1a51      	subs	r1, r2, r1
 8004806:	6439      	str	r1, [r7, #64]	@ 0x40
 8004808:	4629      	mov	r1, r5
 800480a:	eb63 0301 	sbc.w	r3, r3, r1
 800480e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800481c:	4649      	mov	r1, r9
 800481e:	018b      	lsls	r3, r1, #6
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004826:	4641      	mov	r1, r8
 8004828:	018a      	lsls	r2, r1, #6
 800482a:	4641      	mov	r1, r8
 800482c:	1a51      	subs	r1, r2, r1
 800482e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004830:	4649      	mov	r1, r9
 8004832:	eb63 0301 	sbc.w	r3, r3, r1
 8004836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004844:	4649      	mov	r1, r9
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4641      	mov	r1, r8
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4641      	mov	r1, r8
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4622      	mov	r2, r4
 800485a:	189b      	adds	r3, r3, r2
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
 800485e:	462b      	mov	r3, r5
 8004860:	460a      	mov	r2, r1
 8004862:	eb42 0303 	adc.w	r3, r2, r3
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004874:	4629      	mov	r1, r5
 8004876:	024b      	lsls	r3, r1, #9
 8004878:	4621      	mov	r1, r4
 800487a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800487e:	4621      	mov	r1, r4
 8004880:	024a      	lsls	r2, r1, #9
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004894:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004898:	f7fc f8a0 	bl	80009dc <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048a6:	e067      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a8:	4b75      	ldr	r3, [pc, #468]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80048b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048c2:	2300      	movs	r3, #0
 80048c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80048ca:	4622      	mov	r2, r4
 80048cc:	462b      	mov	r3, r5
 80048ce:	f04f 0000 	mov.w	r0, #0
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	0159      	lsls	r1, r3, #5
 80048d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048dc:	0150      	lsls	r0, r2, #5
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4621      	mov	r1, r4
 80048e4:	1a51      	subs	r1, r2, r1
 80048e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80048fc:	4649      	mov	r1, r9
 80048fe:	018b      	lsls	r3, r1, #6
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004906:	4641      	mov	r1, r8
 8004908:	018a      	lsls	r2, r1, #6
 800490a:	4641      	mov	r1, r8
 800490c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004910:	4649      	mov	r1, r9
 8004912:	eb63 0b01 	sbc.w	fp, r3, r1
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004922:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492a:	4692      	mov	sl, r2
 800492c:	469b      	mov	fp, r3
 800492e:	4623      	mov	r3, r4
 8004930:	eb1a 0303 	adds.w	r3, sl, r3
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	462b      	mov	r3, r5
 8004938:	eb4b 0303 	adc.w	r3, fp, r3
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800494a:	4629      	mov	r1, r5
 800494c:	028b      	lsls	r3, r1, #10
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004954:	4621      	mov	r1, r4
 8004956:	028a      	lsls	r2, r1, #10
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004960:	2200      	movs	r2, #0
 8004962:	673b      	str	r3, [r7, #112]	@ 0x70
 8004964:	677a      	str	r2, [r7, #116]	@ 0x74
 8004966:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800496a:	f7fc f837 	bl	80009dc <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4613      	mov	r3, r2
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004978:	4b41      	ldr	r3, [pc, #260]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800498a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800498e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004992:	fbb2 f3f3 	udiv	r3, r2, r3
 8004996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800499a:	e0eb      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800499c:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a8:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d06b      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b4:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x354>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	2200      	movs	r2, #0
 80049bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80049c8:	2300      	movs	r3, #0
 80049ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80049cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80049d0:	4622      	mov	r2, r4
 80049d2:	462b      	mov	r3, r5
 80049d4:	f04f 0000 	mov.w	r0, #0
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e2:	0150      	lsls	r0, r2, #5
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4621      	mov	r1, r4
 80049ea:	1a51      	subs	r1, r2, r1
 80049ec:	61b9      	str	r1, [r7, #24]
 80049ee:	4629      	mov	r1, r5
 80049f0:	eb63 0301 	sbc.w	r3, r3, r1
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a02:	4659      	mov	r1, fp
 8004a04:	018b      	lsls	r3, r1, #6
 8004a06:	4651      	mov	r1, sl
 8004a08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	018a      	lsls	r2, r1, #6
 8004a10:	4651      	mov	r1, sl
 8004a12:	ebb2 0801 	subs.w	r8, r2, r1
 8004a16:	4659      	mov	r1, fp
 8004a18:	eb63 0901 	sbc.w	r9, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a30:	4690      	mov	r8, r2
 8004a32:	4699      	mov	r9, r3
 8004a34:	4623      	mov	r3, r4
 8004a36:	eb18 0303 	adds.w	r3, r8, r3
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	eb49 0303 	adc.w	r3, r9, r3
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a50:	4629      	mov	r1, r5
 8004a52:	024b      	lsls	r3, r1, #9
 8004a54:	4621      	mov	r1, r4
 8004a56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	024a      	lsls	r2, r1, #9
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a66:	2200      	movs	r2, #0
 8004a68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a70:	f7fb ffb4 	bl	80009dc <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a7e:	e065      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x420>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	2200      	movs	r2, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	4611      	mov	r1, r2
 8004a98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aa2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	f04f 0000 	mov.w	r0, #0
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	0159      	lsls	r1, r3, #5
 8004ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab8:	0150      	lsls	r0, r2, #5
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1a51      	subs	r1, r2, r1
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ad8:	4659      	mov	r1, fp
 8004ada:	018b      	lsls	r3, r1, #6
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	018a      	lsls	r2, r1, #6
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	1a54      	subs	r4, r2, r1
 8004aea:	4659      	mov	r1, fp
 8004aec:	eb63 0501 	sbc.w	r5, r3, r1
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b34:	2200      	movs	r2, #0
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b3e:	f7fb ff4d 	bl	80009dc <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4613      	mov	r3, r2
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0f1b      	lsrs	r3, r3, #28
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b6a:	e003      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	37b8      	adds	r7, #184	@ 0xb8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	00f42400 	.word	0x00f42400

08004b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e28d      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8083 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bac:	4b94      	ldr	r3, [pc, #592]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d019      	beq.n	8004bec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bb8:	4b91      	ldr	r3, [pc, #580]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd0:	d00c      	beq.n	8004bec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d112      	bne.n	8004c04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bde:	4b88      	ldr	r3, [pc, #544]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bea:	d10b      	bne.n	8004c04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	4b84      	ldr	r3, [pc, #528]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05b      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x124>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d157      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e25a      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d106      	bne.n	8004c1c <HAL_RCC_OscConfig+0x90>
 8004c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7b      	ldr	r2, [pc, #492]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e01d      	b.n	8004c58 <HAL_RCC_OscConfig+0xcc>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0xb4>
 8004c26:	4b76      	ldr	r3, [pc, #472]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a75      	ldr	r2, [pc, #468]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b73      	ldr	r3, [pc, #460]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a72      	ldr	r2, [pc, #456]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCC_OscConfig+0xcc>
 8004c40:	4b6f      	ldr	r3, [pc, #444]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6e      	ldr	r2, [pc, #440]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a6b      	ldr	r2, [pc, #428]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fc fdd2 	bl	8001808 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c68:	f7fc fdce 	bl	8001808 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	@ 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e21f      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b61      	ldr	r3, [pc, #388]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0xdc>
 8004c86:	e014      	b.n	8004cb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc fdbe 	bl	8001808 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c90:	f7fc fdba 	bl	8001808 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	@ 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e20b      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	4b57      	ldr	r3, [pc, #348]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x104>
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d06f      	beq.n	8004d9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cbe:	4b50      	ldr	r3, [pc, #320]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d017      	beq.n	8004cfa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004cca:	4b4d      	ldr	r3, [pc, #308]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
        || \
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d105      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce2:	4b47      	ldr	r3, [pc, #284]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d11c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cee:	4b44      	ldr	r3, [pc, #272]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d116      	bne.n	8004d28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	4b41      	ldr	r3, [pc, #260]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_RCC_OscConfig+0x186>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1d3      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b3b      	ldr	r3, [pc, #236]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4937      	ldr	r1, [pc, #220]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	e03a      	b.n	8004d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d30:	4b34      	ldr	r3, [pc, #208]	@ (8004e04 <HAL_RCC_OscConfig+0x278>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fc fd67 	bl	8001808 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fc fd63 	bl	8001808 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1b4      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b28      	ldr	r3, [pc, #160]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4925      	ldr	r1, [pc, #148]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b24      	ldr	r3, [pc, #144]	@ (8004e04 <HAL_RCC_OscConfig+0x278>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fd46 	bl	8001808 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fc fd42 	bl	8001808 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e193      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d036      	beq.n	8004e18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fc fd26 	bl	8001808 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fc fd22 	bl	8001808 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e173      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x234>
 8004dde:	e01b      	b.n	8004e18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de0:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <HAL_RCC_OscConfig+0x27c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fc fd0f 	bl	8001808 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	e00e      	b.n	8004e0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dee:	f7fc fd0b 	bl	8001808 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d907      	bls.n	8004e0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e15c      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470000 	.word	0x42470000
 8004e08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0c:	4b8a      	ldr	r3, [pc, #552]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ea      	bne.n	8004dee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8097 	beq.w	8004f54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	2300      	movs	r3, #0
 8004e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2a:	4b83      	ldr	r3, [pc, #524]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e46:	4b7c      	ldr	r3, [pc, #496]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e56:	4b79      	ldr	r3, [pc, #484]	@ (800503c <HAL_RCC_OscConfig+0x4b0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e62:	4b76      	ldr	r3, [pc, #472]	@ (800503c <HAL_RCC_OscConfig+0x4b0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a75      	ldr	r2, [pc, #468]	@ (800503c <HAL_RCC_OscConfig+0x4b0>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fc fccb 	bl	8001808 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fc fcc7 	bl	8001808 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e118      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b6c      	ldr	r3, [pc, #432]	@ (800503c <HAL_RCC_OscConfig+0x4b0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x31e>
 8004e9c:	4b66      	ldr	r3, [pc, #408]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a65      	ldr	r2, [pc, #404]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea8:	e01c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x358>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x340>
 8004eb2:	4b61      	ldr	r3, [pc, #388]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	4a60      	ldr	r2, [pc, #384]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x358>
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	4a59      	ldr	r2, [pc, #356]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed8:	4b57      	ldr	r3, [pc, #348]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a56      	ldr	r2, [pc, #344]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ede:	f023 0304 	bic.w	r3, r3, #4
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc fc8c 	bl	8001808 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc fc88 	bl	8001808 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0d7      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x368>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fc fc76 	bl	8001808 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fc fc72 	bl	8001808 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0c1      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f36:	4b40      	ldr	r3, [pc, #256]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ee      	bne.n	8004f20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f48:	4b3b      	ldr	r3, [pc, #236]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80ad 	beq.w	80050b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5e:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d060      	beq.n	800502c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d145      	bne.n	8004ffe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f72:	4b33      	ldr	r3, [pc, #204]	@ (8005040 <HAL_RCC_OscConfig+0x4b4>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fc fc46 	bl	8001808 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fc fc42 	bl	8001808 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e093      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	4b29      	ldr	r3, [pc, #164]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	071b      	lsls	r3, r3, #28
 8004fca:	491b      	ldr	r1, [pc, #108]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <HAL_RCC_OscConfig+0x4b4>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fc17 	bl	8001808 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fc13 	bl	8001808 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e064      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff0:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x452>
 8004ffc:	e05c      	b.n	80050b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b10      	ldr	r3, [pc, #64]	@ (8005040 <HAL_RCC_OscConfig+0x4b4>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc fc00 	bl	8001808 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fc fbfc 	bl	8001808 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e04d      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x480>
 800502a:	e045      	b.n	80050b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e040      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
 8005038:	40023800 	.word	0x40023800
 800503c:	40007000 	.word	0x40007000
 8005040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005044:	4b1f      	ldr	r3, [pc, #124]	@ (80050c4 <HAL_RCC_OscConfig+0x538>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d030      	beq.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d129      	bne.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d122      	bne.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800507a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800507c:	4293      	cmp	r3, r2
 800507e:	d119      	bne.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	3b01      	subs	r3, #1
 800508e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d10f      	bne.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800

080050c8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d904      	bls.n	80050ea <HAL_SAI_InitProtocol+0x22>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	3b03      	subs	r3, #3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d812      	bhi.n	800510e <HAL_SAI_InitProtocol+0x46>
 80050e8:	e008      	b.n	80050fc <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fa13 	bl	800551c <SAI_InitI2S>
 80050f6:	4603      	mov	r3, r0
 80050f8:	75fb      	strb	r3, [r7, #23]
      break;
 80050fa:	e00b      	b.n	8005114 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fab8 	bl	8005678 <SAI_InitPCM>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]
      break;
 800510c:	e002      	b.n	8005114 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
      break;
 8005112:	bf00      	nop
  }

  if (status == HAL_OK)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f808 	bl	8005130 <HAL_SAI_Init>
 8005120:	4603      	mov	r3, r0
 8005122:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005124:	7dfb      	ldrb	r3, [r7, #23]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e10c      	b.n	800536c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc f83c 	bl	80011e4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fb35 	bl	80057e4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fbdc 	bl	8005938 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d030      	beq.n	80051ea <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fc19 	bl	80059c0 <SAI_GetInputClock>
 800518e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	461a      	mov	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	025b      	lsls	r3, r3, #9
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a72      	ldr	r2, [pc, #456]	@ (8005374 <HAL_SAI_Init+0x244>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	08da      	lsrs	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005374 <HAL_SAI_Init+0x244>)
 80051ba:	fba3 2301 	umull	r2, r3, r3, r1
 80051be:	08da      	lsrs	r2, r3, #3
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	1aca      	subs	r2, r1, r3
 80051ca:	2a08      	cmp	r2, #8
 80051cc:	d904      	bls.n	80051d8 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d104      	bne.n	80051ea <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	085a      	lsrs	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_SAI_Init+0xca>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d109      	bne.n	800520e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_SAI_Init+0xd6>
 8005202:	2300      	movs	r3, #0
 8005204:	e001      	b.n	800520a <HAL_SAI_Init+0xda>
 8005206:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e008      	b.n	8005220 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2b01      	cmp	r3, #1
 8005214:	d102      	bne.n	800521c <HAL_SAI_Init+0xec>
 8005216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800521a:	e000      	b.n	800521e <HAL_SAI_Init+0xee>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d811      	bhi.n	800524c <HAL_SAI_Init+0x11c>
 8005228:	2b02      	cmp	r3, #2
 800522a:	d20b      	bcs.n	8005244 <HAL_SAI_Init+0x114>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_SAI_Init+0x106>
 8005230:	2b01      	cmp	r3, #1
 8005232:	d003      	beq.n	800523c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8005234:	e00a      	b.n	800524c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
    break;
 800523a:	e008      	b.n	800524e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800523c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005240:	613b      	str	r3, [r7, #16]
    break;
 8005242:	e004      	b.n	800524e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005248:	613b      	str	r3, [r7, #16]
    break;
 800524a:	e000      	b.n	800524e <HAL_SAI_Init+0x11e>
      break;
 800524c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b47      	ldr	r3, [pc, #284]	@ (8005378 <HAL_SAI_Init+0x248>)
 800525a:	400b      	ands	r3, r1
 800525c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005272:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	431a      	orrs	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8005286:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005292:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	051b      	lsls	r3, r3, #20
 800529a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80052b2:	f023 030f 	bic.w	r3, r3, #15
 80052b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b26      	ldr	r3, [pc, #152]	@ (800537c <HAL_SAI_Init+0x24c>)
 80052e2:	400b      	ands	r3, r1
 80052e4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80052f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80052fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8005302:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005308:	3b01      	subs	r3, #1
 800530a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800530c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68d9      	ldr	r1, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005324:	400b      	ands	r3, r1
 8005326:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005336:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800533c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800533e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005344:	3b01      	subs	r3, #1
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	cccccccd 	.word	0xcccccccd
 8005378:	ff05c010 	.word	0xff05c010
 800537c:	fff88000 	.word	0xfff88000

08005380 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7fc fa3b 	bl	8001808 <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SAI_Transmit_DMA+0x20>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e093      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 808c 	bne.w	80054ca <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_SAI_Transmit_DMA+0x40>
 80053bc:	2302      	movs	r3, #2
 80053be:	e085      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2212      	movs	r2, #18
 80053ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	4a38      	ldr	r2, [pc, #224]	@ (80054d4 <HAL_SAI_Transmit_DMA+0x154>)
 80053f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <HAL_SAI_Transmit_DMA+0x158>)
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005402:	4a36      	ldr	r2, [pc, #216]	@ (80054dc <HAL_SAI_Transmit_DMA+0x15c>)
 8005404:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	2200      	movs	r2, #0
 800540c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005416:	4619      	mov	r1, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	331c      	adds	r3, #28
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8005426:	f7fc fbe5 	bl	8001bf4 <HAL_DMA_Start_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e047      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800543c:	2100      	movs	r1, #0
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f99a 	bl	8005778 <SAI_InterruptFlag>
 8005444:	4601      	mov	r1, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005462:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005464:	e015      	b.n	8005492 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005466:	f7fc f9cf 	bl	8001808 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005474:	d90d      	bls.n	8005492 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e01c      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0e2      	beq.n	8005466 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080058b5 	.word	0x080058b5
 80054d8:	08005855 	.word	0x08005855
 80054dc:	080058d1 	.word	0x080058d1

080054e0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <SAI_InitI2S+0x2a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d103      	bne.n	800554e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
 800554c:	e002      	b.n	8005554 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800555a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005562:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e076      	b.n	800566c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005590:	655a      	str	r2, [r3, #84]	@ 0x54
 8005592:	e006      	b.n	80055a2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800559a:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d84f      	bhi.n	8005648 <SAI_InitI2S+0x12c>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <SAI_InitI2S+0x94>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055e3 	.word	0x080055e3
 80055b8:	08005605 	.word	0x08005605
 80055bc:	08005627 	.word	0x08005627
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2280      	movs	r2, #128	@ 0x80
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	011a      	lsls	r2, r3, #4
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2240      	movs	r2, #64	@ 0x40
 80055de:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80055e0:	e034      	b.n	800564c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2280      	movs	r2, #128	@ 0x80
 80055e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	019a      	lsls	r2, r3, #6
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2280      	movs	r2, #128	@ 0x80
 8005600:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005602:	e023      	b.n	800564c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	22c0      	movs	r2, #192	@ 0xc0
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	019a      	lsls	r2, r3, #6
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005624:	e012      	b.n	800564c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22e0      	movs	r2, #224	@ 0xe0
 800562a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	019a      	lsls	r2, r3, #6
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2280      	movs	r2, #128	@ 0x80
 8005644:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005646:	e001      	b.n	800564c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e00f      	b.n	800566c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d10b      	bne.n	800566a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2210      	movs	r2, #16
 800565c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d102      	bne.n	800566a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2208      	movs	r2, #8
 8005668:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <SAI_InitPCM+0x2a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d103      	bne.n	80056aa <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80056a8:	e002      	b.n	80056b0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80056c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d8:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d103      	bne.n	80056e8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80056e6:	e002      	b.n	80056ee <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	220d      	movs	r2, #13
 80056ec:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d837      	bhi.n	8005764 <SAI_InitPCM+0xec>
 80056f4:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <SAI_InitPCM+0x84>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	08005723 	.word	0x08005723
 8005704:	08005739 	.word	0x08005739
 8005708:	0800574f 	.word	0x0800574f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2280      	movs	r2, #128	@ 0x80
 8005710:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	011a      	lsls	r2, r3, #4
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2240      	movs	r2, #64	@ 0x40
 800571e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005720:	e022      	b.n	8005768 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2280      	movs	r2, #128	@ 0x80
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2280      	movs	r2, #128	@ 0x80
 8005734:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005736:	e017      	b.n	8005768 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	22c0      	movs	r2, #192	@ 0xc0
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2280      	movs	r2, #128	@ 0x80
 800574a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800574c:	e00c      	b.n	8005768 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	22e0      	movs	r2, #224	@ 0xe0
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2280      	movs	r2, #128	@ 0x80
 8005760:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8005762:	e001      	b.n	8005768 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop

08005778 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005782:	2301      	movs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d103      	bne.n	8005794 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f043 0308 	orr.w	r3, r3, #8
 8005792:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005798:	2b08      	cmp	r3, #8
 800579a:	d10b      	bne.n	80057b4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d003      	beq.n	80057ac <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d103      	bne.n	80057b4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f043 0310 	orr.w	r3, r3, #16
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d003      	beq.n	80057c4 <SAI_InterruptFlag+0x4c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d104      	bne.n	80057ce <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e003      	b.n	80057d6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80057ec:	4b17      	ldr	r3, [pc, #92]	@ (800584c <SAI_Disable+0x68>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a17      	ldr	r2, [pc, #92]	@ (8005850 <SAI_Disable+0x6c>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0b1b      	lsrs	r3, r3, #12
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800580e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e5a      	subs	r2, r3, #1
 8005814:	60fa      	str	r2, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	72fb      	strb	r3, [r7, #11]
      break;
 800582e:	e006      	b.n	800583e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e8      	bne.n	8005810 <SAI_Disable+0x2c>

  return status;
 800583e:	7afb      	ldrb	r3, [r7, #11]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	20000000 	.word	0x20000000
 8005850:	95cbec1b 	.word	0x95cbec1b

08005854 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d01c      	beq.n	80058a6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005882:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005884:	2100      	movs	r1, #0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff ff76 	bl	8005778 <SAI_InterruptFlag>
 800588c:	4603      	mov	r3, r0
 800588e:	43d9      	mvns	r1, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	400a      	ands	r2, r1
 800589c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fe1a 	bl	80054e0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fe16 	bl	80054f4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d004      	beq.n	8005902 <SAI_DMAError+0x32>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d112      	bne.n	8005928 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005910:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff ff66 	bl	80057e4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff fded 	bl	8005508 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d00c      	beq.n	8005962 <SAI_BlockSynchroConfig+0x2a>
 8005948:	2b02      	cmp	r3, #2
 800594a:	d80d      	bhi.n	8005968 <SAI_BlockSynchroConfig+0x30>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <SAI_BlockSynchroConfig+0x1e>
 8005950:	2b01      	cmp	r3, #1
 8005952:	d003      	beq.n	800595c <SAI_BlockSynchroConfig+0x24>
 8005954:	e008      	b.n	8005968 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
      break;
 800595a:	e008      	b.n	800596e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800595c:	2310      	movs	r3, #16
 800595e:	60fb      	str	r3, [r7, #12]
      break;
 8005960:	e005      	b.n	800596e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005962:	2320      	movs	r3, #32
 8005964:	60fb      	str	r3, [r7, #12]
      break;
 8005966:	e002      	b.n	800596e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
      break;
 800596c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d103      	bne.n	800597e <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a0b      	ldr	r2, [pc, #44]	@ (80059b0 <SAI_BlockSynchroConfig+0x78>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <SAI_BlockSynchroConfig+0x5a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a09      	ldr	r2, [pc, #36]	@ (80059b4 <SAI_BlockSynchroConfig+0x7c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d103      	bne.n	800599a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8005992:	4a09      	ldr	r2, [pc, #36]	@ (80059b8 <SAI_BlockSynchroConfig+0x80>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e003      	b.n	80059a2 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800599a:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <SAI_BlockSynchroConfig+0x84>)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40015804 	.word	0x40015804
 80059b4:	40015824 	.word	0x40015824
 80059b8:	40015800 	.word	0x40015800
 80059bc:	40015c00 	.word	0x40015c00

080059c0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	@ (80059fc <SAI_GetInputClock+0x3c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <SAI_GetInputClock+0x20>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <SAI_GetInputClock+0x40>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d104      	bne.n	80059ea <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80059e0:	2004      	movs	r0, #4
 80059e2:	f7fe fc59 	bl	8004298 <HAL_RCCEx_GetPeriphCLKFreq>
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	e003      	b.n	80059f2 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80059ea:	2008      	movs	r0, #8
 80059ec:	f7fe fc54 	bl	8004298 <HAL_RCCEx_GetPeriphCLKFreq>
 80059f0:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40015804 	.word	0x40015804
 8005a00:	40015824 	.word	0x40015824

08005a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e042      	b.n	8005a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fb fe14 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	@ 0x24
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f973 	bl	8005d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d175      	bne.n	8005bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_UART_Transmit+0x2c>
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e06e      	b.n	8005bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	@ 0x21
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae2:	f7fb fe91 	bl	8001808 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afc:	d108      	bne.n	8005b10 <HAL_UART_Transmit+0x6c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e003      	b.n	8005b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b18:	e02e      	b.n	8005b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	@ 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f848 	bl	8005bba <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e03a      	b.n	8005bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3302      	adds	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e007      	b.n	8005b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cb      	bne.n	8005b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2140      	movs	r1, #64	@ 0x40
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f814 	bl	8005bba <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e006      	b.n	8005bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bca:	e03b      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d037      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7fb fe18 	bl	8001808 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <UART_WaitOnFlagUntilTimeout+0x30>
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e03a      	b.n	8005c64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d023      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	d020      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b40      	cmp	r3, #64	@ 0x40
 8005c06:	d01d      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d116      	bne.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f81d 	bl	8005c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2208      	movs	r2, #8
 8005c36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e00f      	b.n	8005c64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d0b4      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b095      	sub	sp, #84	@ 0x54
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	330c      	adds	r3, #12
 8005c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d119      	bne.n	8005d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
 8005cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d04:	61ba      	str	r2, [r7, #24]
 8005d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d26:	bf00      	nop
 8005d28:	3754      	adds	r7, #84	@ 0x54
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b0c0      	sub	sp, #256	@ 0x100
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	ea40 0301 	orr.w	r3, r0, r1
 8005d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d8c:	f021 010c 	bic.w	r1, r1, #12
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	6999      	ldr	r1, [r3, #24]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	ea40 0301 	orr.w	r3, r0, r1
 8005dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8006000 <UART_SetConfig+0x2cc>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <UART_SetConfig+0xa0>
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8d      	ldr	r3, [pc, #564]	@ (8006004 <UART_SetConfig+0x2d0>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d104      	bne.n	8005dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fd ff22 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ddc:	e003      	b.n	8005de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fd ff09 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8005de2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df0:	f040 810c 	bne.w	800600c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e16:	4621      	mov	r1, r4
 8005e18:	eb12 0801 	adds.w	r8, r2, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb43 0901 	adc.w	r9, r3, r1
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	eb18 0303 	adds.w	r3, r8, r3
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e44:	462b      	mov	r3, r5
 8005e46:	eb49 0303 	adc.w	r3, r9, r3
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e62:	460b      	mov	r3, r1
 8005e64:	18db      	adds	r3, r3, r3
 8005e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e68:	4613      	mov	r3, r2
 8005e6a:	eb42 0303 	adc.w	r3, r2, r3
 8005e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e78:	f7fa fdb0 	bl	80009dc <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4b61      	ldr	r3, [pc, #388]	@ (8006008 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011c      	lsls	r4, r3, #4
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eac:	4641      	mov	r1, r8
 8005eae:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ecc:	4692      	mov	sl, r2
 8005ece:	469b      	mov	fp, r3
 8005ed0:	4643      	mov	r3, r8
 8005ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	18db      	adds	r3, r3, r3
 8005efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005efe:	4613      	mov	r3, r2
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f0e:	f7fa fd65 	bl	80009dc <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	4b3b      	ldr	r3, [pc, #236]	@ (8006008 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2264      	movs	r2, #100	@ 0x64
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	1acb      	subs	r3, r1, r3
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f2e:	4b36      	ldr	r3, [pc, #216]	@ (8006008 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 2302 	umull	r2, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	18db      	adds	r3, r3, r3
 8005fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fba:	4613      	mov	r3, r2
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fca:	f7fa fd07 	bl	80009dc <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	@ 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	@ 0x32
 8005fe6:	4a08      	ldr	r2, [pc, #32]	@ (8006008 <UART_SetConfig+0x2d4>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4422      	add	r2, r4
 8005ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffc:	e106      	b.n	800620c <UART_SetConfig+0x4d8>
 8005ffe:	bf00      	nop
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800601a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	6239      	str	r1, [r7, #32]
 8006026:	415b      	adcs	r3, r3
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
 800602a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602e:	4641      	mov	r1, r8
 8006030:	1854      	adds	r4, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0501 	adc.w	r5, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	00eb      	lsls	r3, r5, #3
 8006042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006046:	00e2      	lsls	r2, r4, #3
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	4643      	mov	r3, r8
 800604e:	18e3      	adds	r3, r4, r3
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006054:	464b      	mov	r3, r9
 8006056:	eb45 0303 	adc.w	r3, r5, r3
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800607a:	4629      	mov	r1, r5
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006084:	4621      	mov	r1, r4
 8006086:	008a      	lsls	r2, r1, #2
 8006088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800608c:	f7fa fca6 	bl	80009dc <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4b60      	ldr	r3, [pc, #384]	@ (8006218 <UART_SetConfig+0x4e4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	011c      	lsls	r4, r3, #4
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	61b9      	str	r1, [r7, #24]
 80060b8:	415b      	adcs	r3, r3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6139      	str	r1, [r7, #16]
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800610a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006118:	4649      	mov	r1, r9
 800611a:	008b      	lsls	r3, r1, #2
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006122:	4641      	mov	r1, r8
 8006124:	008a      	lsls	r2, r1, #2
 8006126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800612a:	f7fa fc57 	bl	80009dc <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4611      	mov	r1, r2
 8006134:	4b38      	ldr	r3, [pc, #224]	@ (8006218 <UART_SetConfig+0x4e4>)
 8006136:	fba3 2301 	umull	r2, r3, r3, r1
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	2264      	movs	r2, #100	@ 0x64
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	3332      	adds	r3, #50	@ 0x32
 8006148:	4a33      	ldr	r2, [pc, #204]	@ (8006218 <UART_SetConfig+0x4e4>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006154:	441c      	add	r4, r3
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	673b      	str	r3, [r7, #112]	@ 0x70
 800615e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	415b      	adcs	r3, r3
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006174:	4641      	mov	r1, r8
 8006176:	1851      	adds	r1, r2, r1
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	4649      	mov	r1, r9
 800617c:	414b      	adcs	r3, r1
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800618c:	4659      	mov	r1, fp
 800618e:	00cb      	lsls	r3, r1, #3
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006196:	4651      	mov	r1, sl
 8006198:	00ca      	lsls	r2, r1, #3
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	4642      	mov	r2, r8
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061a6:	464b      	mov	r3, r9
 80061a8:	460a      	mov	r2, r1
 80061aa:	eb42 0303 	adc.w	r3, r2, r3
 80061ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061c8:	4649      	mov	r1, r9
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	4641      	mov	r1, r8
 80061ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d2:	4641      	mov	r1, r8
 80061d4:	008a      	lsls	r2, r1, #2
 80061d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061da:	f7fa fbff 	bl	80009dc <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <UART_SetConfig+0x4e4>)
 80061e4:	fba3 1302 	umull	r1, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	2164      	movs	r1, #100	@ 0x64
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	3332      	adds	r3, #50	@ 0x32
 80061f6:	4a08      	ldr	r2, [pc, #32]	@ (8006218 <UART_SetConfig+0x4e4>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f003 020f 	and.w	r2, r3, #15
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4422      	add	r2, r4
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006218:	51eb851f 	.word	0x51eb851f

0800621c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 001c 	add.w	r0, r7, #28
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006232:	2b01      	cmp	r3, #1
 8006234:	d123      	bne.n	800627e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800624a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800625e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fae2 	bl	800783c <USB_CoreReset>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e01b      	b.n	80062b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fad6 	bl	800783c <USB_CoreReset>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006294:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80062a8:	e005      	b.n	80062b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062b6:	7fbb      	ldrb	r3, [r7, #30]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d10b      	bne.n	80062d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f043 0206 	orr.w	r2, r3, #6
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e0:	b004      	add	sp, #16
 80062e2:	4770      	bx	lr

080062e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d165      	bne.n	80063c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a41      	ldr	r2, [pc, #260]	@ (8006400 <USB_SetTurnaroundTime+0x11c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d906      	bls.n	800630e <USB_SetTurnaroundTime+0x2a>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a40      	ldr	r2, [pc, #256]	@ (8006404 <USB_SetTurnaroundTime+0x120>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d202      	bcs.n	800630e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006308:	230f      	movs	r3, #15
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e062      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a3c      	ldr	r2, [pc, #240]	@ (8006404 <USB_SetTurnaroundTime+0x120>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d306      	bcc.n	8006324 <USB_SetTurnaroundTime+0x40>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a3b      	ldr	r2, [pc, #236]	@ (8006408 <USB_SetTurnaroundTime+0x124>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d202      	bcs.n	8006324 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800631e:	230e      	movs	r3, #14
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e057      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a38      	ldr	r2, [pc, #224]	@ (8006408 <USB_SetTurnaroundTime+0x124>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d306      	bcc.n	800633a <USB_SetTurnaroundTime+0x56>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a37      	ldr	r2, [pc, #220]	@ (800640c <USB_SetTurnaroundTime+0x128>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d202      	bcs.n	800633a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006334:	230d      	movs	r3, #13
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e04c      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a33      	ldr	r2, [pc, #204]	@ (800640c <USB_SetTurnaroundTime+0x128>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d306      	bcc.n	8006350 <USB_SetTurnaroundTime+0x6c>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a32      	ldr	r2, [pc, #200]	@ (8006410 <USB_SetTurnaroundTime+0x12c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d802      	bhi.n	8006350 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800634a:	230c      	movs	r3, #12
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e041      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a2f      	ldr	r2, [pc, #188]	@ (8006410 <USB_SetTurnaroundTime+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d906      	bls.n	8006366 <USB_SetTurnaroundTime+0x82>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a2e      	ldr	r2, [pc, #184]	@ (8006414 <USB_SetTurnaroundTime+0x130>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d802      	bhi.n	8006366 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006360:	230b      	movs	r3, #11
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e036      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a2a      	ldr	r2, [pc, #168]	@ (8006414 <USB_SetTurnaroundTime+0x130>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d906      	bls.n	800637c <USB_SetTurnaroundTime+0x98>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a29      	ldr	r2, [pc, #164]	@ (8006418 <USB_SetTurnaroundTime+0x134>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d802      	bhi.n	800637c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006376:	230a      	movs	r3, #10
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e02b      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a26      	ldr	r2, [pc, #152]	@ (8006418 <USB_SetTurnaroundTime+0x134>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d906      	bls.n	8006392 <USB_SetTurnaroundTime+0xae>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a25      	ldr	r2, [pc, #148]	@ (800641c <USB_SetTurnaroundTime+0x138>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d202      	bcs.n	8006392 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800638c:	2309      	movs	r3, #9
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e020      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4a21      	ldr	r2, [pc, #132]	@ (800641c <USB_SetTurnaroundTime+0x138>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d306      	bcc.n	80063a8 <USB_SetTurnaroundTime+0xc4>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a20      	ldr	r2, [pc, #128]	@ (8006420 <USB_SetTurnaroundTime+0x13c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d802      	bhi.n	80063a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063a2:	2308      	movs	r3, #8
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e015      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <USB_SetTurnaroundTime+0x13c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d906      	bls.n	80063be <USB_SetTurnaroundTime+0xda>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006424 <USB_SetTurnaroundTime+0x140>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d202      	bcs.n	80063be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063b8:	2307      	movs	r3, #7
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e00a      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063be:	2306      	movs	r3, #6
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e007      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063ca:	2309      	movs	r3, #9
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e001      	b.n	80063d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063d0:	2309      	movs	r3, #9
 80063d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80063ec:	431a      	orrs	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	00d8acbf 	.word	0x00d8acbf
 8006404:	00e4e1c0 	.word	0x00e4e1c0
 8006408:	00f42400 	.word	0x00f42400
 800640c:	01067380 	.word	0x01067380
 8006410:	011a499f 	.word	0x011a499f
 8006414:	01312cff 	.word	0x01312cff
 8006418:	014ca43f 	.word	0x014ca43f
 800641c:	016e3600 	.word	0x016e3600
 8006420:	01a6ab1f 	.word	0x01a6ab1f
 8006424:	01e84800 	.word	0x01e84800

08006428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f043 0201 	orr.w	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d115      	bne.n	80064ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800649a:	200a      	movs	r0, #10
 800649c:	f7fb f9c0 	bl	8001820 <HAL_Delay>
      ms += 10U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	330a      	adds	r3, #10
 80064a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f939 	bl	800771e <USB_GetMode>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d01e      	beq.n	80064f0 <USB_SetCurrentMode+0x84>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80064b6:	d9f0      	bls.n	800649a <USB_SetCurrentMode+0x2e>
 80064b8:	e01a      	b.n	80064f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d115      	bne.n	80064ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064cc:	200a      	movs	r0, #10
 80064ce:	f7fb f9a7 	bl	8001820 <HAL_Delay>
      ms += 10U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	330a      	adds	r3, #10
 80064d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f920 	bl	800771e <USB_GetMode>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <USB_SetCurrentMode+0x84>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80064e8:	d9f0      	bls.n	80064cc <USB_SetCurrentMode+0x60>
 80064ea:	e001      	b.n	80064f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e005      	b.n	80064fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80064f4:	d101      	bne.n	80064fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006504:	b084      	sub	sp, #16
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e009      	b.n	8006538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3340      	adds	r3, #64	@ 0x40
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b0e      	cmp	r3, #14
 800653c:	d9f2      	bls.n	8006524 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800653e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11c      	bne.n	8006580 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e005      	b.n	800658c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006592:	461a      	mov	r2, r3
 8006594:	2300      	movs	r3, #0
 8006596:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006598:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10d      	bne.n	80065bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f968 	bl	8006880 <USB_SetDevSpeed>
 80065b0:	e008      	b.n	80065c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f963 	bl	8006880 <USB_SetDevSpeed>
 80065ba:	e003      	b.n	80065c4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065bc:	2103      	movs	r1, #3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f95e 	bl	8006880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065c4:	2110      	movs	r1, #16
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8fa 	bl	80067c0 <USB_FlushTxFifo>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f924 	bl	8006824 <USB_FlushRxFifo>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e043      	b.n	8006698 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006626:	d118      	bne.n	800665a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e013      	b.n	800666c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e008      	b.n	800666c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3301      	adds	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800669c:	461a      	mov	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d3b5      	bcc.n	8006610 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e043      	b.n	8006732 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c0:	d118      	bne.n	80066f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e013      	b.n	8006706 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ea:	461a      	mov	r2, r3
 80066ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e008      	b.n	8006706 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800672a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006736:	461a      	mov	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4293      	cmp	r3, r2
 800673c:	d3b5      	bcc.n	80066aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800674c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006750:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800675e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 0210 	orr.w	r2, r3, #16
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <USB_DevInit+0x2b8>)
 800677a:	4313      	orrs	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006780:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f043 0208 	orr.w	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006798:	2b01      	cmp	r3, #1
 800679a:	d107      	bne.n	80067ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b8:	b004      	add	sp, #16
 80067ba:	4770      	bx	lr
 80067bc:	803c3800 	.word	0x803c3800

080067c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067da:	d901      	bls.n	80067e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01b      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	daf2      	bge.n	80067ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	019b      	lsls	r3, r3, #6
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006804:	d901      	bls.n	800680a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e006      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d0f0      	beq.n	80067f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800683c:	d901      	bls.n	8006842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e018      	b.n	8006874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	daf2      	bge.n	8006830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2210      	movs	r2, #16
 8006852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006860:	d901      	bls.n	8006866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e006      	b.n	8006874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b10      	cmp	r3, #16
 8006870:	d0f0      	beq.n	8006854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068a0:	4313      	orrs	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0306 	and.w	r3, r3, #6
 80068ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
 80068d6:	e00a      	b.n	80068ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d002      	beq.n	80068e4 <USB_GetDevSpeed+0x32>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d102      	bne.n	80068ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068e4:	2302      	movs	r3, #2
 80068e6:	75fb      	strb	r3, [r7, #23]
 80068e8:	e001      	b.n	80068ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068ea:	230f      	movs	r3, #15
 80068ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d13a      	bne.n	800698e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f303 	lsl.w	r3, r1, r3
 800692e:	b29b      	uxth	r3, r3
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006936:	4313      	orrs	r3, r2
 8006938:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d155      	bne.n	80069fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800696c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	059b      	lsls	r3, r3, #22
 8006972:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006974:	4313      	orrs	r3, r2
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e036      	b.n	80069fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	2101      	movs	r1, #1
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11a      	bne.n	80069fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069e2:	430b      	orrs	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d161      	bne.n	8006aec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a3e:	d11f      	bne.n	8006a80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	0159      	lsls	r1, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4b35      	ldr	r3, [pc, #212]	@ (8006bbc <USB_DeactivateEndpoint+0x1b0>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
 8006aea:	e060      	b.n	8006bae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b02:	d11f      	bne.n	8006b44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b64:	4013      	ands	r3, r2
 8006b66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	43db      	mvns	r3, r3
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	0159      	lsls	r1, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <USB_DeactivateEndpoint+0x1b4>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	ec337800 	.word	0xec337800
 8006bc0:	eff37800 	.word	0xeff37800

08006bc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	@ 0x28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f040 817f 	bne.w	8006ee4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d132      	bne.n	8006c54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4c:	0cdb      	lsrs	r3, r3, #19
 8006c4e:	04db      	lsls	r3, r3, #19
 8006c50:	6113      	str	r3, [r2, #16]
 8006c52:	e097      	b.n	8006d84 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6e:	0cdb      	lsrs	r3, r3, #19
 8006c70:	04db      	lsls	r3, r3, #19
 8006c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c96:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11a      	bne.n	8006cd4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d903      	bls.n	8006cb2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ccc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cd0:	6113      	str	r3, [r2, #16]
 8006cd2:	e044      	b.n	8006d5e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	8afb      	ldrh	r3, [r7, #22]
 8006cfa:	04d9      	lsls	r1, r3, #19
 8006cfc:	4ba4      	ldr	r3, [pc, #656]	@ (8006f90 <USB_EPStartXfer+0x3cc>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	69b9      	ldr	r1, [r7, #24]
 8006d02:	0148      	lsls	r0, r1, #5
 8006d04:	69f9      	ldr	r1, [r7, #28]
 8006d06:	4401      	add	r1, r0
 8006d08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	791b      	ldrb	r3, [r3, #4]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d122      	bne.n	8006d5e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d32:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d36:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	8afb      	ldrh	r3, [r7, #22]
 8006d48:	075b      	lsls	r3, r3, #29
 8006d4a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d4e:	69b9      	ldr	r1, [r7, #24]
 8006d50:	0148      	lsls	r0, r1, #5
 8006d52:	69f9      	ldr	r1, [r7, #28]
 8006d54:	4401      	add	r1, r0
 8006d56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d74:	69b9      	ldr	r1, [r7, #24]
 8006d76:	0148      	lsls	r0, r1, #5
 8006d78:	69f9      	ldr	r1, [r7, #28]
 8006d7a:	4401      	add	r1, r0
 8006d7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d80:	4313      	orrs	r3, r2
 8006d82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d14b      	bne.n	8006e22 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d128      	bne.n	8006e00 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e00f      	b.n	8006e00 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dfe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	e166      	b.n	80070f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e40:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	791b      	ldrb	r3, [r3, #4]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d015      	beq.n	8006e76 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 814e 	beq.w	80070f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	69f9      	ldr	r1, [r7, #28]
 8006e6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e70:	4313      	orrs	r3, r2
 8006e72:	634b      	str	r3, [r1, #52]	@ 0x34
 8006e74:	e13c      	b.n	80070f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d110      	bne.n	8006ea8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e00f      	b.n	8006ec8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	68d9      	ldr	r1, [r3, #12]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	b298      	uxth	r0, r3
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4603      	mov	r3, r0
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f9b9 	bl	8007254 <USB_WritePacket>
 8006ee2:	e105      	b.n	80070f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006efe:	0cdb      	lsrs	r3, r3, #19
 8006f00:	04db      	lsls	r3, r3, #19
 8006f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f1e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f22:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f26:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d132      	bne.n	8006f94 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	0148      	lsls	r0, r1, #5
 8006f60:	69f9      	ldr	r1, [r7, #28]
 8006f62:	4401      	add	r1, r0
 8006f64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f8a:	6113      	str	r3, [r2, #16]
 8006f8c:	e062      	b.n	8007054 <USB_EPStartXfer+0x490>
 8006f8e:	bf00      	nop
 8006f90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d123      	bne.n	8006fe4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa8:	691a      	ldr	r2, [r3, #16]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	0148      	lsls	r0, r1, #5
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	4401      	add	r1, r0
 8006fba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fe0:	6113      	str	r3, [r2, #16]
 8006fe2:	e037      	b.n	8007054 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	1e5a      	subs	r2, r3, #1
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	8afa      	ldrh	r2, [r7, #22]
 8007000:	fb03 f202 	mul.w	r2, r3, r2
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	8afb      	ldrh	r3, [r7, #22]
 8007018:	04d9      	lsls	r1, r3, #19
 800701a:	4b38      	ldr	r3, [pc, #224]	@ (80070fc <USB_EPStartXfer+0x538>)
 800701c:	400b      	ands	r3, r1
 800701e:	69b9      	ldr	r1, [r7, #24]
 8007020:	0148      	lsls	r0, r1, #5
 8007022:	69f9      	ldr	r1, [r7, #28]
 8007024:	4401      	add	r1, r0
 8007026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	0148      	lsls	r0, r1, #5
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	4401      	add	r1, r0
 800704c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007050:	4313      	orrs	r3, r2
 8007052:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10d      	bne.n	8007076 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	68d9      	ldr	r1, [r3, #12]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007072:	460a      	mov	r2, r1
 8007074:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d128      	bne.n	80070d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d110      	bne.n	80070b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e00f      	b.n	80070d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	1ff80000 	.word	0x1ff80000

08007100 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d14a      	bne.n	80071b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007136:	f040 8086 	bne.w	8007246 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	7812      	ldrb	r2, [r2, #0]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007158:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800715c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800717c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007180:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800718e:	4293      	cmp	r3, r2
 8007190:	d902      	bls.n	8007198 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
          break;
 8007196:	e056      	b.n	8007246 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071b0:	d0e7      	beq.n	8007182 <USB_EPStopXfer+0x82>
 80071b2:	e048      	b.n	8007246 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071cc:	d13b      	bne.n	8007246 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007210:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007214:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007222:	4293      	cmp	r3, r2
 8007224:	d902      	bls.n	800722c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
          break;
 800722a:	e00c      	b.n	8007246 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007244:	d0e7      	beq.n	8007216 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	@ 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4611      	mov	r1, r2
 8007260:	461a      	mov	r2, r3
 8007262:	460b      	mov	r3, r1
 8007264:	71fb      	strb	r3, [r7, #7]
 8007266:	4613      	mov	r3, r2
 8007268:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007272:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007276:	2b00      	cmp	r3, #0
 8007278:	d123      	bne.n	80072c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800727a:	88bb      	ldrh	r3, [r7, #4]
 800727c:	3303      	adds	r3, #3
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007282:	2300      	movs	r3, #0
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	e018      	b.n	80072ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	031a      	lsls	r2, r3, #12
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	4413      	add	r3, r2
 8007290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007294:	461a      	mov	r2, r3
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3301      	adds	r3, #1
 80072a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61bb      	str	r3, [r7, #24]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d3e2      	bcc.n	8007288 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3724      	adds	r7, #36	@ 0x24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b08b      	sub	sp, #44	@ 0x2c
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	089b      	lsrs	r3, r3, #2
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	623b      	str	r3, [r7, #32]
 80072fa:	e014      	b.n	8007326 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	601a      	str	r2, [r3, #0]
    pDest++;
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	3301      	adds	r3, #1
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	3301      	adds	r3, #1
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	3301      	adds	r3, #1
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	3301      	adds	r3, #1
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	3301      	adds	r3, #1
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	429a      	cmp	r2, r3
 800732c:	d3e6      	bcc.n	80072fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800732e:	8bfb      	ldrh	r3, [r7, #30]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01e      	beq.n	8007372 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733e:	461a      	mov	r2, r3
 8007340:	f107 0310 	add.w	r3, r7, #16
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
 8007354:	b2da      	uxtb	r2, r3
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	701a      	strb	r2, [r3, #0]
      i++;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	3301      	adds	r3, #1
 800735e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	3301      	adds	r3, #1
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007366:	8bfb      	ldrh	r3, [r7, #30]
 8007368:	3b01      	subs	r3, #1
 800736a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800736c:	8bfb      	ldrh	r3, [r7, #30]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1ea      	bne.n	8007348 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007374:	4618      	mov	r0, r3
 8007376:	372c      	adds	r7, #44	@ 0x2c
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d12c      	bne.n	80073f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	db12      	blt.n	80073d4 <USB_EPSetStall+0x54>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00f      	beq.n	80073d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e02b      	b.n	800744e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db12      	blt.n	800742e <USB_EPSetStall+0xae>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007428:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800742c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800744c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d128      	bne.n	80074ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007496:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	791b      	ldrb	r3, [r3, #4]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d003      	beq.n	80074a8 <USB_EPClearStall+0x4c>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	791b      	ldrb	r3, [r3, #4]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d138      	bne.n	800751a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e027      	b.n	800751a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	791b      	ldrb	r3, [r3, #4]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d003      	beq.n	80074fa <USB_EPClearStall+0x9e>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d10f      	bne.n	800751a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007518:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007546:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800754a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800755c:	68f9      	ldr	r1, [r7, #12]
 800755e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075a2:	f023 0302 	bic.w	r3, r3, #2
 80075a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4013      	ands	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	0c1b      	lsrs	r3, r3, #16
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4013      	ands	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	b29b      	uxth	r3, r3
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4013      	ands	r3, r2
 80076b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076b4:	68bb      	ldr	r3, [r7, #8]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b087      	sub	sp, #28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	fa22 f303 	lsr.w	r3, r2, r3
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4013      	ands	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007710:	68bb      	ldr	r3, [r7, #8]
}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0301 	and.w	r3, r3, #1
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007754:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800776c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	460b      	mov	r3, r1
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	333c      	adds	r3, #60	@ 0x3c
 8007796:	3304      	adds	r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4a26      	ldr	r2, [pc, #152]	@ (8007838 <USB_EP0_OutStart+0xb8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d90a      	bls.n	80077ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077b4:	d101      	bne.n	80077ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e037      	b.n	800782a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	461a      	mov	r2, r3
 80077c2:	2300      	movs	r3, #0
 80077c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e8:	f043 0318 	orr.w	r3, r3, #24
 80077ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007800:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10f      	bne.n	8007828 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007822:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	4f54300a 	.word	0x4f54300a

0800783c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007854:	d901      	bls.n	800785a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e01b      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	daf2      	bge.n	8007848 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f043 0201 	orr.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800787e:	d901      	bls.n	8007884 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e006      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d0f0      	beq.n	8007872 <USB_CoreReset+0x36>

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80078ac:	f243 7050 	movw	r0, #14160	@ 0x3750
 80078b0:	f002 fc9a 	bl	800a1e8 <USBD_static_malloc>
 80078b4:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32b0      	adds	r2, #176	@ 0xb0
 80078c6:	2100      	movs	r1, #0
 80078c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078cc:	2302      	movs	r3, #2
 80078ce:	e07e      	b.n	80079ce <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32b0      	adds	r2, #176	@ 0xb0
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32b0      	adds	r2, #176	@ 0xb0
 80078ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7c1b      	ldrb	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10e      	bne.n	800791a <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80078fc:	4b36      	ldr	r3, [pc, #216]	@ (80079d8 <USBD_AUDIO_Init+0x138>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007914:	2201      	movs	r2, #1
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e00d      	b.n	8007936 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800791a:	4b2f      	ldr	r3, [pc, #188]	@ (80079d8 <USBD_AUDIO_Init+0x138>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	f003 020f 	and.w	r2, r3, #15
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007932:	2201      	movs	r2, #1
 8007934:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8007936:	4b28      	ldr	r3, [pc, #160]	@ (80079d8 <USBD_AUDIO_Init+0x138>)
 8007938:	7819      	ldrb	r1, [r3, #0]
 800793a:	23b0      	movs	r3, #176	@ 0xb0
 800793c:	2201      	movs	r2, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f002 fae1 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8007944:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <USBD_AUDIO_Init+0x138>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 020f 	and.w	r2, r3, #15
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	440b      	add	r3, r1
 8007958:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800795c:	2201      	movs	r2, #1
 800795e:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800796c:	2203      	movs	r2, #3
 800796e:	f883 2704 	strb.w	r2, [r3, #1796]	@ 0x704
  haudio->wr_ptr = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007978:	2200      	movs	r2, #0
 800797a:	f8a3 2708 	strh.w	r2, [r3, #1800]	@ 0x708
  haudio->rd_ptr = 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007984:	2200      	movs	r2, #0
 8007986:	f8a3 2706 	strh.w	r2, [r3, #1798]	@ 0x706
  haudio->rd_enable = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2705 	strb.w	r2, [r3, #1797]	@ 0x705

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	33b0      	adds	r3, #176	@ 0xb0
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2200      	movs	r2, #0
 80079aa:	2146      	movs	r1, #70	@ 0x46
 80079ac:	f64a 4044 	movw	r0, #44100	@ 0xac44
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e008      	b.n	80079ce <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80079bc:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <USBD_AUDIO_Init+0x138>)
 80079be:	7819      	ldrb	r1, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	23b0      	movs	r3, #176	@ 0xb0
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f002 fb8c 	bl	800a0e4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	200000be 	.word	0x200000be

080079dc <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80079e8:	4b28      	ldr	r3, [pc, #160]	@ (8007a8c <USBD_AUDIO_DeInit+0xb0>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 faaf 	bl	8009f52 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80079f4:	4b25      	ldr	r3, [pc, #148]	@ (8007a8c <USBD_AUDIO_DeInit+0xb0>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 020f 	and.w	r2, r3, #15
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8007a10:	4b1e      	ldr	r3, [pc, #120]	@ (8007a8c <USBD_AUDIO_DeInit+0xb0>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f003 020f 	and.w	r2, r3, #15
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007a28:	2200      	movs	r2, #0
 8007a2a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32b0      	adds	r2, #176	@ 0xb0
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d020      	beq.n	8007a80 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	33b0      	adds	r3, #176	@ 0xb0
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2000      	movs	r0, #0
 8007a52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32b0      	adds	r2, #176	@ 0xb0
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f002 fbce 	bl	800a204 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32b0      	adds	r2, #176	@ 0xb0
 8007a72:	2100      	movs	r1, #0
 8007a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200000be 	.word	0x200000be

08007a90 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	32b0      	adds	r2, #176	@ 0xb0
 8007aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab0:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e0c1      	b.n	8007c40 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01a      	beq.n	8007afe <USBD_AUDIO_Setup+0x6e>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	f040 80b1 	bne.w	8007c30 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d006      	beq.n	8007ae4 <USBD_AUDIO_Setup+0x54>
 8007ad6:	2b81      	cmp	r3, #129	@ 0x81
 8007ad8:	d109      	bne.n	8007aee <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f9f5 	bl	8007ecc <AUDIO_REQ_GetCurrent>
          break;
 8007ae2:	e00b      	b.n	8007afc <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa1c 	bl	8007f24 <AUDIO_REQ_SetCurrent>
          break;
 8007aec:	e006      	b.n	8007afc <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fcca 	bl	800948a <USBD_CtlError>
          ret = USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	75fb      	strb	r3, [r7, #23]
          break;
 8007afa:	bf00      	nop
      }
      break;
 8007afc:	e09f      	b.n	8007c3e <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b0b      	cmp	r3, #11
 8007b04:	f200 8089 	bhi.w	8007c1a <USBD_AUDIO_Setup+0x18a>
 8007b08:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <USBD_AUDIO_Setup+0x80>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007c29 	.word	0x08007c29
 8007b18:	08007c1b 	.word	0x08007c1b
 8007b1c:	08007c1b 	.word	0x08007c1b
 8007b20:	08007c1b 	.word	0x08007c1b
 8007b24:	08007c1b 	.word	0x08007c1b
 8007b28:	08007b6b 	.word	0x08007b6b
 8007b2c:	08007c1b 	.word	0x08007c1b
 8007b30:	08007c1b 	.word	0x08007c1b
 8007b34:	08007c1b 	.word	0x08007c1b
 8007b38:	08007bb3 	.word	0x08007bb3
 8007b3c:	08007bdb 	.word	0x08007bdb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d107      	bne.n	8007b5c <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	2202      	movs	r2, #2
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fd15 	bl	8009584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5a:	e068      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fc93 	bl	800948a <USBD_CtlError>
            ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
          break;
 8007b68:	e061      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b21      	cmp	r3, #33	@ 0x21
 8007b74:	d15a      	bne.n	8007c2c <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fa3f 	bl	8008000 <USBD_AUDIO_GetAudioHeaderDesc>
 8007b82:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00c      	beq.n	8007ba4 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88db      	ldrh	r3, [r3, #6]
 8007b8e:	2b09      	cmp	r3, #9
 8007b90:	bf28      	it	cs
 8007b92:	2309      	movcs	r3, #9
 8007b94:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b96:	897b      	ldrh	r3, [r7, #10]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 fcf1 	bl	8009584 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8007ba2:	e043      	b.n	8007c2c <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fc6f 	bl	800948a <USBD_CtlError>
              ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb0:	e03c      	b.n	8007c2c <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d106      	bne.n	8007bcc <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fcdd 	bl	8009584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bca:	e030      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fc5b 	bl	800948a <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8007bd8:	e029      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d112      	bne.n	8007c0c <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d806      	bhi.n	8007bfe <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bfc:	e017      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fc42 	bl	800948a <USBD_CtlError>
              ret = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	75fb      	strb	r3, [r7, #23]
          break;
 8007c0a:	e010      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fc3b 	bl	800948a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	75fb      	strb	r3, [r7, #23]
          break;
 8007c18:	e009      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fc34 	bl	800948a <USBD_CtlError>
          ret = USBD_FAIL;
 8007c22:	2303      	movs	r3, #3
 8007c24:	75fb      	strb	r3, [r7, #23]
          break;
 8007c26:	e002      	b.n	8007c2e <USBD_AUDIO_Setup+0x19e>
          break;
 8007c28:	bf00      	nop
 8007c2a:	e008      	b.n	8007c3e <USBD_AUDIO_Setup+0x1ae>
          break;
 8007c2c:	bf00      	nop
      }
      break;
 8007c2e:	e006      	b.n	8007c3e <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fc29 	bl	800948a <USBD_CtlError>
      ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	226d      	movs	r2, #109	@ 0x6d
 8007c54:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007c56:	4b03      	ldr	r3, [pc, #12]	@ (8007c64 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20000044 	.word	0x20000044

08007c68 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	32b0      	adds	r2, #176	@ 0xb0
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e02a      	b.n	8007cfa <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007caa:	f893 370a 	ldrb.w	r3, [r3, #1802]	@ 0x70a
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d122      	bne.n	8007cf8 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cb8:	f893 374c 	ldrb.w	r3, [r3, #1868]	@ 0x74c
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d11b      	bne.n	8007cf8 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	33b0      	adds	r3, #176	@ 0xb0
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8007cd8:	f892 270b 	ldrb.w	r2, [r2, #1803]	@ 0x70b
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 270a 	strb.w	r2, [r3, #1802]	@ 0x70a
      haudio->control.len = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 274b 	strb.w	r2, [r3, #1867]	@ 0x74b
    }
  }

  return (uint8_t)USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32b0      	adds	r2, #176	@ 0xb0
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e016      	b.n	8007d98 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	32b0      	adds	r2, #176	@ 0xb0
 8007d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007d80:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	@ 0x708
 8007d84:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	78f9      	ldrb	r1, [r7, #3]
 8007d8e:	23b0      	movs	r3, #176	@ 0xb0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f002 f9a7 	bl	800a0e4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32b0      	adds	r2, #176	@ 0xb0
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e07c      	b.n	8007ec0 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8007dc6:	4b40      	ldr	r3, [pc, #256]	@ (8007ec8 <USBD_AUDIO_DataOut+0x128>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d176      	bne.n	8007ebe <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f002 f9a6 	bl	800a126 <USBD_LL_GetRxDataSize>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	33b0      	adds	r3, #176	@ 0xb0
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8007df6:	f8b2 2708 	ldrh.w	r2, [r2, #1800]	@ 0x708
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	440a      	add	r2, r1
 8007e00:	1d10      	adds	r0, r2, #4
 8007e02:	8979      	ldrh	r1, [r7, #10]
 8007e04:	2201      	movs	r2, #1
 8007e06:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e0e:	f8b3 2708 	ldrh.w	r2, [r3, #1800]	@ 0x708
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	4413      	add	r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e1e:	f8a3 2708 	strh.w	r2, [r3, #1800]	@ 0x708

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e28:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	@ 0x708
 8007e2c:	f5b3 5f5c 	cmp.w	r3, #14080	@ 0x3700
 8007e30:	d321      	bcc.n	8007e76 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8a3 2708 	strh.w	r2, [r3, #1800]	@ 0x708

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e44:	f893 3704 	ldrb.w	r3, [r3, #1796]	@ 0x704
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d114      	bne.n	8007e76 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	33b0      	adds	r3, #176	@ 0xb0
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	1d10      	adds	r0, r2, #4
 8007e62:	2201      	movs	r2, #1
 8007e64:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8007e68:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2704 	strb.w	r2, [r3, #1796]	@ 0x704
      }
    }

    if (haudio->rd_enable == 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e7c:	f893 3705 	ldrb.w	r3, [r3, #1797]	@ 0x705
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10d      	bne.n	8007ea0 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e8a:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	@ 0x708
 8007e8e:	f5b3 5fdc 	cmp.w	r3, #7040	@ 0x1b80
 8007e92:	d105      	bne.n	8007ea0 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2705 	strb.w	r2, [r3, #1797]	@ 0x705
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007ea0:	4b09      	ldr	r3, [pc, #36]	@ (8007ec8 <USBD_AUDIO_DataOut+0x128>)
 8007ea2:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007eaa:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	@ 0x708
 8007eae:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	23b0      	movs	r3, #176	@ 0xb0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f002 f913 	bl	800a0e4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200000be 	.word	0x200000be

08007ecc <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32b0      	adds	r2, #176	@ 0xb0
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d017      	beq.n	8007f1c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 535c 	add.w	r3, r3, #14080	@ 0x3700
 8007ef2:	330b      	adds	r3, #11
 8007ef4:	2240      	movs	r2, #64	@ 0x40
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f002 fbcb 	bl	800a694 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 535c 	add.w	r3, r3, #14080	@ 0x3700
 8007f04:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	88d2      	ldrh	r2, [r2, #6]
 8007f0a:	2a40      	cmp	r2, #64	@ 0x40
 8007f0c:	bf28      	it	cs
 8007f0e:	2240      	movcs	r2, #64	@ 0x40
 8007f10:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 fb35 	bl	8009584 <USBD_CtlSendData>
 8007f1a:	e000      	b.n	8007f1e <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007f1c:	bf00      	nop
}
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	32b0      	adds	r2, #176	@ 0xb0
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02f      	beq.n	8007fa4 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d02c      	beq.n	8007fa6 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 270a 	strb.w	r2, [r3, #1802]	@ 0x70a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f5e:	d803      	bhi.n	8007f68 <AUDIO_REQ_SetCurrent+0x44>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	88db      	ldrh	r3, [r3, #6]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	e000      	b.n	8007f6a <AUDIO_REQ_SetCurrent+0x46>
 8007f68:	2240      	movs	r2, #64	@ 0x40
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007f70:	f883 274b 	strb.w	r2, [r3, #1867]	@ 0x74b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	889b      	ldrh	r3, [r3, #4]
 8007f78:	0a1b      	lsrs	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007f84:	f883 274c 	strb.w	r2, [r3, #1868]	@ 0x74c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 535c 	add.w	r3, r3, #14080	@ 0x3700
 8007f8e:	330b      	adds	r3, #11
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8007f96:	f892 274b 	ldrb.w	r2, [r2, #1867]	@ 0x74b
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fb1d 	bl	80095dc <USBD_CtlPrepareRx>
 8007fa2:	e000      	b.n	8007fa6 <AUDIO_REQ_SetCurrent+0x82>
    return;
 8007fa4:	bf00      	nop
  }
}
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	@ (8007fc8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	200000b4 	.word	0x200000b4

08007fcc <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e009      	b.n	8007ff4 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	33b0      	adds	r3, #176	@ 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	b29b      	uxth	r3, r3
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	4293      	cmp	r3, r2
 8008020:	d91b      	bls.n	800805a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008028:	e011      	b.n	800804e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800802a:	f107 030a 	add.w	r3, r7, #10
 800802e:	4619      	mov	r1, r3
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f000 fc02 	bl	800883a <USBD_GetNextDesc>
 8008036:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b24      	cmp	r3, #36	@ 0x24
 800803e:	d106      	bne.n	800804e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8008044:	2b01      	cmp	r3, #1
 8008046:	d102      	bne.n	800804e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	613b      	str	r3, [r7, #16]
        break;
 800804c:	e005      	b.n	800805a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	b29a      	uxth	r2, r3
 8008054:	897b      	ldrh	r3, [r7, #10]
 8008056:	429a      	cmp	r2, r3
 8008058:	d8e7      	bhi.n	800802a <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800805a:	693b      	ldr	r3, [r7, #16]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008078:	4817      	ldr	r0, [pc, #92]	@ (80080d8 <USBD_Init+0x74>)
 800807a:	f002 f9bb 	bl	800a3f4 <iprintf>
 800807e:	4817      	ldr	r0, [pc, #92]	@ (80080dc <USBD_Init+0x78>)
 8008080:	f002 f9b8 	bl	800a3f4 <iprintf>
 8008084:	200a      	movs	r0, #10
 8008086:	f002 f9c7 	bl	800a418 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	e01f      	b.n	80080ce <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	79fa      	ldrb	r2, [r7, #7]
 80080c0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f001 feb8 	bl	8009e38 <USBD_LL_Init>
 80080c8:	4603      	mov	r3, r0
 80080ca:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	0800c288 	.word	0x0800c288
 80080dc:	0800c290 	.word	0x0800c290

080080e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80080f4:	481a      	ldr	r0, [pc, #104]	@ (8008160 <USBD_RegisterClass+0x80>)
 80080f6:	f002 f97d 	bl	800a3f4 <iprintf>
 80080fa:	481a      	ldr	r0, [pc, #104]	@ (8008164 <USBD_RegisterClass+0x84>)
 80080fc:	f002 f97a 	bl	800a3f4 <iprintf>
 8008100:	200a      	movs	r0, #10
 8008102:	f002 f989 	bl	800a418 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e025      	b.n	8008156 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	32ae      	adds	r2, #174	@ 0xae
 800811c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00f      	beq.n	8008146 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32ae      	adds	r2, #174	@ 0xae
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	f107 020e 	add.w	r2, r7, #14
 800813a:	4610      	mov	r0, r2
 800813c:	4798      	blx	r3
 800813e:	4602      	mov	r2, r0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	0800c288 	.word	0x0800c288
 8008164:	0800c2a8 	.word	0x0800c2a8

08008168 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fead 	bl	8009ed0 <USBD_LL_Start>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	4611      	mov	r1, r2
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	4618      	mov	r0, r3
 8008216:	f001 f8fe 	bl	8009416 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	2b02      	cmp	r3, #2
 800823c:	d01a      	beq.n	8008274 <USBD_LL_SetupStage+0x72>
 800823e:	2b02      	cmp	r3, #2
 8008240:	d822      	bhi.n	8008288 <USBD_LL_SetupStage+0x86>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <USBD_LL_SetupStage+0x4a>
 8008246:	2b01      	cmp	r3, #1
 8008248:	d00a      	beq.n	8008260 <USBD_LL_SetupStage+0x5e>
 800824a:	e01d      	b.n	8008288 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb2b 	bl	80088b0 <USBD_StdDevReq>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
      break;
 800825e:	e020      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb93 	bl	8008994 <USBD_StdItfReq>
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e016      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fbf5 	bl	8008a6c <USBD_StdEPReq>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
      break;
 8008286:	e00c      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800828e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008292:	b2db      	uxtb	r3, r3
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fe7a 	bl	8009f90 <USBD_LL_StallEP>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	bf00      	nop
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	460b      	mov	r3, r1
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d16e      	bne.n	80083a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	f040 8098 	bne.w	8008408 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d913      	bls.n	800830c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	1ad2      	subs	r2, r2, r3
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bf28      	it	cs
 80082fe:	4613      	movcs	r3, r2
 8008300:	461a      	mov	r2, r3
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f001 f986 	bl	8009616 <USBD_CtlContinueRx>
 800830a:	e07d      	b.n	8008408 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	2b02      	cmp	r3, #2
 8008318:	d014      	beq.n	8008344 <USBD_LL_DataOutStage+0x98>
 800831a:	2b02      	cmp	r3, #2
 800831c:	d81d      	bhi.n	800835a <USBD_LL_DataOutStage+0xae>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <USBD_LL_DataOutStage+0x7c>
 8008322:	2b01      	cmp	r3, #1
 8008324:	d003      	beq.n	800832e <USBD_LL_DataOutStage+0x82>
 8008326:	e018      	b.n	800835a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	75bb      	strb	r3, [r7, #22]
            break;
 800832c:	e018      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fa64 	bl	8008806 <USBD_CoreFindIF>
 800833e:	4603      	mov	r3, r0
 8008340:	75bb      	strb	r3, [r7, #22]
            break;
 8008342:	e00d      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4619      	mov	r1, r3
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa66 	bl	8008820 <USBD_CoreFindEP>
 8008354:	4603      	mov	r3, r0
 8008356:	75bb      	strb	r3, [r7, #22]
            break;
 8008358:	e002      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	75bb      	strb	r3, [r7, #22]
            break;
 800835e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008360:	7dbb      	ldrb	r3, [r7, #22]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d119      	bne.n	800839a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d113      	bne.n	800839a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008372:	7dba      	ldrb	r2, [r7, #22]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	32ae      	adds	r2, #174	@ 0xae
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008382:	7dba      	ldrb	r2, [r7, #22]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800838a:	7dba      	ldrb	r2, [r7, #22]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	32ae      	adds	r2, #174	@ 0xae
 8008390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 f94c 	bl	8009638 <USBD_CtlSendStatus>
 80083a0:	e032      	b.n	8008408 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fa37 	bl	8008820 <USBD_CoreFindEP>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083b6:	7dbb      	ldrb	r3, [r7, #22]
 80083b8:	2bff      	cmp	r3, #255	@ 0xff
 80083ba:	d025      	beq.n	8008408 <USBD_LL_DataOutStage+0x15c>
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d122      	bne.n	8008408 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d117      	bne.n	80083fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083ce:	7dba      	ldrb	r2, [r7, #22]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	32ae      	adds	r2, #174	@ 0xae
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00f      	beq.n	80083fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083de:	7dba      	ldrb	r2, [r7, #22]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083e6:	7dba      	ldrb	r2, [r7, #22]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	32ae      	adds	r2, #174	@ 0xae
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	7afa      	ldrb	r2, [r7, #11]
 80083f4:	4611      	mov	r1, r2
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	e000      	b.n	800840a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	460b      	mov	r3, r1
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d16f      	bne.n	8008506 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3314      	adds	r3, #20
 800842a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008432:	2b02      	cmp	r3, #2
 8008434:	d15a      	bne.n	80084ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d914      	bls.n	800846c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	461a      	mov	r2, r3
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f001 f8ae 	bl	80095ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800845e:	2300      	movs	r3, #0
 8008460:	2200      	movs	r2, #0
 8008462:	2100      	movs	r1, #0
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f001 fe3d 	bl	800a0e4 <USBD_LL_PrepareReceive>
 800846a:	e03f      	b.n	80084ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	429a      	cmp	r2, r3
 8008476:	d11c      	bne.n	80084b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008480:	429a      	cmp	r2, r3
 8008482:	d316      	bcc.n	80084b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800848e:	429a      	cmp	r2, r3
 8008490:	d20f      	bcs.n	80084b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008492:	2200      	movs	r2, #0
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f001 f88f 	bl	80095ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a4:	2300      	movs	r3, #0
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f001 fe1a 	bl	800a0e4 <USBD_LL_PrepareReceive>
 80084b0:	e01c      	b.n	80084ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d10f      	bne.n	80084de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084de:	2180      	movs	r1, #128	@ 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 fd55 	bl	8009f90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f001 f8b9 	bl	800965e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d03a      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fe42 	bl	8008180 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008504:	e032      	b.n	800856c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f985 	bl	8008820 <USBD_CoreFindEP>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2bff      	cmp	r3, #255	@ 0xff
 800851e:	d025      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d122      	bne.n	800856c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d11c      	bne.n	800856c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008532:	7dfa      	ldrb	r2, [r7, #23]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	32ae      	adds	r2, #174	@ 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d014      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008542:	7dfa      	ldrb	r2, [r7, #23]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800854a:	7dfa      	ldrb	r2, [r7, #23]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	32ae      	adds	r2, #174	@ 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	7afa      	ldrb	r2, [r7, #11]
 8008558:	4611      	mov	r1, r2
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
 800855e:	4603      	mov	r3, r0
 8008560:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008568:	7dbb      	ldrb	r3, [r7, #22]
 800856a:	e000      	b.n	800856e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d014      	beq.n	80085dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00e      	beq.n	80085dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6852      	ldr	r2, [r2, #4]
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	4611      	mov	r1, r2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085dc:	2340      	movs	r3, #64	@ 0x40
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fc8f 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2240      	movs	r2, #64	@ 0x40
 80085f4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f8:	2340      	movs	r3, #64	@ 0x40
 80085fa:	2200      	movs	r2, #0
 80085fc:	2180      	movs	r1, #128	@ 0x80
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fc81 	bl	8009f06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2240      	movs	r2, #64	@ 0x40
 800860e:	621a      	str	r2, [r3, #32]

  return ret;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b04      	cmp	r3, #4
 800864c:	d006      	beq.n	800865c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2204      	movs	r2, #4
 8008660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b04      	cmp	r3, #4
 8008684:	d106      	bne.n	8008694 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800868c:	b2da      	uxtb	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d110      	bne.n	80086d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	32ae      	adds	r2, #174	@ 0xae
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	e01c      	b.n	800873e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b03      	cmp	r3, #3
 800870e:	d115      	bne.n	800873c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	32ae      	adds	r2, #174	@ 0xae
 800871a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	32ae      	adds	r2, #174	@ 0xae
 800872e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	4611      	mov	r1, r2
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	32ae      	adds	r2, #174	@ 0xae
 800875c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	e01c      	b.n	80087a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b03      	cmp	r3, #3
 8008772:	d115      	bne.n	80087a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	32ae      	adds	r2, #174	@ 0xae
 800877e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	@ 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	4611      	mov	r1, r2
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00e      	beq.n	80087fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6852      	ldr	r2, [r2, #4]
 80087ea:	b2d2      	uxtb	r2, r2
 80087ec:	4611      	mov	r1, r2
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008812:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800882c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	7812      	ldrb	r2, [r2, #0]
 8008850:	4413      	add	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4413      	add	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008864:	68fb      	ldr	r3, [r7, #12]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008872:	b480      	push	{r7}
 8008874:	b087      	sub	sp, #28
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	3301      	adds	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008890:	8a3b      	ldrh	r3, [r7, #16]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	b21a      	sxth	r2, r3
 8008896:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800889a:	4313      	orrs	r3, r2
 800889c:	b21b      	sxth	r3, r3
 800889e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088a0:	89fb      	ldrh	r3, [r7, #14]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088c6:	2b40      	cmp	r3, #64	@ 0x40
 80088c8:	d005      	beq.n	80088d6 <USBD_StdDevReq+0x26>
 80088ca:	2b40      	cmp	r3, #64	@ 0x40
 80088cc:	d857      	bhi.n	800897e <USBD_StdDevReq+0xce>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00f      	beq.n	80088f2 <USBD_StdDevReq+0x42>
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d153      	bne.n	800897e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	32ae      	adds	r2, #174	@ 0xae
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	4798      	blx	r3
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e04a      	b.n	8008988 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d83b      	bhi.n	8008972 <USBD_StdDevReq+0xc2>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <USBD_StdDevReq+0x50>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008955 	.word	0x08008955
 8008904:	08008969 	.word	0x08008969
 8008908:	08008973 	.word	0x08008973
 800890c:	0800895f 	.word	0x0800895f
 8008910:	08008973 	.word	0x08008973
 8008914:	08008933 	.word	0x08008933
 8008918:	08008929 	.word	0x08008929
 800891c:	08008973 	.word	0x08008973
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800893d 	.word	0x0800893d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa3c 	bl	8008da8 <USBD_GetDescriptor>
          break;
 8008930:	e024      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fbcb 	bl	80090d0 <USBD_SetAddress>
          break;
 800893a:	e01f      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc0a 	bl	8009158 <USBD_SetConfig>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
          break;
 8008948:	e018      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fcad 	bl	80092ac <USBD_GetConfig>
          break;
 8008952:	e013      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fcde 	bl	8009318 <USBD_GetStatus>
          break;
 800895c:	e00e      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd0d 	bl	8009380 <USBD_SetFeature>
          break;
 8008966:	e009      	b.n	800897c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fd31 	bl	80093d2 <USBD_ClrFeature>
          break;
 8008970:	e004      	b.n	800897c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fd88 	bl	800948a <USBD_CtlError>
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fd82 	bl	800948a <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089aa:	2b40      	cmp	r3, #64	@ 0x40
 80089ac:	d005      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089ae:	2b40      	cmp	r3, #64	@ 0x40
 80089b0:	d852      	bhi.n	8008a58 <USBD_StdItfReq+0xc4>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <USBD_StdItfReq+0x26>
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d14e      	bne.n	8008a58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	3b01      	subs	r3, #1
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d840      	bhi.n	8008a4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	889b      	ldrh	r3, [r3, #4]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d836      	bhi.n	8008a40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ff13 	bl	8008806 <USBD_CoreFindIF>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2bff      	cmp	r3, #255	@ 0xff
 80089e8:	d01d      	beq.n	8008a26 <USBD_StdItfReq+0x92>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11a      	bne.n	8008a26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089f0:	7bba      	ldrb	r2, [r7, #14]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	32ae      	adds	r2, #174	@ 0xae
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00f      	beq.n	8008a20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a00:	7bba      	ldrb	r2, [r7, #14]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a08:	7bba      	ldrb	r2, [r7, #14]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	32ae      	adds	r2, #174	@ 0xae
 8008a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a1e:	e004      	b.n	8008a2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a20:	2303      	movs	r3, #3
 8008a22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a24:	e001      	b.n	8008a2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88db      	ldrh	r3, [r3, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d110      	bne.n	8008a54 <USBD_StdItfReq+0xc0>
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10d      	bne.n	8008a54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fdfd 	bl	8009638 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a3e:	e009      	b.n	8008a54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fd21 	bl	800948a <USBD_CtlError>
          break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fd1c 	bl	800948a <USBD_CtlError>
          break;
 8008a52:	e000      	b.n	8008a56 <USBD_StdItfReq+0xc2>
          break;
 8008a54:	bf00      	nop
      }
      break;
 8008a56:	e004      	b.n	8008a62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fd15 	bl	800948a <USBD_CtlError>
      break;
 8008a60:	bf00      	nop
  }

  return ret;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	889b      	ldrh	r3, [r3, #4]
 8008a7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a88:	2b40      	cmp	r3, #64	@ 0x40
 8008a8a:	d007      	beq.n	8008a9c <USBD_StdEPReq+0x30>
 8008a8c:	2b40      	cmp	r3, #64	@ 0x40
 8008a8e:	f200 817f 	bhi.w	8008d90 <USBD_StdEPReq+0x324>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02a      	beq.n	8008aec <USBD_StdEPReq+0x80>
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	f040 817a 	bne.w	8008d90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff febd 	bl	8008820 <USBD_CoreFindEP>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008aaa:	7b7b      	ldrb	r3, [r7, #13]
 8008aac:	2bff      	cmp	r3, #255	@ 0xff
 8008aae:	f000 8174 	beq.w	8008d9a <USBD_StdEPReq+0x32e>
 8008ab2:	7b7b      	ldrb	r3, [r7, #13]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8170 	bne.w	8008d9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008aba:	7b7a      	ldrb	r2, [r7, #13]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ac2:	7b7a      	ldrb	r2, [r7, #13]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	32ae      	adds	r2, #174	@ 0xae
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8163 	beq.w	8008d9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ad4:	7b7a      	ldrb	r2, [r7, #13]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32ae      	adds	r2, #174	@ 0xae
 8008ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008aea:	e156      	b.n	8008d9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d008      	beq.n	8008b06 <USBD_StdEPReq+0x9a>
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	f300 8145 	bgt.w	8008d84 <USBD_StdEPReq+0x318>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 809b 	beq.w	8008c36 <USBD_StdEPReq+0x1ca>
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d03c      	beq.n	8008b7e <USBD_StdEPReq+0x112>
 8008b04:	e13e      	b.n	8008d84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d002      	beq.n	8008b18 <USBD_StdEPReq+0xac>
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d016      	beq.n	8008b44 <USBD_StdEPReq+0xd8>
 8008b16:	e02c      	b.n	8008b72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <USBD_StdEPReq+0xce>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b80      	cmp	r3, #128	@ 0x80
 8008b22:	d00a      	beq.n	8008b3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fa31 	bl	8009f90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b2e:	2180      	movs	r1, #128	@ 0x80
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fa2d 	bl	8009f90 <USBD_LL_StallEP>
 8008b36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b38:	e020      	b.n	8008b7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fca4 	bl	800948a <USBD_CtlError>
              break;
 8008b42:	e01b      	b.n	8008b7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	885b      	ldrh	r3, [r3, #2]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10e      	bne.n	8008b6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <USBD_StdEPReq+0xfe>
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b80      	cmp	r3, #128	@ 0x80
 8008b56:	d008      	beq.n	8008b6a <USBD_StdEPReq+0xfe>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	88db      	ldrh	r3, [r3, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 fa13 	bl	8009f90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fd64 	bl	8009638 <USBD_CtlSendStatus>

              break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc88 	bl	800948a <USBD_CtlError>
              break;
 8008b7a:	bf00      	nop
          }
          break;
 8008b7c:	e107      	b.n	8008d8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d002      	beq.n	8008b90 <USBD_StdEPReq+0x124>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d016      	beq.n	8008bbc <USBD_StdEPReq+0x150>
 8008b8e:	e04b      	b.n	8008c28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_StdEPReq+0x146>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b80      	cmp	r3, #128	@ 0x80
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 f9f5 	bl	8009f90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba6:	2180      	movs	r1, #128	@ 0x80
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f9f1 	bl	8009f90 <USBD_LL_StallEP>
 8008bae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb0:	e040      	b.n	8008c34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc68 	bl	800948a <USBD_CtlError>
              break;
 8008bba:	e03b      	b.n	8008c34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d136      	bne.n	8008c32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f9fb 	bl	8009fce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fd2d 	bl	8009638 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe1c 	bl	8008820 <USBD_CoreFindEP>
 8008be8:	4603      	mov	r3, r0
 8008bea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bec:	7b7b      	ldrb	r3, [r7, #13]
 8008bee:	2bff      	cmp	r3, #255	@ 0xff
 8008bf0:	d01f      	beq.n	8008c32 <USBD_StdEPReq+0x1c6>
 8008bf2:	7b7b      	ldrb	r3, [r7, #13]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d11c      	bne.n	8008c32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bf8:	7b7a      	ldrb	r2, [r7, #13]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c00:	7b7a      	ldrb	r2, [r7, #13]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	@ 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d010      	beq.n	8008c32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c10:	7b7a      	ldrb	r2, [r7, #13]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	32ae      	adds	r2, #174	@ 0xae
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc2d 	bl	800948a <USBD_CtlError>
              break;
 8008c30:	e000      	b.n	8008c34 <USBD_StdEPReq+0x1c8>
              break;
 8008c32:	bf00      	nop
          }
          break;
 8008c34:	e0ab      	b.n	8008d8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d002      	beq.n	8008c48 <USBD_StdEPReq+0x1dc>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d032      	beq.n	8008cac <USBD_StdEPReq+0x240>
 8008c46:	e097      	b.n	8008d78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <USBD_StdEPReq+0x1f2>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b80      	cmp	r3, #128	@ 0x80
 8008c52:	d004      	beq.n	8008c5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fc17 	bl	800948a <USBD_CtlError>
                break;
 8008c5c:	e091      	b.n	8008d82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da0b      	bge.n	8008c7e <USBD_StdEPReq+0x212>
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	3310      	adds	r3, #16
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	e00b      	b.n	8008c96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	3304      	adds	r3, #4
 8008c96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc6d 	bl	8009584 <USBD_CtlSendData>
              break;
 8008caa:	e06a      	b.n	8008d82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da11      	bge.n	8008cd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3324      	adds	r3, #36	@ 0x24
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d117      	bne.n	8008cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fbda 	bl	800948a <USBD_CtlError>
                  break;
 8008cd6:	e054      	b.n	8008d82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 020f 	and.w	r2, r3, #15
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	440b      	add	r3, r1
 8008cea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbc7 	bl	800948a <USBD_CtlError>
                  break;
 8008cfc:	e041      	b.n	8008d82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da0b      	bge.n	8008d1e <USBD_StdEPReq+0x2b2>
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	3310      	adds	r3, #16
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	4413      	add	r3, r2
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	e00b      	b.n	8008d36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	3304      	adds	r3, #4
 8008d36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <USBD_StdEPReq+0x2d8>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	@ 0x80
 8008d42:	d103      	bne.n	8008d4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	e00e      	b.n	8008d6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f95b 	bl	800a00c <USBD_LL_IsStallEP>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e002      	b.n	8008d6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fc07 	bl	8009584 <USBD_CtlSendData>
              break;
 8008d76:	e004      	b.n	8008d82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fb85 	bl	800948a <USBD_CtlError>
              break;
 8008d80:	bf00      	nop
          }
          break;
 8008d82:	e004      	b.n	8008d8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb7f 	bl	800948a <USBD_CtlError>
          break;
 8008d8c:	bf00      	nop
      }
      break;
 8008d8e:	e005      	b.n	8008d9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fb79 	bl	800948a <USBD_CtlError>
      break;
 8008d98:	e000      	b.n	8008d9c <USBD_StdEPReq+0x330>
      break;
 8008d9a:	bf00      	nop
  }

  return ret;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	2b0e      	cmp	r3, #14
 8008dca:	f200 8152 	bhi.w	8009072 <USBD_GetDescriptor+0x2ca>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <USBD_GetDescriptor+0x2c>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e5d 	.word	0x08008e5d
 8008ddc:	08008e9d 	.word	0x08008e9d
 8008de0:	08009073 	.word	0x08009073
 8008de4:	08009073 	.word	0x08009073
 8008de8:	08009013 	.word	0x08009013
 8008dec:	0800903f 	.word	0x0800903f
 8008df0:	08009073 	.word	0x08009073
 8008df4:	08009073 	.word	0x08009073
 8008df8:	08009073 	.word	0x08009073
 8008dfc:	08009073 	.word	0x08009073
 8008e00:	08009073 	.word	0x08009073
 8008e04:	08009073 	.word	0x08009073
 8008e08:	08009073 	.word	0x08009073
 8008e0c:	08008e11 	.word	0x08008e11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e32:	e126      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fb27 	bl	800948a <USBD_CtlError>
        err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
      break;
 8008e42:	e11e      	b.n	8009082 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
      break;
 8008e5a:	e112      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7c1b      	ldrb	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	f107 0208 	add.w	r2, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e7e:	e100      	b.n	8009082 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	f107 0208 	add.w	r2, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	2202      	movs	r2, #2
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e0f2      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b05      	cmp	r3, #5
 8008ea4:	f200 80ac 	bhi.w	8009000 <USBD_GetDescriptor+0x258>
 8008ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <USBD_GetDescriptor+0x108>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ec9 	.word	0x08008ec9
 8008eb4:	08008efd 	.word	0x08008efd
 8008eb8:	08008f31 	.word	0x08008f31
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008f99 	.word	0x08008f99
 8008ec4:	08008fcd 	.word	0x08008fcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e091      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 facb 	bl	800948a <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e089      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e077      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fab1 	bl	800948a <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e06f      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e05d      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa97 	bl	800948a <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e055      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f86:	e043      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa7d 	bl	800948a <USBD_CtlError>
            err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
          break;
 8008f96:	e03b      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fba:	e029      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa63 	bl	800948a <USBD_CtlError>
            err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fca:	e021      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7c12      	ldrb	r2, [r2, #16]
 8008fe4:	f107 0108 	add.w	r1, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fee:	e00f      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa49 	bl	800948a <USBD_CtlError>
            err++;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffe:	e007      	b.n	8009010 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa41 	bl	800948a <USBD_CtlError>
          err++;
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	3301      	adds	r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800900e:	bf00      	nop
      }
      break;
 8009010:	e037      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	7c1b      	ldrb	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009022:	f107 0208 	add.w	r2, r7, #8
 8009026:	4610      	mov	r0, r2
 8009028:	4798      	blx	r3
 800902a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800902c:	e029      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa2a 	bl	800948a <USBD_CtlError>
        err++;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	3301      	adds	r3, #1
 800903a:	72fb      	strb	r3, [r7, #11]
      break;
 800903c:	e021      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7c1b      	ldrb	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10d      	bne.n	8009062 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800904c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	4610      	mov	r0, r2
 8009054:	4798      	blx	r3
 8009056:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	2207      	movs	r2, #7
 800905e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009060:	e00f      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa10 	bl	800948a <USBD_CtlError>
        err++;
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	3301      	adds	r3, #1
 800906e:	72fb      	strb	r3, [r7, #11]
      break;
 8009070:	e007      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fa08 	bl	800948a <USBD_CtlError>
      err++;
 800907a:	7afb      	ldrb	r3, [r7, #11]
 800907c:	3301      	adds	r3, #1
 800907e:	72fb      	strb	r3, [r7, #11]
      break;
 8009080:	bf00      	nop
  }

  if (err != 0U)
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11e      	bne.n	80090c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	88db      	ldrh	r3, [r3, #6]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d016      	beq.n	80090be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009090:	893b      	ldrh	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00e      	beq.n	80090b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	88da      	ldrh	r2, [r3, #6]
 800909a:	893b      	ldrh	r3, [r7, #8]
 800909c:	4293      	cmp	r3, r2
 800909e:	bf28      	it	cs
 80090a0:	4613      	movcs	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090a6:	893b      	ldrh	r3, [r7, #8]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa69 	bl	8009584 <USBD_CtlSendData>
 80090b2:	e009      	b.n	80090c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f9e7 	bl	800948a <USBD_CtlError>
 80090bc:	e004      	b.n	80090c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 faba 	bl	8009638 <USBD_CtlSendStatus>
 80090c4:	e000      	b.n	80090c8 <USBD_GetDescriptor+0x320>
    return;
 80090c6:	bf00      	nop
  }
}
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop

080090d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	889b      	ldrh	r3, [r3, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d131      	bne.n	8009146 <USBD_SetAddress+0x76>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	88db      	ldrh	r3, [r3, #6]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d12d      	bne.n	8009146 <USBD_SetAddress+0x76>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	885b      	ldrh	r3, [r3, #2]
 80090ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80090f0:	d829      	bhi.n	8009146 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b03      	cmp	r3, #3
 8009108:	d104      	bne.n	8009114 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f9bc 	bl	800948a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009112:	e01d      	b.n	8009150 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7bfa      	ldrb	r2, [r7, #15]
 8009118:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 ff9f 	bl	800a064 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa86 	bl	8009638 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2202      	movs	r2, #2
 8009136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913a:	e009      	b.n	8009150 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009144:	e004      	b.n	8009150 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f99e 	bl	800948a <USBD_CtlError>
  }
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	885b      	ldrh	r3, [r3, #2]
 800916a:	b2da      	uxtb	r2, r3
 800916c:	4b4e      	ldr	r3, [pc, #312]	@ (80092a8 <USBD_SetConfig+0x150>)
 800916e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009170:	4b4d      	ldr	r3, [pc, #308]	@ (80092a8 <USBD_SetConfig+0x150>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d905      	bls.n	8009184 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f985 	bl	800948a <USBD_CtlError>
    return USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	e08c      	b.n	800929e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d002      	beq.n	8009196 <USBD_SetConfig+0x3e>
 8009190:	2b03      	cmp	r3, #3
 8009192:	d029      	beq.n	80091e8 <USBD_SetConfig+0x90>
 8009194:	e075      	b.n	8009282 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009196:	4b44      	ldr	r3, [pc, #272]	@ (80092a8 <USBD_SetConfig+0x150>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d020      	beq.n	80091e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800919e:	4b42      	ldr	r3, [pc, #264]	@ (80092a8 <USBD_SetConfig+0x150>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091a8:	4b3f      	ldr	r3, [pc, #252]	@ (80092a8 <USBD_SetConfig+0x150>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fe fff1 	bl	8008196 <USBD_SetClassConfig>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f962 	bl	800948a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ce:	e065      	b.n	800929c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa31 	bl	8009638 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2203      	movs	r2, #3
 80091da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80091de:	e05d      	b.n	800929c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa29 	bl	8009638 <USBD_CtlSendStatus>
      break;
 80091e6:	e059      	b.n	800929c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091e8:	4b2f      	ldr	r3, [pc, #188]	@ (80092a8 <USBD_SetConfig+0x150>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d112      	bne.n	8009216 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80091f8:	4b2b      	ldr	r3, [pc, #172]	@ (80092a8 <USBD_SetConfig+0x150>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009202:	4b29      	ldr	r3, [pc, #164]	@ (80092a8 <USBD_SetConfig+0x150>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fe ffe0 	bl	80081ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa12 	bl	8009638 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009214:	e042      	b.n	800929c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009216:	4b24      	ldr	r3, [pc, #144]	@ (80092a8 <USBD_SetConfig+0x150>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d02a      	beq.n	800927a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7fe ffce 	bl	80081ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009232:	4b1d      	ldr	r3, [pc, #116]	@ (80092a8 <USBD_SetConfig+0x150>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800923c:	4b1a      	ldr	r3, [pc, #104]	@ (80092a8 <USBD_SetConfig+0x150>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe ffa7 	bl	8008196 <USBD_SetClassConfig>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00f      	beq.n	8009272 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f918 	bl	800948a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fe ffb3 	bl	80081ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009270:	e014      	b.n	800929c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9e0 	bl	8009638 <USBD_CtlSendStatus>
      break;
 8009278:	e010      	b.n	800929c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9dc 	bl	8009638 <USBD_CtlSendStatus>
      break;
 8009280:	e00c      	b.n	800929c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f900 	bl	800948a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800928a:	4b07      	ldr	r3, [pc, #28]	@ (80092a8 <USBD_SetConfig+0x150>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7fe ff9c 	bl	80081ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	bf00      	nop
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	200007fc 	.word	0x200007fc

080092ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d004      	beq.n	80092c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8e2 	bl	800948a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092c6:	e023      	b.n	8009310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	dc02      	bgt.n	80092da <USBD_GetConfig+0x2e>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc03      	bgt.n	80092e0 <USBD_GetConfig+0x34>
 80092d8:	e015      	b.n	8009306 <USBD_GetConfig+0x5a>
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d00b      	beq.n	80092f6 <USBD_GetConfig+0x4a>
 80092de:	e012      	b.n	8009306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3308      	adds	r3, #8
 80092ea:	2201      	movs	r2, #1
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f948 	bl	8009584 <USBD_CtlSendData>
        break;
 80092f4:	e00c      	b.n	8009310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3304      	adds	r3, #4
 80092fa:	2201      	movs	r2, #1
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f940 	bl	8009584 <USBD_CtlSendData>
        break;
 8009304:	e004      	b.n	8009310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8be 	bl	800948a <USBD_CtlError>
        break;
 800930e:	bf00      	nop
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	2b02      	cmp	r3, #2
 800932e:	d81e      	bhi.n	800936e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d004      	beq.n	8009342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8a5 	bl	800948a <USBD_CtlError>
        break;
 8009340:	e01a      	b.n	8009378 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f043 0202 	orr.w	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	330c      	adds	r3, #12
 8009362:	2202      	movs	r2, #2
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f90c 	bl	8009584 <USBD_CtlSendData>
      break;
 800936c:	e004      	b.n	8009378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f88a 	bl	800948a <USBD_CtlError>
      break;
 8009376:	bf00      	nop
  }
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d107      	bne.n	80093a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f94c 	bl	8009638 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093a0:	e013      	b.n	80093ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	885b      	ldrh	r3, [r3, #2]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d10b      	bne.n	80093c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	889b      	ldrh	r3, [r3, #4]
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f93c 	bl	8009638 <USBD_CtlSendStatus>
}
 80093c0:	e003      	b.n	80093ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f860 	bl	800948a <USBD_CtlError>
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d80b      	bhi.n	8009402 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10c      	bne.n	800940c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f91c 	bl	8009638 <USBD_CtlSendStatus>
      }
      break;
 8009400:	e004      	b.n	800940c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f840 	bl	800948a <USBD_CtlError>
      break;
 800940a:	e000      	b.n	800940e <USBD_ClrFeature+0x3c>
      break;
 800940c:	bf00      	nop
  }
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff fa16 	bl	8008872 <SWAPBYTE>
 8009446:	4603      	mov	r3, r0
 8009448:	461a      	mov	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fa09 	bl	8008872 <SWAPBYTE>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3301      	adds	r3, #1
 8009472:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff f9fc 	bl	8008872 <SWAPBYTE>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	80da      	strh	r2, [r3, #6]
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009494:	2180      	movs	r1, #128	@ 0x80
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fd7a 	bl	8009f90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fd76 	bl	8009f90 <USBD_LL_StallEP>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d042      	beq.n	8009548 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80094c6:	6938      	ldr	r0, [r7, #16]
 80094c8:	f000 f842 	bl	8009550 <USBD_GetLen>
 80094cc:	4603      	mov	r3, r0
 80094ce:	3301      	adds	r3, #1
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d6:	d808      	bhi.n	80094ea <USBD_GetString+0x3e>
 80094d8:	6938      	ldr	r0, [r7, #16]
 80094da:	f000 f839 	bl	8009550 <USBD_GetLen>
 80094de:	4603      	mov	r3, r0
 80094e0:	3301      	adds	r3, #1
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	e001      	b.n	80094ee <USBD_GetString+0x42>
 80094ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	4413      	add	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	3301      	adds	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	4413      	add	r3, r2
 800950a:	2203      	movs	r2, #3
 800950c:	701a      	strb	r2, [r3, #0]
  idx++;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	3301      	adds	r3, #1
 8009512:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009514:	e013      	b.n	800953e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	4413      	add	r3, r2
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	7812      	ldrb	r2, [r2, #0]
 8009520:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3301      	adds	r3, #1
 8009526:	613b      	str	r3, [r7, #16]
    idx++;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	3301      	adds	r3, #1
 800952c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	4413      	add	r3, r2
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
    idx++;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	3301      	adds	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e7      	bne.n	8009516 <USBD_GetString+0x6a>
 8009546:	e000      	b.n	800954a <USBD_GetString+0x9e>
    return;
 8009548:	bf00      	nop
  }
}
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009560:	e005      	b.n	800956e <USBD_GetLen+0x1e>
  {
    len++;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	3301      	adds	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	3301      	adds	r3, #1
 800956c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1f5      	bne.n	8009562 <USBD_GetLen+0x12>
  }

  return len;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2202      	movs	r2, #2
 8009594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	2100      	movs	r1, #0
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fd79 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	2100      	movs	r1, #0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 fd68 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2203      	movs	r2, #3
 80095ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	2100      	movs	r1, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 fd6c 	bl	800a0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	2100      	movs	r1, #0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fd5b 	bl	800a0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2204      	movs	r2, #4
 8009644:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fd27 	bl	800a0a2 <USBD_LL_Transmit>

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2205      	movs	r2, #5
 800966a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800966e:	2300      	movs	r3, #0
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fd35 	bl	800a0e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009688:	2200      	movs	r2, #0
 800968a:	4912      	ldr	r1, [pc, #72]	@ (80096d4 <MX_USB_DEVICE_Init+0x50>)
 800968c:	4812      	ldr	r0, [pc, #72]	@ (80096d8 <MX_USB_DEVICE_Init+0x54>)
 800968e:	f7fe fce9 	bl	8008064 <USBD_Init>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009698:	f7f7 fd3a 	bl	8001110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800969c:	490f      	ldr	r1, [pc, #60]	@ (80096dc <MX_USB_DEVICE_Init+0x58>)
 800969e:	480e      	ldr	r0, [pc, #56]	@ (80096d8 <MX_USB_DEVICE_Init+0x54>)
 80096a0:	f7fe fd1e 	bl	80080e0 <USBD_RegisterClass>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096aa:	f7f7 fd31 	bl	8001110 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80096ae:	490c      	ldr	r1, [pc, #48]	@ (80096e0 <MX_USB_DEVICE_Init+0x5c>)
 80096b0:	4809      	ldr	r0, [pc, #36]	@ (80096d8 <MX_USB_DEVICE_Init+0x54>)
 80096b2:	f7fe fc8b 	bl	8007fcc <USBD_AUDIO_RegisterInterface>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096bc:	f7f7 fd28 	bl	8001110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096c0:	4805      	ldr	r0, [pc, #20]	@ (80096d8 <MX_USB_DEVICE_Init+0x54>)
 80096c2:	f7fe fd51 	bl	8008168 <USBD_Start>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096cc:	f7f7 fd20 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096d0:	bf00      	nop
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200000e0 	.word	0x200000e0
 80096d8:	20000800 	.word	0x20000800
 80096dc:	2000000c 	.word	0x2000000c
 80096e0:	200000c4 	.word	0x200000c4

080096e4 <SAI_Transmit_DMA>:


/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void SAI_Transmit_DMA(uint8_t *pData, uint16_t Size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	807b      	strh	r3, [r7, #2]
  if (HAL_SAI_Transmit_DMA(&hsai_BlockA1, pData, Size) != HAL_OK)
 80096f0:	887b      	ldrh	r3, [r7, #2]
 80096f2:	461a      	mov	r2, r3
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4806      	ldr	r0, [pc, #24]	@ (8009710 <SAI_Transmit_DMA+0x2c>)
 80096f8:	f7fb fe42 	bl	8005380 <HAL_SAI_Transmit_DMA>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <SAI_Transmit_DMA+0x22>
  {
    Error_Handler();
 8009702:	f7f7 fd05 	bl	8001110 <Error_Handler>
  }
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200005d8 	.word	0x200005d8

08009714 <SAI_Buffer_Fill>:

/* Funkcja wewnętrzna do wypełniania bufora DMA danymi z ring buffera */
static void SAI_Buffer_Fill(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800971a:	af00      	add	r7, sp, #0
  uint32_t available;
  if (writeIndex >= readIndex) {
 800971c:	4b24      	ldr	r3, [pc, #144]	@ (80097b0 <SAI_Buffer_Fill+0x9c>)
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	4b24      	ldr	r3, [pc, #144]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d307      	bcc.n	8009738 <SAI_Buffer_Fill+0x24>
    available = writeIndex - readIndex;
 8009728:	4b21      	ldr	r3, [pc, #132]	@ (80097b0 <SAI_Buffer_Fill+0x9c>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	4b21      	ldr	r3, [pc, #132]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8009736:	e008      	b.n	800974a <SAI_Buffer_Fill+0x36>
  } else {
    available = AUDIO_RING_BUFFER_SIZE - (readIndex - writeIndex);
 8009738:	4b1d      	ldr	r3, [pc, #116]	@ (80097b0 <SAI_Buffer_Fill+0x9c>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	4b1d      	ldr	r3, [pc, #116]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009746:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  }

  if (available >= SAI_DMA_CHUNK_SIZE)
 800974a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800974e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009752:	d327      	bcc.n	80097a4 <SAI_Buffer_Fill+0x90>
  {
    uint8_t dmaBuffer[SAI_DMA_CHUNK_SIZE];
    for (uint32_t i = 0; i < SAI_DMA_CHUNK_SIZE; i++)
 8009754:	2300      	movs	r3, #0
 8009756:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800975a:	e018      	b.n	800978e <SAI_Buffer_Fill+0x7a>
    {
      dmaBuffer[i] = audioRingBuffer[readIndex];
 800975c:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a15      	ldr	r2, [pc, #84]	@ (80097b8 <SAI_Buffer_Fill+0xa4>)
 8009762:	5cd1      	ldrb	r1, [r2, r3]
 8009764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009768:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800976c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009770:	4413      	add	r3, r2
 8009772:	460a      	mov	r2, r1
 8009774:	701a      	strb	r2, [r3, #0]
      readIndex = (readIndex + 1U) % AUDIO_RING_BUFFER_SIZE;
 8009776:	4b0f      	ldr	r3, [pc, #60]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009780:	4a0c      	ldr	r2, [pc, #48]	@ (80097b4 <SAI_Buffer_Fill+0xa0>)
 8009782:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < SAI_DMA_CHUNK_SIZE; i++)
 8009784:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009788:	3301      	adds	r3, #1
 800978a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800978e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009796:	d3e1      	bcc.n	800975c <SAI_Buffer_Fill+0x48>
    }
    SAI_Transmit_DMA(dmaBuffer, SAI_DMA_CHUNK_SIZE);
 8009798:	463b      	mov	r3, r7
 800979a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff ffa0 	bl	80096e4 <SAI_Transmit_DMA>
  }
}
 80097a4:	bf00      	nop
 80097a6:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20001adc 	.word	0x20001adc
 80097b4:	20001ae0 	.word	0x20001ae0
 80097b8:	20000adc 	.word	0x20000adc

080097bc <AUDIO_Init_FS>:
  * @param  Volume: Początkowy poziom głośności
  * @param  options: Opcje inicjalizacji (zarezerwowane)
  * @retval USBD_OK w przypadku powodzenia, USBD_FAIL w przeciwnym
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN AUDIO_Init_FS */
  (void)AudioFreq;
  (void)Volume;
  (void)options;
  /* Inicjalizacja ring buffera i indeksów */
  writeIndex = 0U;
 80097c8:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <AUDIO_Init_FS+0x28>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
  readIndex  = 0U;
 80097ce:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <AUDIO_Init_FS+0x2c>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]

  /* Tu można wywołać dodatkową inicjalizację SAI, np. konfigurację DMA.
     W tej podstawowej implementacji zakładamy, że SAI jest skonfigurowany osobno. */

  return (USBD_OK);
 80097d4:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_Init_FS */
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	20001adc 	.word	0x20001adc
 80097e8:	20001ae0 	.word	0x20001ae0

080097ec <AUDIO_DeInit_FS>:
  * @brief  De-inicjalizuje warstwę AUDIO.
  * @param  options: Opcje de-inicjalizacji (zarezerwowane)
  * @retval USBD_OK
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUDIO_DeInit_FS */
  (void)options;
  return (USBD_OK);
 80097f4:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_DeInit_FS */
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <AUDIO_AudioCmd_FS>:
  * @param  size: Rozmiar danych (w bajtach)
  * @param  cmd: Polecenie (np. AUDIO_CMD_START, AUDIO_CMD_PLAY)
  * @retval USBD_OK
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN AUDIO_AudioCmd_FS */
  (void)cmd;

  /* Sprawdzenie przepełnienia bufora */
  uint32_t spaceAvailable = (writeIndex >= readIndex) ?
 8009812:	4b1d      	ldr	r3, [pc, #116]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	4b1d      	ldr	r3, [pc, #116]	@ (800988c <AUDIO_AudioCmd_FS+0x88>)
 8009818:	681b      	ldr	r3, [r3, #0]
                            (AUDIO_RING_BUFFER_SIZE - (writeIndex - readIndex)) :
 800981a:	429a      	cmp	r2, r3
 800981c:	d307      	bcc.n	800982e <AUDIO_AudioCmd_FS+0x2a>
 800981e:	4b1b      	ldr	r3, [pc, #108]	@ (800988c <AUDIO_AudioCmd_FS+0x88>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b19      	ldr	r3, [pc, #100]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800982c:	e004      	b.n	8009838 <AUDIO_AudioCmd_FS+0x34>
                            (readIndex - writeIndex);
 800982e:	4b17      	ldr	r3, [pc, #92]	@ (800988c <AUDIO_AudioCmd_FS+0x88>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b15      	ldr	r3, [pc, #84]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 8009834:	681b      	ldr	r3, [r3, #0]
                            (AUDIO_RING_BUFFER_SIZE - (writeIndex - readIndex)) :
 8009836:	1ad3      	subs	r3, r2, r3
  uint32_t spaceAvailable = (writeIndex >= readIndex) ?
 8009838:	613b      	str	r3, [r7, #16]

  if (size > spaceAvailable)
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	429a      	cmp	r2, r3
 8009840:	d901      	bls.n	8009846 <AUDIO_AudioCmd_FS+0x42>
  {
    /* Przepełnienie bufora - można dodać obsługę błędu */
    return USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	e01b      	b.n	800987e <AUDIO_AudioCmd_FS+0x7a>
  }

  /* Kopiowanie danych do ring buffera */
  for (uint32_t i = 0; i < size; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e011      	b.n	8009870 <AUDIO_AudioCmd_FS+0x6c>
  {
    audioRingBuffer[writeIndex] = pbuf[i];
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	441a      	add	r2, r3
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	7811      	ldrb	r1, [r2, #0]
 8009858:	4a0d      	ldr	r2, [pc, #52]	@ (8009890 <AUDIO_AudioCmd_FS+0x8c>)
 800985a:	54d1      	strb	r1, [r2, r3]
    writeIndex = (writeIndex + 1U) % AUDIO_RING_BUFFER_SIZE;
 800985c:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009866:	4a08      	ldr	r2, [pc, #32]	@ (8009888 <AUDIO_AudioCmd_FS+0x84>)
 8009868:	6013      	str	r3, [r2, #0]
  for (uint32_t i = 0; i < size; i++)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	3301      	adds	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	d3e9      	bcc.n	800984c <AUDIO_AudioCmd_FS+0x48>
  }

  /* Wywołanie funkcji wypełniającej bufor DMA */
  SAI_Buffer_Fill();
 8009878:	f7ff ff4c 	bl	8009714 <SAI_Buffer_Fill>

  return (USBD_OK);
 800987c:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_AudioCmd_FS */
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20001adc 	.word	0x20001adc
 800988c:	20001ae0 	.word	0x20001ae0
 8009890:	20000adc 	.word	0x20000adc

08009894 <AUDIO_VolumeCtl_FS>:
  * @brief  Ustawia głośność odtwarzania.
  * @param  vol: Poziom głośności (0-100)
  * @retval USBD_OK
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN AUDIO_VolumeCtl_FS */
  (void)vol;
  return (USBD_OK);
 800989e:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_VolumeCtl_FS */
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <AUDIO_MuteCtl_FS>:
  * @brief  Ustawia tryb mute.
  * @param  cmd: Komenda mute (0 = off, 1 = on)
  * @retval USBD_OK
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN AUDIO_MuteCtl_FS */
  (void)cmd;
  return (USBD_OK);
 80098b6:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_MuteCtl_FS */
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <AUDIO_PeriodicTC_FS>:
  * @param  size: Rozmiar danych (nieużywany)
  * @param  cmd: Kod operacji (nieużywany)
  * @retval USBD_OK
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	4613      	mov	r3, r2
 80098d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN AUDIO_PeriodicTC_FS */
  (void)pbuf;
  (void)size;
  (void)cmd;
  return (USBD_OK);
 80098d2:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_PeriodicTC_FS */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <AUDIO_GetState_FS>:
/**
  * @brief  Zwraca aktualny stan interfejsu AUDIO.
  * @retval Stan audio (tutaj zawsze USBD_OK)
  */
static int8_t AUDIO_GetState_FS(void)
{
 80098e0:	b480      	push	{r7}
 80098e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN AUDIO_GetState_FS */
  return (USBD_OK);
 80098e4:	2300      	movs	r3, #0
  /* USER CODE END AUDIO_GetState_FS */
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <AUDIO_FeedbackUpdate_44100Hz>:
/**
  * @brief  Aktualizuje dane feedback dla hosta.
  *         W tej implementacji feedback pozostaje stały – odpowiada 44100 Hz.
  */
void AUDIO_FeedbackUpdate_44100Hz(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* Ustawienie stałego feedbacku w formacie 10.14 (little-endian) */
  feedbackData[0] = 0x00;  /* LSB */
 80098f4:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <AUDIO_FeedbackUpdate_44100Hz+0x28>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
  feedbackData[1] = 0x11;
 80098fa:	4b07      	ldr	r3, [pc, #28]	@ (8009918 <AUDIO_FeedbackUpdate_44100Hz+0x28>)
 80098fc:	2211      	movs	r2, #17
 80098fe:	705a      	strb	r2, [r3, #1]
  feedbackData[2] = 0x2B;  /* MSB */
 8009900:	4b05      	ldr	r3, [pc, #20]	@ (8009918 <AUDIO_FeedbackUpdate_44100Hz+0x28>)
 8009902:	222b      	movs	r2, #43	@ 0x2b
 8009904:	709a      	strb	r2, [r3, #2]

  /* Transmisja danych feedback przez odpowiedni endpoint IN (np. 0x81) */
  USBD_LL_Transmit(&hUsbDeviceFS, 0x81, feedbackData, 3);
 8009906:	2303      	movs	r3, #3
 8009908:	4a03      	ldr	r2, [pc, #12]	@ (8009918 <AUDIO_FeedbackUpdate_44100Hz+0x28>)
 800990a:	2181      	movs	r1, #129	@ 0x81
 800990c:	4803      	ldr	r0, [pc, #12]	@ (800991c <AUDIO_FeedbackUpdate_44100Hz+0x2c>)
 800990e:	f000 fbc8 	bl	800a0a2 <USBD_LL_Transmit>
}
 8009912:	bf00      	nop
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	200000c0 	.word	0x200000c0
 800991c:	20000800 	.word	0x20000800

08009920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2212      	movs	r2, #18
 8009930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009932:	4b03      	ldr	r3, [pc, #12]	@ (8009940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	20000100 	.word	0x20000100

08009944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2204      	movs	r2, #4
 8009954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009956:	4b03      	ldr	r3, [pc, #12]	@ (8009964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20000120 	.word	0x20000120

08009968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	@ (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009980:	f7ff fd94 	bl	80094ac <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800998c:	f7ff fd8e 	bl	80094ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20001ae4 	.word	0x20001ae4
 80099a0:	0800c2c0 	.word	0x0800c2c0

080099a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	4904      	ldr	r1, [pc, #16]	@ (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099b4:	4804      	ldr	r0, [pc, #16]	@ (80099c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099b6:	f7ff fd79 	bl	80094ac <USBD_GetString>
  return USBD_StrDesc;
 80099ba:	4b02      	ldr	r3, [pc, #8]	@ (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20001ae4 	.word	0x20001ae4
 80099c8:	0800c2d0 	.word	0x0800c2d0

080099cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	221a      	movs	r2, #26
 80099dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099de:	f000 f855 	bl	8009a8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099e2:	4b02      	ldr	r3, [pc, #8]	@ (80099ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20000124 	.word	0x20000124

080099f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	@ (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a08:	f7ff fd50 	bl	80094ac <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	@ (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a14:	f7ff fd4a 	bl	80094ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001ae4 	.word	0x20001ae4
 8009a28:	0800c2dc 	.word	0x0800c2dc

08009a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	@ (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a44:	f7ff fd32 	bl	80094ac <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	@ (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a50:	f7ff fd2c 	bl	80094ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20001ae4 	.word	0x20001ae4
 8009a64:	0800c2ec 	.word	0x0800c2ec

08009a68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	220c      	movs	r2, #12
 8009a78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009a7a:	4b03      	ldr	r3, [pc, #12]	@ (8009a88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	20000114 	.word	0x20000114

08009a8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a92:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad0 <Get_SerialNum+0x44>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a98:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad4 <Get_SerialNum+0x48>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <Get_SerialNum+0x4c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d009      	beq.n	8009ac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	4909      	ldr	r1, [pc, #36]	@ (8009adc <Get_SerialNum+0x50>)
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 f814 	bl	8009ae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009abc:	2204      	movs	r2, #4
 8009abe:	4908      	ldr	r1, [pc, #32]	@ (8009ae0 <Get_SerialNum+0x54>)
 8009ac0:	68b8      	ldr	r0, [r7, #8]
 8009ac2:	f000 f80f 	bl	8009ae4 <IntToUnicode>
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	1fff7a10 	.word	0x1fff7a10
 8009ad4:	1fff7a14 	.word	0x1fff7a14
 8009ad8:	1fff7a18 	.word	0x1fff7a18
 8009adc:	20000126 	.word	0x20000126
 8009ae0:	20000136 	.word	0x20000136

08009ae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]
 8009afa:	e027      	b.n	8009b4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	0f1b      	lsrs	r3, r3, #28
 8009b00:	2b09      	cmp	r3, #9
 8009b02:	d80b      	bhi.n	8009b1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	0f1b      	lsrs	r3, r3, #28
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	440b      	add	r3, r1
 8009b14:	3230      	adds	r2, #48	@ 0x30
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	e00a      	b.n	8009b32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	0f1b      	lsrs	r3, r3, #28
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4619      	mov	r1, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	440b      	add	r3, r1
 8009b2c:	3237      	adds	r2, #55	@ 0x37
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4413      	add	r3, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	75fb      	strb	r3, [r7, #23]
 8009b4c:	7dfa      	ldrb	r2, [r7, #23]
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d3d3      	bcc.n	8009afc <IntToUnicode+0x18>
  }
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b0a0      	sub	sp, #128	@ 0x80
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	609a      	str	r2, [r3, #8]
 8009b78:	60da      	str	r2, [r3, #12]
 8009b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009b7c:	f107 0310 	add.w	r3, r7, #16
 8009b80:	225c      	movs	r2, #92	@ 0x5c
 8009b82:	2100      	movs	r1, #0
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fd85 	bl	800a694 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b92:	d156      	bne.n	8009c42 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009b9e:	f107 0310 	add.w	r3, r7, #16
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fa f84e 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009bae:	f7f7 faaf 	bl	8001110 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	4b25      	ldr	r3, [pc, #148]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bba:	4a24      	ldr	r2, [pc, #144]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009bbc:	f043 0301 	orr.w	r3, r3, #1
 8009bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bc2:	4b22      	ldr	r3, [pc, #136]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009bce:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8009bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009be0:	230a      	movs	r3, #10
 8009be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009be4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009be8:	4619      	mov	r1, r3
 8009bea:	4819      	ldr	r0, [pc, #100]	@ (8009c50 <HAL_PCD_MspInit+0xec>)
 8009bec:	f7f8 fac4 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009bfe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c02:	4619      	mov	r1, r3
 8009c04:	4812      	ldr	r0, [pc, #72]	@ (8009c50 <HAL_PCD_MspInit+0xec>)
 8009c06:	f7f8 fab7 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c0a:	4b10      	ldr	r3, [pc, #64]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c14:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c16:	2300      	movs	r3, #0
 8009c18:	60bb      	str	r3, [r7, #8]
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c26:	4b09      	ldr	r3, [pc, #36]	@ (8009c4c <HAL_PCD_MspInit+0xe8>)
 8009c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c32:	2200      	movs	r2, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	2043      	movs	r0, #67	@ 0x43
 8009c38:	f7f7 fef1 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c3c:	2043      	movs	r0, #67	@ 0x43
 8009c3e:	f7f7 ff0a 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c42:	bf00      	nop
 8009c44:	3780      	adds	r7, #128	@ 0x80
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40023800 	.word	0x40023800
 8009c50:	40020000 	.word	0x40020000

08009c54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fe fac9 	bl	8008202 <USBD_LL_SetupStage>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009c8a:	78fa      	ldrb	r2, [r7, #3]
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f7fe fb03 	bl	80082ac <USBD_LL_DataOutStage>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	3320      	adds	r3, #32
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f7fe fb9c 	bl	8008412 <USBD_LL_DataInStage>
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fcd6 	bl	80086a2 <USBD_LL_SOF>
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d06:	2301      	movs	r3, #1
 8009d08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	79db      	ldrb	r3, [r3, #7]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
 8009d16:	e008      	b.n	8009d2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	79db      	ldrb	r3, [r3, #7]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d102      	bne.n	8009d26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d20:	2301      	movs	r3, #1
 8009d22:	73fb      	strb	r3, [r7, #15]
 8009d24:	e001      	b.n	8009d2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d26:	f7f7 f9f3 	bl	8001110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d30:	7bfa      	ldrb	r2, [r7, #15]
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe fc70 	bl	800861a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fc18 	bl	8008576 <USBD_LL_Reset>
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fc6b 	bl	800863a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6812      	ldr	r2, [r2, #0]
 8009d72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7adb      	ldrb	r3, [r3, #11]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d84:	4b04      	ldr	r3, [pc, #16]	@ (8009d98 <HAL_PCD_SuspendCallback+0x48>)
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4a03      	ldr	r2, [pc, #12]	@ (8009d98 <HAL_PCD_SuspendCallback+0x48>)
 8009d8a:	f043 0306 	orr.w	r3, r3, #6
 8009d8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed00 	.word	0xe000ed00

08009d9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fc61 	bl	8008672 <USBD_LL_Resume>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dca:	78fa      	ldrb	r2, [r7, #3]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fcb9 	bl	8008746 <USBD_LL_IsoOUTIncomplete>
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fc75 	bl	80086e2 <USBD_LL_IsoINIncomplete>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fccb 	bl	80087aa <USBD_LL_DevConnected>
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fcc8 	bl	80087c0 <USBD_LL_DevDisconnected>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d13c      	bne.n	8009ec2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e48:	4a20      	ldr	r2, [pc, #128]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a1e      	ldr	r2, [pc, #120]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e58:	4b1c      	ldr	r3, [pc, #112]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009e5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009e60:	4b1a      	ldr	r3, [pc, #104]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e62:	2206      	movs	r2, #6
 8009e64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e66:	4b19      	ldr	r3, [pc, #100]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e68:	2202      	movs	r2, #2
 8009e6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e72:	4b16      	ldr	r3, [pc, #88]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e74:	2202      	movs	r2, #2
 8009e76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e78:	4b14      	ldr	r3, [pc, #80]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e84:	4b11      	ldr	r3, [pc, #68]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e8a:	4b10      	ldr	r3, [pc, #64]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e96:	480d      	ldr	r0, [pc, #52]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009e98:	f7f8 fb1b 	bl	80024d2 <HAL_PCD_Init>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ea2:	f7f7 f935 	bl	8001110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ea6:	2180      	movs	r1, #128	@ 0x80
 8009ea8:	4808      	ldr	r0, [pc, #32]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009eaa:	f7f9 fd7c 	bl	80039a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009eae:	2240      	movs	r2, #64	@ 0x40
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4806      	ldr	r0, [pc, #24]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009eb4:	f7f9 fd30 	bl	8003918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009eb8:	2280      	movs	r2, #128	@ 0x80
 8009eba:	2101      	movs	r1, #1
 8009ebc:	4803      	ldr	r0, [pc, #12]	@ (8009ecc <USBD_LL_Init+0x94>)
 8009ebe:	f7f9 fd2b 	bl	8003918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20001ce4 	.word	0x20001ce4

08009ed0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f8 fc09 	bl	80026fe <HAL_PCD_Start>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f990 	bl	800a218 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	4603      	mov	r3, r0
 8009f16:	70fb      	strb	r3, [r7, #3]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70bb      	strb	r3, [r7, #2]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f2e:	78bb      	ldrb	r3, [r7, #2]
 8009f30:	883a      	ldrh	r2, [r7, #0]
 8009f32:	78f9      	ldrb	r1, [r7, #3]
 8009f34:	f7f9 f90a 	bl	800314c <HAL_PCD_EP_Open>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f96a 	bl	800a218 <USBD_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7f9 f955 	bl	8003220 <HAL_PCD_EP_Close>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 f94b 	bl	800a218 <USBD_Get_USB_Status>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f9 fa0d 	bl	80033ce <HAL_PCD_EP_SetStall>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f92c 	bl	800a218 <USBD_Get_USB_Status>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fe8:	78fa      	ldrb	r2, [r7, #3]
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7f9 fa51 	bl	8003494 <HAL_PCD_EP_ClrStall>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f90d 	bl	800a218 <USBD_Get_USB_Status>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a002:	7bbb      	ldrb	r3, [r7, #14]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a01e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	da0b      	bge.n	800a040 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	440b      	add	r3, r1
 800a03a:	3316      	adds	r3, #22
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	e00b      	b.n	800a058 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	4613      	mov	r3, r2
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a056:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7f9 f83e 	bl	8003104 <HAL_PCD_SetAddress>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f8c2 	bl	800a218 <USBD_Get_USB_Status>
 800a094:	4603      	mov	r3, r0
 800a096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a098:	7bbb      	ldrb	r3, [r7, #14]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0c0:	7af9      	ldrb	r1, [r7, #11]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	f7f9 f948 	bl	800335a <HAL_PCD_EP_Transmit>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 f8a1 	bl	800a218 <USBD_Get_USB_Status>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a102:	7af9      	ldrb	r1, [r7, #11]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	f7f9 f8d4 	bl	80032b4 <HAL_PCD_EP_Receive>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f880 	bl	800a218 <USBD_Get_USB_Status>
 800a118:	4603      	mov	r3, r0
 800a11a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a138:	78fa      	ldrb	r2, [r7, #3]
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7f9 f8f4 	bl	800332a <HAL_PCD_EP_GetRxCount>
 800a142:	4603      	mov	r3, r0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a158:	78fb      	ldrb	r3, [r7, #3]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <HAL_PCDEx_LPM_Callback+0x18>
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d01f      	beq.n	800a1a2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a162:	e03b      	b.n	800a1dc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7adb      	ldrb	r3, [r3, #11]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d007      	beq.n	800a17c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a16c:	f7f6 ff1a 	bl	8000fa4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a170:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a176:	f023 0306 	bic.w	r3, r3, #6
 800a17a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe fa69 	bl	8008672 <USBD_LL_Resume>
    break;
 800a1a0:	e01c      	b.n	800a1dc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe fa3a 	bl	800863a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7adb      	ldrb	r3, [r3, #11]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1ce:	4b05      	ldr	r3, [pc, #20]	@ (800a1e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	4a04      	ldr	r2, [pc, #16]	@ (800a1e4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1d4:	f043 0306 	orr.w	r3, r3, #6
 800a1d8:	6113      	str	r3, [r2, #16]
    break;
 800a1da:	bf00      	nop
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	@ (800a200 <USBD_static_malloc+0x18>)
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	200021c8 	.word	0x200021c8

0800a204 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]

}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d817      	bhi.n	800a25c <USBD_Get_USB_Status+0x44>
 800a22c:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <USBD_Get_USB_Status+0x1c>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a245 	.word	0x0800a245
 800a238:	0800a24b 	.word	0x0800a24b
 800a23c:	0800a251 	.word	0x0800a251
 800a240:	0800a257 	.word	0x0800a257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
    break;
 800a248:	e00b      	b.n	800a262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a24a:	2303      	movs	r3, #3
 800a24c:	73fb      	strb	r3, [r7, #15]
    break;
 800a24e:	e008      	b.n	800a262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a250:	2301      	movs	r3, #1
 800a252:	73fb      	strb	r3, [r7, #15]
    break;
 800a254:	e005      	b.n	800a262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a256:	2303      	movs	r3, #3
 800a258:	73fb      	strb	r3, [r7, #15]
    break;
 800a25a:	e002      	b.n	800a262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a25c:	2303      	movs	r3, #3
 800a25e:	73fb      	strb	r3, [r7, #15]
    break;
 800a260:	bf00      	nop
  }
  return usb_status;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <std>:
 800a270:	2300      	movs	r3, #0
 800a272:	b510      	push	{r4, lr}
 800a274:	4604      	mov	r4, r0
 800a276:	e9c0 3300 	strd	r3, r3, [r0]
 800a27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a27e:	6083      	str	r3, [r0, #8]
 800a280:	8181      	strh	r1, [r0, #12]
 800a282:	6643      	str	r3, [r0, #100]	@ 0x64
 800a284:	81c2      	strh	r2, [r0, #14]
 800a286:	6183      	str	r3, [r0, #24]
 800a288:	4619      	mov	r1, r3
 800a28a:	2208      	movs	r2, #8
 800a28c:	305c      	adds	r0, #92	@ 0x5c
 800a28e:	f000 fa01 	bl	800a694 <memset>
 800a292:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <std+0x58>)
 800a294:	6263      	str	r3, [r4, #36]	@ 0x24
 800a296:	4b0d      	ldr	r3, [pc, #52]	@ (800a2cc <std+0x5c>)
 800a298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <std+0x60>)
 800a29c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a29e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d4 <std+0x64>)
 800a2a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <std+0x68>)
 800a2a4:	6224      	str	r4, [r4, #32]
 800a2a6:	429c      	cmp	r4, r3
 800a2a8:	d006      	beq.n	800a2b8 <std+0x48>
 800a2aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2ae:	4294      	cmp	r4, r2
 800a2b0:	d002      	beq.n	800a2b8 <std+0x48>
 800a2b2:	33d0      	adds	r3, #208	@ 0xd0
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d105      	bne.n	800a2c4 <std+0x54>
 800a2b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f000 ba60 	b.w	800a784 <__retarget_lock_init_recursive>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800a4e5 	.word	0x0800a4e5
 800a2cc:	0800a507 	.word	0x0800a507
 800a2d0:	0800a53f 	.word	0x0800a53f
 800a2d4:	0800a563 	.word	0x0800a563
 800a2d8:	2000591c 	.word	0x2000591c

0800a2dc <stdio_exit_handler>:
 800a2dc:	4a02      	ldr	r2, [pc, #8]	@ (800a2e8 <stdio_exit_handler+0xc>)
 800a2de:	4903      	ldr	r1, [pc, #12]	@ (800a2ec <stdio_exit_handler+0x10>)
 800a2e0:	4803      	ldr	r0, [pc, #12]	@ (800a2f0 <stdio_exit_handler+0x14>)
 800a2e2:	f000 b869 	b.w	800a3b8 <_fwalk_sglue>
 800a2e6:	bf00      	nop
 800a2e8:	20000140 	.word	0x20000140
 800a2ec:	0800b025 	.word	0x0800b025
 800a2f0:	20000150 	.word	0x20000150

0800a2f4 <cleanup_stdio>:
 800a2f4:	6841      	ldr	r1, [r0, #4]
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <cleanup_stdio+0x34>)
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	b510      	push	{r4, lr}
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	d001      	beq.n	800a304 <cleanup_stdio+0x10>
 800a300:	f000 fe90 	bl	800b024 <_fflush_r>
 800a304:	68a1      	ldr	r1, [r4, #8]
 800a306:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <cleanup_stdio+0x38>)
 800a308:	4299      	cmp	r1, r3
 800a30a:	d002      	beq.n	800a312 <cleanup_stdio+0x1e>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fe89 	bl	800b024 <_fflush_r>
 800a312:	68e1      	ldr	r1, [r4, #12]
 800a314:	4b06      	ldr	r3, [pc, #24]	@ (800a330 <cleanup_stdio+0x3c>)
 800a316:	4299      	cmp	r1, r3
 800a318:	d004      	beq.n	800a324 <cleanup_stdio+0x30>
 800a31a:	4620      	mov	r0, r4
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a320:	f000 be80 	b.w	800b024 <_fflush_r>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop
 800a328:	2000591c 	.word	0x2000591c
 800a32c:	20005984 	.word	0x20005984
 800a330:	200059ec 	.word	0x200059ec

0800a334 <global_stdio_init.part.0>:
 800a334:	b510      	push	{r4, lr}
 800a336:	4b0b      	ldr	r3, [pc, #44]	@ (800a364 <global_stdio_init.part.0+0x30>)
 800a338:	4c0b      	ldr	r4, [pc, #44]	@ (800a368 <global_stdio_init.part.0+0x34>)
 800a33a:	4a0c      	ldr	r2, [pc, #48]	@ (800a36c <global_stdio_init.part.0+0x38>)
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	4620      	mov	r0, r4
 800a340:	2200      	movs	r2, #0
 800a342:	2104      	movs	r1, #4
 800a344:	f7ff ff94 	bl	800a270 <std>
 800a348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a34c:	2201      	movs	r2, #1
 800a34e:	2109      	movs	r1, #9
 800a350:	f7ff ff8e 	bl	800a270 <std>
 800a354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a358:	2202      	movs	r2, #2
 800a35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35e:	2112      	movs	r1, #18
 800a360:	f7ff bf86 	b.w	800a270 <std>
 800a364:	20005a54 	.word	0x20005a54
 800a368:	2000591c 	.word	0x2000591c
 800a36c:	0800a2dd 	.word	0x0800a2dd

0800a370 <__sfp_lock_acquire>:
 800a370:	4801      	ldr	r0, [pc, #4]	@ (800a378 <__sfp_lock_acquire+0x8>)
 800a372:	f000 ba08 	b.w	800a786 <__retarget_lock_acquire_recursive>
 800a376:	bf00      	nop
 800a378:	20005a5d 	.word	0x20005a5d

0800a37c <__sfp_lock_release>:
 800a37c:	4801      	ldr	r0, [pc, #4]	@ (800a384 <__sfp_lock_release+0x8>)
 800a37e:	f000 ba03 	b.w	800a788 <__retarget_lock_release_recursive>
 800a382:	bf00      	nop
 800a384:	20005a5d 	.word	0x20005a5d

0800a388 <__sinit>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	f7ff fff0 	bl	800a370 <__sfp_lock_acquire>
 800a390:	6a23      	ldr	r3, [r4, #32]
 800a392:	b11b      	cbz	r3, 800a39c <__sinit+0x14>
 800a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a398:	f7ff bff0 	b.w	800a37c <__sfp_lock_release>
 800a39c:	4b04      	ldr	r3, [pc, #16]	@ (800a3b0 <__sinit+0x28>)
 800a39e:	6223      	str	r3, [r4, #32]
 800a3a0:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <__sinit+0x2c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f5      	bne.n	800a394 <__sinit+0xc>
 800a3a8:	f7ff ffc4 	bl	800a334 <global_stdio_init.part.0>
 800a3ac:	e7f2      	b.n	800a394 <__sinit+0xc>
 800a3ae:	bf00      	nop
 800a3b0:	0800a2f5 	.word	0x0800a2f5
 800a3b4:	20005a54 	.word	0x20005a54

0800a3b8 <_fwalk_sglue>:
 800a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3bc:	4607      	mov	r7, r0
 800a3be:	4688      	mov	r8, r1
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	2600      	movs	r6, #0
 800a3c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3cc:	d505      	bpl.n	800a3da <_fwalk_sglue+0x22>
 800a3ce:	6824      	ldr	r4, [r4, #0]
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	d1f7      	bne.n	800a3c4 <_fwalk_sglue+0xc>
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d907      	bls.n	800a3f0 <_fwalk_sglue+0x38>
 800a3e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	d003      	beq.n	800a3f0 <_fwalk_sglue+0x38>
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	4306      	orrs	r6, r0
 800a3f0:	3568      	adds	r5, #104	@ 0x68
 800a3f2:	e7e9      	b.n	800a3c8 <_fwalk_sglue+0x10>

0800a3f4 <iprintf>:
 800a3f4:	b40f      	push	{r0, r1, r2, r3}
 800a3f6:	b507      	push	{r0, r1, r2, lr}
 800a3f8:	4906      	ldr	r1, [pc, #24]	@ (800a414 <iprintf+0x20>)
 800a3fa:	ab04      	add	r3, sp, #16
 800a3fc:	6808      	ldr	r0, [r1, #0]
 800a3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a402:	6881      	ldr	r1, [r0, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f000 fae3 	bl	800a9d0 <_vfiprintf_r>
 800a40a:	b003      	add	sp, #12
 800a40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a410:	b004      	add	sp, #16
 800a412:	4770      	bx	lr
 800a414:	2000014c 	.word	0x2000014c

0800a418 <putchar>:
 800a418:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <putchar+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	6882      	ldr	r2, [r0, #8]
 800a420:	f000 be8a 	b.w	800b138 <_putc_r>
 800a424:	2000014c 	.word	0x2000014c

0800a428 <_puts_r>:
 800a428:	6a03      	ldr	r3, [r0, #32]
 800a42a:	b570      	push	{r4, r5, r6, lr}
 800a42c:	6884      	ldr	r4, [r0, #8]
 800a42e:	4605      	mov	r5, r0
 800a430:	460e      	mov	r6, r1
 800a432:	b90b      	cbnz	r3, 800a438 <_puts_r+0x10>
 800a434:	f7ff ffa8 	bl	800a388 <__sinit>
 800a438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a43a:	07db      	lsls	r3, r3, #31
 800a43c:	d405      	bmi.n	800a44a <_puts_r+0x22>
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	0598      	lsls	r0, r3, #22
 800a442:	d402      	bmi.n	800a44a <_puts_r+0x22>
 800a444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a446:	f000 f99e 	bl	800a786 <__retarget_lock_acquire_recursive>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	0719      	lsls	r1, r3, #28
 800a44e:	d502      	bpl.n	800a456 <_puts_r+0x2e>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d135      	bne.n	800a4c2 <_puts_r+0x9a>
 800a456:	4621      	mov	r1, r4
 800a458:	4628      	mov	r0, r5
 800a45a:	f000 f8c5 	bl	800a5e8 <__swsetup_r>
 800a45e:	b380      	cbz	r0, 800a4c2 <_puts_r+0x9a>
 800a460:	f04f 35ff 	mov.w	r5, #4294967295
 800a464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a466:	07da      	lsls	r2, r3, #31
 800a468:	d405      	bmi.n	800a476 <_puts_r+0x4e>
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	059b      	lsls	r3, r3, #22
 800a46e:	d402      	bmi.n	800a476 <_puts_r+0x4e>
 800a470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a472:	f000 f989 	bl	800a788 <__retarget_lock_release_recursive>
 800a476:	4628      	mov	r0, r5
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	da04      	bge.n	800a488 <_puts_r+0x60>
 800a47e:	69a2      	ldr	r2, [r4, #24]
 800a480:	429a      	cmp	r2, r3
 800a482:	dc17      	bgt.n	800a4b4 <_puts_r+0x8c>
 800a484:	290a      	cmp	r1, #10
 800a486:	d015      	beq.n	800a4b4 <_puts_r+0x8c>
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	7019      	strb	r1, [r3, #0]
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a496:	3b01      	subs	r3, #1
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	2900      	cmp	r1, #0
 800a49c:	d1ed      	bne.n	800a47a <_puts_r+0x52>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da11      	bge.n	800a4c6 <_puts_r+0x9e>
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	210a      	movs	r1, #10
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f000 f85f 	bl	800a56a <__swbuf_r>
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0d7      	beq.n	800a460 <_puts_r+0x38>
 800a4b0:	250a      	movs	r5, #10
 800a4b2:	e7d7      	b.n	800a464 <_puts_r+0x3c>
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 f857 	bl	800a56a <__swbuf_r>
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d1e7      	bne.n	800a490 <_puts_r+0x68>
 800a4c0:	e7ce      	b.n	800a460 <_puts_r+0x38>
 800a4c2:	3e01      	subs	r6, #1
 800a4c4:	e7e4      	b.n	800a490 <_puts_r+0x68>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	6022      	str	r2, [r4, #0]
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	e7ee      	b.n	800a4b0 <_puts_r+0x88>
	...

0800a4d4 <puts>:
 800a4d4:	4b02      	ldr	r3, [pc, #8]	@ (800a4e0 <puts+0xc>)
 800a4d6:	4601      	mov	r1, r0
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	f7ff bfa5 	b.w	800a428 <_puts_r>
 800a4de:	bf00      	nop
 800a4e0:	2000014c 	.word	0x2000014c

0800a4e4 <__sread>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ec:	f000 f8fc 	bl	800a6e8 <_read_r>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	bfab      	itete	ge
 800a4f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f8:	181b      	addge	r3, r3, r0
 800a4fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4fe:	bfac      	ite	ge
 800a500:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a502:	81a3      	strhlt	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__swrite>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	461f      	mov	r7, r3
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	05db      	lsls	r3, r3, #23
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4616      	mov	r6, r2
 800a516:	d505      	bpl.n	800a524 <__swrite+0x1e>
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	2302      	movs	r3, #2
 800a51e:	2200      	movs	r2, #0
 800a520:	f000 f8d0 	bl	800a6c4 <_lseek_r>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f000 b8e7 	b.w	800a70c <_write_r>

0800a53e <__sseek>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a546:	f000 f8bd 	bl	800a6c4 <_lseek_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	bf15      	itete	ne
 800a550:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a552:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a556:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a55a:	81a3      	strheq	r3, [r4, #12]
 800a55c:	bf18      	it	ne
 800a55e:	81a3      	strhne	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__sclose>:
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 b89d 	b.w	800a6a4 <_close_r>

0800a56a <__swbuf_r>:
 800a56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56c:	460e      	mov	r6, r1
 800a56e:	4614      	mov	r4, r2
 800a570:	4605      	mov	r5, r0
 800a572:	b118      	cbz	r0, 800a57c <__swbuf_r+0x12>
 800a574:	6a03      	ldr	r3, [r0, #32]
 800a576:	b90b      	cbnz	r3, 800a57c <__swbuf_r+0x12>
 800a578:	f7ff ff06 	bl	800a388 <__sinit>
 800a57c:	69a3      	ldr	r3, [r4, #24]
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	071a      	lsls	r2, r3, #28
 800a584:	d501      	bpl.n	800a58a <__swbuf_r+0x20>
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b943      	cbnz	r3, 800a59c <__swbuf_r+0x32>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 f82b 	bl	800a5e8 <__swsetup_r>
 800a592:	b118      	cbz	r0, 800a59c <__swbuf_r+0x32>
 800a594:	f04f 37ff 	mov.w	r7, #4294967295
 800a598:	4638      	mov	r0, r7
 800a59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	6922      	ldr	r2, [r4, #16]
 800a5a0:	1a98      	subs	r0, r3, r2
 800a5a2:	6963      	ldr	r3, [r4, #20]
 800a5a4:	b2f6      	uxtb	r6, r6
 800a5a6:	4283      	cmp	r3, r0
 800a5a8:	4637      	mov	r7, r6
 800a5aa:	dc05      	bgt.n	800a5b8 <__swbuf_r+0x4e>
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 fd38 	bl	800b024 <_fflush_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d1ed      	bne.n	800a594 <__swbuf_r+0x2a>
 800a5b8:	68a3      	ldr	r3, [r4, #8]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	6022      	str	r2, [r4, #0]
 800a5c4:	701e      	strb	r6, [r3, #0]
 800a5c6:	6962      	ldr	r2, [r4, #20]
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d004      	beq.n	800a5d8 <__swbuf_r+0x6e>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	07db      	lsls	r3, r3, #31
 800a5d2:	d5e1      	bpl.n	800a598 <__swbuf_r+0x2e>
 800a5d4:	2e0a      	cmp	r6, #10
 800a5d6:	d1df      	bne.n	800a598 <__swbuf_r+0x2e>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f000 fd22 	bl	800b024 <_fflush_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d0d9      	beq.n	800a598 <__swbuf_r+0x2e>
 800a5e4:	e7d6      	b.n	800a594 <__swbuf_r+0x2a>
	...

0800a5e8 <__swsetup_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4b29      	ldr	r3, [pc, #164]	@ (800a690 <__swsetup_r+0xa8>)
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	b118      	cbz	r0, 800a5fc <__swsetup_r+0x14>
 800a5f4:	6a03      	ldr	r3, [r0, #32]
 800a5f6:	b90b      	cbnz	r3, 800a5fc <__swsetup_r+0x14>
 800a5f8:	f7ff fec6 	bl	800a388 <__sinit>
 800a5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a600:	0719      	lsls	r1, r3, #28
 800a602:	d422      	bmi.n	800a64a <__swsetup_r+0x62>
 800a604:	06da      	lsls	r2, r3, #27
 800a606:	d407      	bmi.n	800a618 <__swsetup_r+0x30>
 800a608:	2209      	movs	r2, #9
 800a60a:	602a      	str	r2, [r5, #0]
 800a60c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	f04f 30ff 	mov.w	r0, #4294967295
 800a616:	e033      	b.n	800a680 <__swsetup_r+0x98>
 800a618:	0758      	lsls	r0, r3, #29
 800a61a:	d512      	bpl.n	800a642 <__swsetup_r+0x5a>
 800a61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a61e:	b141      	cbz	r1, 800a632 <__swsetup_r+0x4a>
 800a620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a624:	4299      	cmp	r1, r3
 800a626:	d002      	beq.n	800a62e <__swsetup_r+0x46>
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f8af 	bl	800a78c <_free_r>
 800a62e:	2300      	movs	r3, #0
 800a630:	6363      	str	r3, [r4, #52]	@ 0x34
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	2300      	movs	r3, #0
 800a63c:	6063      	str	r3, [r4, #4]
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f043 0308 	orr.w	r3, r3, #8
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	b94b      	cbnz	r3, 800a662 <__swsetup_r+0x7a>
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a658:	d003      	beq.n	800a662 <__swsetup_r+0x7a>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f000 fd2f 	bl	800b0c0 <__smakebuf_r>
 800a662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a666:	f013 0201 	ands.w	r2, r3, #1
 800a66a:	d00a      	beq.n	800a682 <__swsetup_r+0x9a>
 800a66c:	2200      	movs	r2, #0
 800a66e:	60a2      	str	r2, [r4, #8]
 800a670:	6962      	ldr	r2, [r4, #20]
 800a672:	4252      	negs	r2, r2
 800a674:	61a2      	str	r2, [r4, #24]
 800a676:	6922      	ldr	r2, [r4, #16]
 800a678:	b942      	cbnz	r2, 800a68c <__swsetup_r+0xa4>
 800a67a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a67e:	d1c5      	bne.n	800a60c <__swsetup_r+0x24>
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	0799      	lsls	r1, r3, #30
 800a684:	bf58      	it	pl
 800a686:	6962      	ldrpl	r2, [r4, #20]
 800a688:	60a2      	str	r2, [r4, #8]
 800a68a:	e7f4      	b.n	800a676 <__swsetup_r+0x8e>
 800a68c:	2000      	movs	r0, #0
 800a68e:	e7f7      	b.n	800a680 <__swsetup_r+0x98>
 800a690:	2000014c 	.word	0x2000014c

0800a694 <memset>:
 800a694:	4402      	add	r2, r0
 800a696:	4603      	mov	r3, r0
 800a698:	4293      	cmp	r3, r2
 800a69a:	d100      	bne.n	800a69e <memset+0xa>
 800a69c:	4770      	bx	lr
 800a69e:	f803 1b01 	strb.w	r1, [r3], #1
 800a6a2:	e7f9      	b.n	800a698 <memset+0x4>

0800a6a4 <_close_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	@ (800a6c0 <_close_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f6 ff2b 	bl	800150a <_close>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_close_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_close_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20005a58 	.word	0x20005a58

0800a6c4 <_lseek_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	@ (800a6e4 <_lseek_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f6 ff40 	bl	8001558 <_lseek>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_lseek_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_lseek_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20005a58 	.word	0x20005a58

0800a6e8 <_read_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	@ (800a708 <_read_r+0x20>)
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f6 fece 	bl	8001498 <_read>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_read_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_read_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20005a58 	.word	0x20005a58

0800a70c <_write_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	@ (800a72c <_write_r+0x20>)
 800a710:	4604      	mov	r4, r0
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	2200      	movs	r2, #0
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f6 fed9 	bl	80014d2 <_write>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_write_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_write_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20005a58 	.word	0x20005a58

0800a730 <__errno>:
 800a730:	4b01      	ldr	r3, [pc, #4]	@ (800a738 <__errno+0x8>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	2000014c 	.word	0x2000014c

0800a73c <__libc_init_array>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4d0d      	ldr	r5, [pc, #52]	@ (800a774 <__libc_init_array+0x38>)
 800a740:	4c0d      	ldr	r4, [pc, #52]	@ (800a778 <__libc_init_array+0x3c>)
 800a742:	1b64      	subs	r4, r4, r5
 800a744:	10a4      	asrs	r4, r4, #2
 800a746:	2600      	movs	r6, #0
 800a748:	42a6      	cmp	r6, r4
 800a74a:	d109      	bne.n	800a760 <__libc_init_array+0x24>
 800a74c:	4d0b      	ldr	r5, [pc, #44]	@ (800a77c <__libc_init_array+0x40>)
 800a74e:	4c0c      	ldr	r4, [pc, #48]	@ (800a780 <__libc_init_array+0x44>)
 800a750:	f001 fd8a 	bl	800c268 <_init>
 800a754:	1b64      	subs	r4, r4, r5
 800a756:	10a4      	asrs	r4, r4, #2
 800a758:	2600      	movs	r6, #0
 800a75a:	42a6      	cmp	r6, r4
 800a75c:	d105      	bne.n	800a76a <__libc_init_array+0x2e>
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	f855 3b04 	ldr.w	r3, [r5], #4
 800a764:	4798      	blx	r3
 800a766:	3601      	adds	r6, #1
 800a768:	e7ee      	b.n	800a748 <__libc_init_array+0xc>
 800a76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76e:	4798      	blx	r3
 800a770:	3601      	adds	r6, #1
 800a772:	e7f2      	b.n	800a75a <__libc_init_array+0x1e>
 800a774:	0800c530 	.word	0x0800c530
 800a778:	0800c530 	.word	0x0800c530
 800a77c:	0800c530 	.word	0x0800c530
 800a780:	0800c534 	.word	0x0800c534

0800a784 <__retarget_lock_init_recursive>:
 800a784:	4770      	bx	lr

0800a786 <__retarget_lock_acquire_recursive>:
 800a786:	4770      	bx	lr

0800a788 <__retarget_lock_release_recursive>:
 800a788:	4770      	bx	lr
	...

0800a78c <_free_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	d041      	beq.n	800a818 <_free_r+0x8c>
 800a794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a798:	1f0c      	subs	r4, r1, #4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfb8      	it	lt
 800a79e:	18e4      	addlt	r4, r4, r3
 800a7a0:	f000 f8e0 	bl	800a964 <__malloc_lock>
 800a7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a81c <_free_r+0x90>)
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	b933      	cbnz	r3, 800a7b8 <_free_r+0x2c>
 800a7aa:	6063      	str	r3, [r4, #4]
 800a7ac:	6014      	str	r4, [r2, #0]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b4:	f000 b8dc 	b.w	800a970 <__malloc_unlock>
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d908      	bls.n	800a7ce <_free_r+0x42>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	1821      	adds	r1, r4, r0
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	bf01      	itttt	eq
 800a7c4:	6819      	ldreq	r1, [r3, #0]
 800a7c6:	685b      	ldreq	r3, [r3, #4]
 800a7c8:	1809      	addeq	r1, r1, r0
 800a7ca:	6021      	streq	r1, [r4, #0]
 800a7cc:	e7ed      	b.n	800a7aa <_free_r+0x1e>
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_free_r+0x4c>
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d9fa      	bls.n	800a7ce <_free_r+0x42>
 800a7d8:	6811      	ldr	r1, [r2, #0]
 800a7da:	1850      	adds	r0, r2, r1
 800a7dc:	42a0      	cmp	r0, r4
 800a7de:	d10b      	bne.n	800a7f8 <_free_r+0x6c>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	4401      	add	r1, r0
 800a7e4:	1850      	adds	r0, r2, r1
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	d1e0      	bne.n	800a7ae <_free_r+0x22>
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	6053      	str	r3, [r2, #4]
 800a7f2:	4408      	add	r0, r1
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	e7da      	b.n	800a7ae <_free_r+0x22>
 800a7f8:	d902      	bls.n	800a800 <_free_r+0x74>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	e7d6      	b.n	800a7ae <_free_r+0x22>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	1821      	adds	r1, r4, r0
 800a804:	428b      	cmp	r3, r1
 800a806:	bf04      	itt	eq
 800a808:	6819      	ldreq	r1, [r3, #0]
 800a80a:	685b      	ldreq	r3, [r3, #4]
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	bf04      	itt	eq
 800a810:	1809      	addeq	r1, r1, r0
 800a812:	6021      	streq	r1, [r4, #0]
 800a814:	6054      	str	r4, [r2, #4]
 800a816:	e7ca      	b.n	800a7ae <_free_r+0x22>
 800a818:	bd38      	pop	{r3, r4, r5, pc}
 800a81a:	bf00      	nop
 800a81c:	20005a64 	.word	0x20005a64

0800a820 <sbrk_aligned>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	4e0f      	ldr	r6, [pc, #60]	@ (800a860 <sbrk_aligned+0x40>)
 800a824:	460c      	mov	r4, r1
 800a826:	6831      	ldr	r1, [r6, #0]
 800a828:	4605      	mov	r5, r0
 800a82a:	b911      	cbnz	r1, 800a832 <sbrk_aligned+0x12>
 800a82c:	f000 fcda 	bl	800b1e4 <_sbrk_r>
 800a830:	6030      	str	r0, [r6, #0]
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 fcd5 	bl	800b1e4 <_sbrk_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d103      	bne.n	800a846 <sbrk_aligned+0x26>
 800a83e:	f04f 34ff 	mov.w	r4, #4294967295
 800a842:	4620      	mov	r0, r4
 800a844:	bd70      	pop	{r4, r5, r6, pc}
 800a846:	1cc4      	adds	r4, r0, #3
 800a848:	f024 0403 	bic.w	r4, r4, #3
 800a84c:	42a0      	cmp	r0, r4
 800a84e:	d0f8      	beq.n	800a842 <sbrk_aligned+0x22>
 800a850:	1a21      	subs	r1, r4, r0
 800a852:	4628      	mov	r0, r5
 800a854:	f000 fcc6 	bl	800b1e4 <_sbrk_r>
 800a858:	3001      	adds	r0, #1
 800a85a:	d1f2      	bne.n	800a842 <sbrk_aligned+0x22>
 800a85c:	e7ef      	b.n	800a83e <sbrk_aligned+0x1e>
 800a85e:	bf00      	nop
 800a860:	20005a60 	.word	0x20005a60

0800a864 <_malloc_r>:
 800a864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a868:	1ccd      	adds	r5, r1, #3
 800a86a:	f025 0503 	bic.w	r5, r5, #3
 800a86e:	3508      	adds	r5, #8
 800a870:	2d0c      	cmp	r5, #12
 800a872:	bf38      	it	cc
 800a874:	250c      	movcc	r5, #12
 800a876:	2d00      	cmp	r5, #0
 800a878:	4606      	mov	r6, r0
 800a87a:	db01      	blt.n	800a880 <_malloc_r+0x1c>
 800a87c:	42a9      	cmp	r1, r5
 800a87e:	d904      	bls.n	800a88a <_malloc_r+0x26>
 800a880:	230c      	movs	r3, #12
 800a882:	6033      	str	r3, [r6, #0]
 800a884:	2000      	movs	r0, #0
 800a886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a960 <_malloc_r+0xfc>
 800a88e:	f000 f869 	bl	800a964 <__malloc_lock>
 800a892:	f8d8 3000 	ldr.w	r3, [r8]
 800a896:	461c      	mov	r4, r3
 800a898:	bb44      	cbnz	r4, 800a8ec <_malloc_r+0x88>
 800a89a:	4629      	mov	r1, r5
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff ffbf 	bl	800a820 <sbrk_aligned>
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	d158      	bne.n	800a95a <_malloc_r+0xf6>
 800a8a8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8ac:	4627      	mov	r7, r4
 800a8ae:	2f00      	cmp	r7, #0
 800a8b0:	d143      	bne.n	800a93a <_malloc_r+0xd6>
 800a8b2:	2c00      	cmp	r4, #0
 800a8b4:	d04b      	beq.n	800a94e <_malloc_r+0xea>
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	eb04 0903 	add.w	r9, r4, r3
 800a8c0:	f000 fc90 	bl	800b1e4 <_sbrk_r>
 800a8c4:	4581      	cmp	r9, r0
 800a8c6:	d142      	bne.n	800a94e <_malloc_r+0xea>
 800a8c8:	6821      	ldr	r1, [r4, #0]
 800a8ca:	1a6d      	subs	r5, r5, r1
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7ff ffa6 	bl	800a820 <sbrk_aligned>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d03a      	beq.n	800a94e <_malloc_r+0xea>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	442b      	add	r3, r5
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	bb62      	cbnz	r2, 800a940 <_malloc_r+0xdc>
 800a8e6:	f8c8 7000 	str.w	r7, [r8]
 800a8ea:	e00f      	b.n	800a90c <_malloc_r+0xa8>
 800a8ec:	6822      	ldr	r2, [r4, #0]
 800a8ee:	1b52      	subs	r2, r2, r5
 800a8f0:	d420      	bmi.n	800a934 <_malloc_r+0xd0>
 800a8f2:	2a0b      	cmp	r2, #11
 800a8f4:	d917      	bls.n	800a926 <_malloc_r+0xc2>
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	6025      	str	r5, [r4, #0]
 800a8fc:	bf18      	it	ne
 800a8fe:	6059      	strne	r1, [r3, #4]
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	bf08      	it	eq
 800a904:	f8c8 1000 	streq.w	r1, [r8]
 800a908:	5162      	str	r2, [r4, r5]
 800a90a:	604b      	str	r3, [r1, #4]
 800a90c:	4630      	mov	r0, r6
 800a90e:	f000 f82f 	bl	800a970 <__malloc_unlock>
 800a912:	f104 000b 	add.w	r0, r4, #11
 800a916:	1d23      	adds	r3, r4, #4
 800a918:	f020 0007 	bic.w	r0, r0, #7
 800a91c:	1ac2      	subs	r2, r0, r3
 800a91e:	bf1c      	itt	ne
 800a920:	1a1b      	subne	r3, r3, r0
 800a922:	50a3      	strne	r3, [r4, r2]
 800a924:	e7af      	b.n	800a886 <_malloc_r+0x22>
 800a926:	6862      	ldr	r2, [r4, #4]
 800a928:	42a3      	cmp	r3, r4
 800a92a:	bf0c      	ite	eq
 800a92c:	f8c8 2000 	streq.w	r2, [r8]
 800a930:	605a      	strne	r2, [r3, #4]
 800a932:	e7eb      	b.n	800a90c <_malloc_r+0xa8>
 800a934:	4623      	mov	r3, r4
 800a936:	6864      	ldr	r4, [r4, #4]
 800a938:	e7ae      	b.n	800a898 <_malloc_r+0x34>
 800a93a:	463c      	mov	r4, r7
 800a93c:	687f      	ldr	r7, [r7, #4]
 800a93e:	e7b6      	b.n	800a8ae <_malloc_r+0x4a>
 800a940:	461a      	mov	r2, r3
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	42a3      	cmp	r3, r4
 800a946:	d1fb      	bne.n	800a940 <_malloc_r+0xdc>
 800a948:	2300      	movs	r3, #0
 800a94a:	6053      	str	r3, [r2, #4]
 800a94c:	e7de      	b.n	800a90c <_malloc_r+0xa8>
 800a94e:	230c      	movs	r3, #12
 800a950:	6033      	str	r3, [r6, #0]
 800a952:	4630      	mov	r0, r6
 800a954:	f000 f80c 	bl	800a970 <__malloc_unlock>
 800a958:	e794      	b.n	800a884 <_malloc_r+0x20>
 800a95a:	6005      	str	r5, [r0, #0]
 800a95c:	e7d6      	b.n	800a90c <_malloc_r+0xa8>
 800a95e:	bf00      	nop
 800a960:	20005a64 	.word	0x20005a64

0800a964 <__malloc_lock>:
 800a964:	4801      	ldr	r0, [pc, #4]	@ (800a96c <__malloc_lock+0x8>)
 800a966:	f7ff bf0e 	b.w	800a786 <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	20005a5c 	.word	0x20005a5c

0800a970 <__malloc_unlock>:
 800a970:	4801      	ldr	r0, [pc, #4]	@ (800a978 <__malloc_unlock+0x8>)
 800a972:	f7ff bf09 	b.w	800a788 <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	20005a5c 	.word	0x20005a5c

0800a97c <__sfputc_r>:
 800a97c:	6893      	ldr	r3, [r2, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	b410      	push	{r4}
 800a984:	6093      	str	r3, [r2, #8]
 800a986:	da08      	bge.n	800a99a <__sfputc_r+0x1e>
 800a988:	6994      	ldr	r4, [r2, #24]
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	db01      	blt.n	800a992 <__sfputc_r+0x16>
 800a98e:	290a      	cmp	r1, #10
 800a990:	d103      	bne.n	800a99a <__sfputc_r+0x1e>
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	f7ff bde8 	b.w	800a56a <__swbuf_r>
 800a99a:	6813      	ldr	r3, [r2, #0]
 800a99c:	1c58      	adds	r0, r3, #1
 800a99e:	6010      	str	r0, [r2, #0]
 800a9a0:	7019      	strb	r1, [r3, #0]
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <__sfputs_r>:
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	18d5      	adds	r5, r2, r3
 800a9b4:	42ac      	cmp	r4, r5
 800a9b6:	d101      	bne.n	800a9bc <__sfputs_r+0x12>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e007      	b.n	800a9cc <__sfputs_r+0x22>
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffda 	bl	800a97c <__sfputc_r>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d1f3      	bne.n	800a9b4 <__sfputs_r+0xa>
 800a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d0 <_vfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	b09d      	sub	sp, #116	@ 0x74
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	4606      	mov	r6, r0
 800a9de:	b118      	cbz	r0, 800a9e8 <_vfiprintf_r+0x18>
 800a9e0:	6a03      	ldr	r3, [r0, #32]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x18>
 800a9e4:	f7ff fcd0 	bl	800a388 <__sinit>
 800a9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	059a      	lsls	r2, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9f6:	f7ff fec6 	bl	800a786 <__retarget_lock_acquire_recursive>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	071b      	lsls	r3, r3, #28
 800a9fe:	d501      	bpl.n	800aa04 <_vfiprintf_r+0x34>
 800aa00:	692b      	ldr	r3, [r5, #16]
 800aa02:	b99b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x5c>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff fdee 	bl	800a5e8 <__swsetup_r>
 800aa0c:	b170      	cbz	r0, 800aa2c <_vfiprintf_r+0x5c>
 800aa0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa10:	07dc      	lsls	r4, r3, #31
 800aa12:	d504      	bpl.n	800aa1e <_vfiprintf_r+0x4e>
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	b01d      	add	sp, #116	@ 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	0598      	lsls	r0, r3, #22
 800aa22:	d4f7      	bmi.n	800aa14 <_vfiprintf_r+0x44>
 800aa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa26:	f7ff feaf 	bl	800a788 <__retarget_lock_release_recursive>
 800aa2a:	e7f3      	b.n	800aa14 <_vfiprintf_r+0x44>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa30:	2320      	movs	r3, #32
 800aa32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa36:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3a:	2330      	movs	r3, #48	@ 0x30
 800aa3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abec <_vfiprintf_r+0x21c>
 800aa40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	4623      	mov	r3, r4
 800aa4a:	469a      	mov	sl, r3
 800aa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa50:	b10a      	cbz	r2, 800aa56 <_vfiprintf_r+0x86>
 800aa52:	2a25      	cmp	r2, #37	@ 0x25
 800aa54:	d1f9      	bne.n	800aa4a <_vfiprintf_r+0x7a>
 800aa56:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5a:	d00b      	beq.n	800aa74 <_vfiprintf_r+0xa4>
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ffa1 	bl	800a9aa <__sfputs_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f000 80a7 	beq.w	800abbc <_vfiprintf_r+0x1ec>
 800aa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa70:	445a      	add	r2, fp
 800aa72:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa74:	f89a 3000 	ldrb.w	r3, [sl]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 809f 	beq.w	800abbc <_vfiprintf_r+0x1ec>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa88:	f10a 0a01 	add.w	sl, sl, #1
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa94:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa96:	4654      	mov	r4, sl
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9e:	4853      	ldr	r0, [pc, #332]	@ (800abec <_vfiprintf_r+0x21c>)
 800aaa0:	f7f5 fbb6 	bl	8000210 <memchr>
 800aaa4:	9a04      	ldr	r2, [sp, #16]
 800aaa6:	b9d8      	cbnz	r0, 800aae0 <_vfiprintf_r+0x110>
 800aaa8:	06d1      	lsls	r1, r2, #27
 800aaaa:	bf44      	itt	mi
 800aaac:	2320      	movmi	r3, #32
 800aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aab2:	0713      	lsls	r3, r2, #28
 800aab4:	bf44      	itt	mi
 800aab6:	232b      	movmi	r3, #43	@ 0x2b
 800aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aabc:	f89a 3000 	ldrb.w	r3, [sl]
 800aac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac2:	d015      	beq.n	800aaf0 <_vfiprintf_r+0x120>
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	4654      	mov	r4, sl
 800aac8:	2000      	movs	r0, #0
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4621      	mov	r1, r4
 800aad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad4:	3b30      	subs	r3, #48	@ 0x30
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d94b      	bls.n	800ab72 <_vfiprintf_r+0x1a2>
 800aada:	b1b0      	cbz	r0, 800ab0a <_vfiprintf_r+0x13a>
 800aadc:	9207      	str	r2, [sp, #28]
 800aade:	e014      	b.n	800ab0a <_vfiprintf_r+0x13a>
 800aae0:	eba0 0308 	sub.w	r3, r0, r8
 800aae4:	fa09 f303 	lsl.w	r3, r9, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	46a2      	mov	sl, r4
 800aaee:	e7d2      	b.n	800aa96 <_vfiprintf_r+0xc6>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d19      	adds	r1, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	9103      	str	r1, [sp, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbb      	ittet	lt
 800aafc:	425b      	neglt	r3, r3
 800aafe:	f042 0202 	orrlt.w	r2, r2, #2
 800ab02:	9307      	strge	r3, [sp, #28]
 800ab04:	9307      	strlt	r3, [sp, #28]
 800ab06:	bfb8      	it	lt
 800ab08:	9204      	strlt	r2, [sp, #16]
 800ab0a:	7823      	ldrb	r3, [r4, #0]
 800ab0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab0e:	d10a      	bne.n	800ab26 <_vfiprintf_r+0x156>
 800ab10:	7863      	ldrb	r3, [r4, #1]
 800ab12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab14:	d132      	bne.n	800ab7c <_vfiprintf_r+0x1ac>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	9203      	str	r2, [sp, #12]
 800ab1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab22:	3402      	adds	r4, #2
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abfc <_vfiprintf_r+0x22c>
 800ab2a:	7821      	ldrb	r1, [r4, #0]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	4650      	mov	r0, sl
 800ab30:	f7f5 fb6e 	bl	8000210 <memchr>
 800ab34:	b138      	cbz	r0, 800ab46 <_vfiprintf_r+0x176>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	eba0 000a 	sub.w	r0, r0, sl
 800ab3c:	2240      	movs	r2, #64	@ 0x40
 800ab3e:	4082      	lsls	r2, r0
 800ab40:	4313      	orrs	r3, r2
 800ab42:	3401      	adds	r4, #1
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4a:	4829      	ldr	r0, [pc, #164]	@ (800abf0 <_vfiprintf_r+0x220>)
 800ab4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab50:	2206      	movs	r2, #6
 800ab52:	f7f5 fb5d 	bl	8000210 <memchr>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d03f      	beq.n	800abda <_vfiprintf_r+0x20a>
 800ab5a:	4b26      	ldr	r3, [pc, #152]	@ (800abf4 <_vfiprintf_r+0x224>)
 800ab5c:	bb1b      	cbnz	r3, 800aba6 <_vfiprintf_r+0x1d6>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	3308      	adds	r3, #8
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6c:	443b      	add	r3, r7
 800ab6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab70:	e76a      	b.n	800aa48 <_vfiprintf_r+0x78>
 800ab72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab76:	460c      	mov	r4, r1
 800ab78:	2001      	movs	r0, #1
 800ab7a:	e7a8      	b.n	800aace <_vfiprintf_r+0xfe>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	3401      	adds	r4, #1
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	4619      	mov	r1, r3
 800ab84:	f04f 0c0a 	mov.w	ip, #10
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8e:	3a30      	subs	r2, #48	@ 0x30
 800ab90:	2a09      	cmp	r2, #9
 800ab92:	d903      	bls.n	800ab9c <_vfiprintf_r+0x1cc>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0c6      	beq.n	800ab26 <_vfiprintf_r+0x156>
 800ab98:	9105      	str	r1, [sp, #20]
 800ab9a:	e7c4      	b.n	800ab26 <_vfiprintf_r+0x156>
 800ab9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba0:	4604      	mov	r4, r0
 800aba2:	2301      	movs	r3, #1
 800aba4:	e7f0      	b.n	800ab88 <_vfiprintf_r+0x1b8>
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	462a      	mov	r2, r5
 800abac:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <_vfiprintf_r+0x228>)
 800abae:	a904      	add	r1, sp, #16
 800abb0:	4630      	mov	r0, r6
 800abb2:	f3af 8000 	nop.w
 800abb6:	4607      	mov	r7, r0
 800abb8:	1c78      	adds	r0, r7, #1
 800abba:	d1d6      	bne.n	800ab6a <_vfiprintf_r+0x19a>
 800abbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abbe:	07d9      	lsls	r1, r3, #31
 800abc0:	d405      	bmi.n	800abce <_vfiprintf_r+0x1fe>
 800abc2:	89ab      	ldrh	r3, [r5, #12]
 800abc4:	059a      	lsls	r2, r3, #22
 800abc6:	d402      	bmi.n	800abce <_vfiprintf_r+0x1fe>
 800abc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abca:	f7ff fddd 	bl	800a788 <__retarget_lock_release_recursive>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	065b      	lsls	r3, r3, #25
 800abd2:	f53f af1f 	bmi.w	800aa14 <_vfiprintf_r+0x44>
 800abd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd8:	e71e      	b.n	800aa18 <_vfiprintf_r+0x48>
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	462a      	mov	r2, r5
 800abe0:	4b05      	ldr	r3, [pc, #20]	@ (800abf8 <_vfiprintf_r+0x228>)
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 f879 	bl	800acdc <_printf_i>
 800abea:	e7e4      	b.n	800abb6 <_vfiprintf_r+0x1e6>
 800abec:	0800c31c 	.word	0x0800c31c
 800abf0:	0800c326 	.word	0x0800c326
 800abf4:	00000000 	.word	0x00000000
 800abf8:	0800a9ab 	.word	0x0800a9ab
 800abfc:	0800c322 	.word	0x0800c322

0800ac00 <_printf_common>:
 800ac00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac04:	4616      	mov	r6, r2
 800ac06:	4698      	mov	r8, r3
 800ac08:	688a      	ldr	r2, [r1, #8]
 800ac0a:	690b      	ldr	r3, [r1, #16]
 800ac0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac10:	4293      	cmp	r3, r2
 800ac12:	bfb8      	it	lt
 800ac14:	4613      	movlt	r3, r2
 800ac16:	6033      	str	r3, [r6, #0]
 800ac18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	b10a      	cbz	r2, 800ac26 <_printf_common+0x26>
 800ac22:	3301      	adds	r3, #1
 800ac24:	6033      	str	r3, [r6, #0]
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	0699      	lsls	r1, r3, #26
 800ac2a:	bf42      	ittt	mi
 800ac2c:	6833      	ldrmi	r3, [r6, #0]
 800ac2e:	3302      	addmi	r3, #2
 800ac30:	6033      	strmi	r3, [r6, #0]
 800ac32:	6825      	ldr	r5, [r4, #0]
 800ac34:	f015 0506 	ands.w	r5, r5, #6
 800ac38:	d106      	bne.n	800ac48 <_printf_common+0x48>
 800ac3a:	f104 0a19 	add.w	sl, r4, #25
 800ac3e:	68e3      	ldr	r3, [r4, #12]
 800ac40:	6832      	ldr	r2, [r6, #0]
 800ac42:	1a9b      	subs	r3, r3, r2
 800ac44:	42ab      	cmp	r3, r5
 800ac46:	dc26      	bgt.n	800ac96 <_printf_common+0x96>
 800ac48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	3b00      	subs	r3, #0
 800ac50:	bf18      	it	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	0692      	lsls	r2, r2, #26
 800ac56:	d42b      	bmi.n	800acb0 <_printf_common+0xb0>
 800ac58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac5c:	4641      	mov	r1, r8
 800ac5e:	4638      	mov	r0, r7
 800ac60:	47c8      	blx	r9
 800ac62:	3001      	adds	r0, #1
 800ac64:	d01e      	beq.n	800aca4 <_printf_common+0xa4>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	6922      	ldr	r2, [r4, #16]
 800ac6a:	f003 0306 	and.w	r3, r3, #6
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	bf02      	ittt	eq
 800ac72:	68e5      	ldreq	r5, [r4, #12]
 800ac74:	6833      	ldreq	r3, [r6, #0]
 800ac76:	1aed      	subeq	r5, r5, r3
 800ac78:	68a3      	ldr	r3, [r4, #8]
 800ac7a:	bf0c      	ite	eq
 800ac7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac80:	2500      	movne	r5, #0
 800ac82:	4293      	cmp	r3, r2
 800ac84:	bfc4      	itt	gt
 800ac86:	1a9b      	subgt	r3, r3, r2
 800ac88:	18ed      	addgt	r5, r5, r3
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	341a      	adds	r4, #26
 800ac8e:	42b5      	cmp	r5, r6
 800ac90:	d11a      	bne.n	800acc8 <_printf_common+0xc8>
 800ac92:	2000      	movs	r0, #0
 800ac94:	e008      	b.n	800aca8 <_printf_common+0xa8>
 800ac96:	2301      	movs	r3, #1
 800ac98:	4652      	mov	r2, sl
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	47c8      	blx	r9
 800aca0:	3001      	adds	r0, #1
 800aca2:	d103      	bne.n	800acac <_printf_common+0xac>
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acac:	3501      	adds	r5, #1
 800acae:	e7c6      	b.n	800ac3e <_printf_common+0x3e>
 800acb0:	18e1      	adds	r1, r4, r3
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	2030      	movs	r0, #48	@ 0x30
 800acb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acba:	4422      	add	r2, r4
 800acbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acc4:	3302      	adds	r3, #2
 800acc6:	e7c7      	b.n	800ac58 <_printf_common+0x58>
 800acc8:	2301      	movs	r3, #1
 800acca:	4622      	mov	r2, r4
 800accc:	4641      	mov	r1, r8
 800acce:	4638      	mov	r0, r7
 800acd0:	47c8      	blx	r9
 800acd2:	3001      	adds	r0, #1
 800acd4:	d0e6      	beq.n	800aca4 <_printf_common+0xa4>
 800acd6:	3601      	adds	r6, #1
 800acd8:	e7d9      	b.n	800ac8e <_printf_common+0x8e>
	...

0800acdc <_printf_i>:
 800acdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ace0:	7e0f      	ldrb	r7, [r1, #24]
 800ace2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ace4:	2f78      	cmp	r7, #120	@ 0x78
 800ace6:	4691      	mov	r9, r2
 800ace8:	4680      	mov	r8, r0
 800acea:	460c      	mov	r4, r1
 800acec:	469a      	mov	sl, r3
 800acee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acf2:	d807      	bhi.n	800ad04 <_printf_i+0x28>
 800acf4:	2f62      	cmp	r7, #98	@ 0x62
 800acf6:	d80a      	bhi.n	800ad0e <_printf_i+0x32>
 800acf8:	2f00      	cmp	r7, #0
 800acfa:	f000 80d2 	beq.w	800aea2 <_printf_i+0x1c6>
 800acfe:	2f58      	cmp	r7, #88	@ 0x58
 800ad00:	f000 80b9 	beq.w	800ae76 <_printf_i+0x19a>
 800ad04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad0c:	e03a      	b.n	800ad84 <_printf_i+0xa8>
 800ad0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad12:	2b15      	cmp	r3, #21
 800ad14:	d8f6      	bhi.n	800ad04 <_printf_i+0x28>
 800ad16:	a101      	add	r1, pc, #4	@ (adr r1, 800ad1c <_printf_i+0x40>)
 800ad18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad1c:	0800ad75 	.word	0x0800ad75
 800ad20:	0800ad89 	.word	0x0800ad89
 800ad24:	0800ad05 	.word	0x0800ad05
 800ad28:	0800ad05 	.word	0x0800ad05
 800ad2c:	0800ad05 	.word	0x0800ad05
 800ad30:	0800ad05 	.word	0x0800ad05
 800ad34:	0800ad89 	.word	0x0800ad89
 800ad38:	0800ad05 	.word	0x0800ad05
 800ad3c:	0800ad05 	.word	0x0800ad05
 800ad40:	0800ad05 	.word	0x0800ad05
 800ad44:	0800ad05 	.word	0x0800ad05
 800ad48:	0800ae89 	.word	0x0800ae89
 800ad4c:	0800adb3 	.word	0x0800adb3
 800ad50:	0800ae43 	.word	0x0800ae43
 800ad54:	0800ad05 	.word	0x0800ad05
 800ad58:	0800ad05 	.word	0x0800ad05
 800ad5c:	0800aeab 	.word	0x0800aeab
 800ad60:	0800ad05 	.word	0x0800ad05
 800ad64:	0800adb3 	.word	0x0800adb3
 800ad68:	0800ad05 	.word	0x0800ad05
 800ad6c:	0800ad05 	.word	0x0800ad05
 800ad70:	0800ae4b 	.word	0x0800ae4b
 800ad74:	6833      	ldr	r3, [r6, #0]
 800ad76:	1d1a      	adds	r2, r3, #4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6032      	str	r2, [r6, #0]
 800ad7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad84:	2301      	movs	r3, #1
 800ad86:	e09d      	b.n	800aec4 <_printf_i+0x1e8>
 800ad88:	6833      	ldr	r3, [r6, #0]
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	1d19      	adds	r1, r3, #4
 800ad8e:	6031      	str	r1, [r6, #0]
 800ad90:	0606      	lsls	r6, r0, #24
 800ad92:	d501      	bpl.n	800ad98 <_printf_i+0xbc>
 800ad94:	681d      	ldr	r5, [r3, #0]
 800ad96:	e003      	b.n	800ada0 <_printf_i+0xc4>
 800ad98:	0645      	lsls	r5, r0, #25
 800ad9a:	d5fb      	bpl.n	800ad94 <_printf_i+0xb8>
 800ad9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ada0:	2d00      	cmp	r5, #0
 800ada2:	da03      	bge.n	800adac <_printf_i+0xd0>
 800ada4:	232d      	movs	r3, #45	@ 0x2d
 800ada6:	426d      	negs	r5, r5
 800ada8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adac:	4859      	ldr	r0, [pc, #356]	@ (800af14 <_printf_i+0x238>)
 800adae:	230a      	movs	r3, #10
 800adb0:	e011      	b.n	800add6 <_printf_i+0xfa>
 800adb2:	6821      	ldr	r1, [r4, #0]
 800adb4:	6833      	ldr	r3, [r6, #0]
 800adb6:	0608      	lsls	r0, r1, #24
 800adb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800adbc:	d402      	bmi.n	800adc4 <_printf_i+0xe8>
 800adbe:	0649      	lsls	r1, r1, #25
 800adc0:	bf48      	it	mi
 800adc2:	b2ad      	uxthmi	r5, r5
 800adc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800adc6:	4853      	ldr	r0, [pc, #332]	@ (800af14 <_printf_i+0x238>)
 800adc8:	6033      	str	r3, [r6, #0]
 800adca:	bf14      	ite	ne
 800adcc:	230a      	movne	r3, #10
 800adce:	2308      	moveq	r3, #8
 800add0:	2100      	movs	r1, #0
 800add2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800add6:	6866      	ldr	r6, [r4, #4]
 800add8:	60a6      	str	r6, [r4, #8]
 800adda:	2e00      	cmp	r6, #0
 800addc:	bfa2      	ittt	ge
 800adde:	6821      	ldrge	r1, [r4, #0]
 800ade0:	f021 0104 	bicge.w	r1, r1, #4
 800ade4:	6021      	strge	r1, [r4, #0]
 800ade6:	b90d      	cbnz	r5, 800adec <_printf_i+0x110>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	d04b      	beq.n	800ae84 <_printf_i+0x1a8>
 800adec:	4616      	mov	r6, r2
 800adee:	fbb5 f1f3 	udiv	r1, r5, r3
 800adf2:	fb03 5711 	mls	r7, r3, r1, r5
 800adf6:	5dc7      	ldrb	r7, [r0, r7]
 800adf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adfc:	462f      	mov	r7, r5
 800adfe:	42bb      	cmp	r3, r7
 800ae00:	460d      	mov	r5, r1
 800ae02:	d9f4      	bls.n	800adee <_printf_i+0x112>
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d10b      	bne.n	800ae20 <_printf_i+0x144>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	07df      	lsls	r7, r3, #31
 800ae0c:	d508      	bpl.n	800ae20 <_printf_i+0x144>
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	6861      	ldr	r1, [r4, #4]
 800ae12:	4299      	cmp	r1, r3
 800ae14:	bfde      	ittt	le
 800ae16:	2330      	movle	r3, #48	@ 0x30
 800ae18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae20:	1b92      	subs	r2, r2, r6
 800ae22:	6122      	str	r2, [r4, #16]
 800ae24:	f8cd a000 	str.w	sl, [sp]
 800ae28:	464b      	mov	r3, r9
 800ae2a:	aa03      	add	r2, sp, #12
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4640      	mov	r0, r8
 800ae30:	f7ff fee6 	bl	800ac00 <_printf_common>
 800ae34:	3001      	adds	r0, #1
 800ae36:	d14a      	bne.n	800aece <_printf_i+0x1f2>
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3c:	b004      	add	sp, #16
 800ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	f043 0320 	orr.w	r3, r3, #32
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	4833      	ldr	r0, [pc, #204]	@ (800af18 <_printf_i+0x23c>)
 800ae4c:	2778      	movs	r7, #120	@ 0x78
 800ae4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	6831      	ldr	r1, [r6, #0]
 800ae56:	061f      	lsls	r7, r3, #24
 800ae58:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae5c:	d402      	bmi.n	800ae64 <_printf_i+0x188>
 800ae5e:	065f      	lsls	r7, r3, #25
 800ae60:	bf48      	it	mi
 800ae62:	b2ad      	uxthmi	r5, r5
 800ae64:	6031      	str	r1, [r6, #0]
 800ae66:	07d9      	lsls	r1, r3, #31
 800ae68:	bf44      	itt	mi
 800ae6a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae6e:	6023      	strmi	r3, [r4, #0]
 800ae70:	b11d      	cbz	r5, 800ae7a <_printf_i+0x19e>
 800ae72:	2310      	movs	r3, #16
 800ae74:	e7ac      	b.n	800add0 <_printf_i+0xf4>
 800ae76:	4827      	ldr	r0, [pc, #156]	@ (800af14 <_printf_i+0x238>)
 800ae78:	e7e9      	b.n	800ae4e <_printf_i+0x172>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	f023 0320 	bic.w	r3, r3, #32
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	e7f6      	b.n	800ae72 <_printf_i+0x196>
 800ae84:	4616      	mov	r6, r2
 800ae86:	e7bd      	b.n	800ae04 <_printf_i+0x128>
 800ae88:	6833      	ldr	r3, [r6, #0]
 800ae8a:	6825      	ldr	r5, [r4, #0]
 800ae8c:	6961      	ldr	r1, [r4, #20]
 800ae8e:	1d18      	adds	r0, r3, #4
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	062e      	lsls	r6, r5, #24
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	d501      	bpl.n	800ae9c <_printf_i+0x1c0>
 800ae98:	6019      	str	r1, [r3, #0]
 800ae9a:	e002      	b.n	800aea2 <_printf_i+0x1c6>
 800ae9c:	0668      	lsls	r0, r5, #25
 800ae9e:	d5fb      	bpl.n	800ae98 <_printf_i+0x1bc>
 800aea0:	8019      	strh	r1, [r3, #0]
 800aea2:	2300      	movs	r3, #0
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	4616      	mov	r6, r2
 800aea8:	e7bc      	b.n	800ae24 <_printf_i+0x148>
 800aeaa:	6833      	ldr	r3, [r6, #0]
 800aeac:	1d1a      	adds	r2, r3, #4
 800aeae:	6032      	str	r2, [r6, #0]
 800aeb0:	681e      	ldr	r6, [r3, #0]
 800aeb2:	6862      	ldr	r2, [r4, #4]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7f5 f9aa 	bl	8000210 <memchr>
 800aebc:	b108      	cbz	r0, 800aec2 <_printf_i+0x1e6>
 800aebe:	1b80      	subs	r0, r0, r6
 800aec0:	6060      	str	r0, [r4, #4]
 800aec2:	6863      	ldr	r3, [r4, #4]
 800aec4:	6123      	str	r3, [r4, #16]
 800aec6:	2300      	movs	r3, #0
 800aec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aecc:	e7aa      	b.n	800ae24 <_printf_i+0x148>
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	4632      	mov	r2, r6
 800aed2:	4649      	mov	r1, r9
 800aed4:	4640      	mov	r0, r8
 800aed6:	47d0      	blx	sl
 800aed8:	3001      	adds	r0, #1
 800aeda:	d0ad      	beq.n	800ae38 <_printf_i+0x15c>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	079b      	lsls	r3, r3, #30
 800aee0:	d413      	bmi.n	800af0a <_printf_i+0x22e>
 800aee2:	68e0      	ldr	r0, [r4, #12]
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	4298      	cmp	r0, r3
 800aee8:	bfb8      	it	lt
 800aeea:	4618      	movlt	r0, r3
 800aeec:	e7a6      	b.n	800ae3c <_printf_i+0x160>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4632      	mov	r2, r6
 800aef2:	4649      	mov	r1, r9
 800aef4:	4640      	mov	r0, r8
 800aef6:	47d0      	blx	sl
 800aef8:	3001      	adds	r0, #1
 800aefa:	d09d      	beq.n	800ae38 <_printf_i+0x15c>
 800aefc:	3501      	adds	r5, #1
 800aefe:	68e3      	ldr	r3, [r4, #12]
 800af00:	9903      	ldr	r1, [sp, #12]
 800af02:	1a5b      	subs	r3, r3, r1
 800af04:	42ab      	cmp	r3, r5
 800af06:	dcf2      	bgt.n	800aeee <_printf_i+0x212>
 800af08:	e7eb      	b.n	800aee2 <_printf_i+0x206>
 800af0a:	2500      	movs	r5, #0
 800af0c:	f104 0619 	add.w	r6, r4, #25
 800af10:	e7f5      	b.n	800aefe <_printf_i+0x222>
 800af12:	bf00      	nop
 800af14:	0800c32d 	.word	0x0800c32d
 800af18:	0800c33e 	.word	0x0800c33e

0800af1c <__sflush_r>:
 800af1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af24:	0716      	lsls	r6, r2, #28
 800af26:	4605      	mov	r5, r0
 800af28:	460c      	mov	r4, r1
 800af2a:	d454      	bmi.n	800afd6 <__sflush_r+0xba>
 800af2c:	684b      	ldr	r3, [r1, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc02      	bgt.n	800af38 <__sflush_r+0x1c>
 800af32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd48      	ble.n	800afca <__sflush_r+0xae>
 800af38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d045      	beq.n	800afca <__sflush_r+0xae>
 800af3e:	2300      	movs	r3, #0
 800af40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af44:	682f      	ldr	r7, [r5, #0]
 800af46:	6a21      	ldr	r1, [r4, #32]
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	d030      	beq.n	800afae <__sflush_r+0x92>
 800af4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	0759      	lsls	r1, r3, #29
 800af52:	d505      	bpl.n	800af60 <__sflush_r+0x44>
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af5a:	b10b      	cbz	r3, 800af60 <__sflush_r+0x44>
 800af5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af5e:	1ad2      	subs	r2, r2, r3
 800af60:	2300      	movs	r3, #0
 800af62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	4628      	mov	r0, r5
 800af68:	47b0      	blx	r6
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	d106      	bne.n	800af7e <__sflush_r+0x62>
 800af70:	6829      	ldr	r1, [r5, #0]
 800af72:	291d      	cmp	r1, #29
 800af74:	d82b      	bhi.n	800afce <__sflush_r+0xb2>
 800af76:	4a2a      	ldr	r2, [pc, #168]	@ (800b020 <__sflush_r+0x104>)
 800af78:	410a      	asrs	r2, r1
 800af7a:	07d6      	lsls	r6, r2, #31
 800af7c:	d427      	bmi.n	800afce <__sflush_r+0xb2>
 800af7e:	2200      	movs	r2, #0
 800af80:	6062      	str	r2, [r4, #4]
 800af82:	04d9      	lsls	r1, r3, #19
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	6022      	str	r2, [r4, #0]
 800af88:	d504      	bpl.n	800af94 <__sflush_r+0x78>
 800af8a:	1c42      	adds	r2, r0, #1
 800af8c:	d101      	bne.n	800af92 <__sflush_r+0x76>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b903      	cbnz	r3, 800af94 <__sflush_r+0x78>
 800af92:	6560      	str	r0, [r4, #84]	@ 0x54
 800af94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	b1b9      	cbz	r1, 800afca <__sflush_r+0xae>
 800af9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9e:	4299      	cmp	r1, r3
 800afa0:	d002      	beq.n	800afa8 <__sflush_r+0x8c>
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7ff fbf2 	bl	800a78c <_free_r>
 800afa8:	2300      	movs	r3, #0
 800afaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800afac:	e00d      	b.n	800afca <__sflush_r+0xae>
 800afae:	2301      	movs	r3, #1
 800afb0:	4628      	mov	r0, r5
 800afb2:	47b0      	blx	r6
 800afb4:	4602      	mov	r2, r0
 800afb6:	1c50      	adds	r0, r2, #1
 800afb8:	d1c9      	bne.n	800af4e <__sflush_r+0x32>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c6      	beq.n	800af4e <__sflush_r+0x32>
 800afc0:	2b1d      	cmp	r3, #29
 800afc2:	d001      	beq.n	800afc8 <__sflush_r+0xac>
 800afc4:	2b16      	cmp	r3, #22
 800afc6:	d11e      	bne.n	800b006 <__sflush_r+0xea>
 800afc8:	602f      	str	r7, [r5, #0]
 800afca:	2000      	movs	r0, #0
 800afcc:	e022      	b.n	800b014 <__sflush_r+0xf8>
 800afce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd2:	b21b      	sxth	r3, r3
 800afd4:	e01b      	b.n	800b00e <__sflush_r+0xf2>
 800afd6:	690f      	ldr	r7, [r1, #16]
 800afd8:	2f00      	cmp	r7, #0
 800afda:	d0f6      	beq.n	800afca <__sflush_r+0xae>
 800afdc:	0793      	lsls	r3, r2, #30
 800afde:	680e      	ldr	r6, [r1, #0]
 800afe0:	bf08      	it	eq
 800afe2:	694b      	ldreq	r3, [r1, #20]
 800afe4:	600f      	str	r7, [r1, #0]
 800afe6:	bf18      	it	ne
 800afe8:	2300      	movne	r3, #0
 800afea:	eba6 0807 	sub.w	r8, r6, r7
 800afee:	608b      	str	r3, [r1, #8]
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	dde9      	ble.n	800afca <__sflush_r+0xae>
 800aff6:	6a21      	ldr	r1, [r4, #32]
 800aff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800affa:	4643      	mov	r3, r8
 800affc:	463a      	mov	r2, r7
 800affe:	4628      	mov	r0, r5
 800b000:	47b0      	blx	r6
 800b002:	2800      	cmp	r0, #0
 800b004:	dc08      	bgt.n	800b018 <__sflush_r+0xfc>
 800b006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	4407      	add	r7, r0
 800b01a:	eba8 0800 	sub.w	r8, r8, r0
 800b01e:	e7e7      	b.n	800aff0 <__sflush_r+0xd4>
 800b020:	dfbffffe 	.word	0xdfbffffe

0800b024 <_fflush_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	4605      	mov	r5, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	b913      	cbnz	r3, 800b034 <_fflush_r+0x10>
 800b02e:	2500      	movs	r5, #0
 800b030:	4628      	mov	r0, r5
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	b118      	cbz	r0, 800b03e <_fflush_r+0x1a>
 800b036:	6a03      	ldr	r3, [r0, #32]
 800b038:	b90b      	cbnz	r3, 800b03e <_fflush_r+0x1a>
 800b03a:	f7ff f9a5 	bl	800a388 <__sinit>
 800b03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0f3      	beq.n	800b02e <_fflush_r+0xa>
 800b046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b048:	07d0      	lsls	r0, r2, #31
 800b04a:	d404      	bmi.n	800b056 <_fflush_r+0x32>
 800b04c:	0599      	lsls	r1, r3, #22
 800b04e:	d402      	bmi.n	800b056 <_fflush_r+0x32>
 800b050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b052:	f7ff fb98 	bl	800a786 <__retarget_lock_acquire_recursive>
 800b056:	4628      	mov	r0, r5
 800b058:	4621      	mov	r1, r4
 800b05a:	f7ff ff5f 	bl	800af1c <__sflush_r>
 800b05e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b060:	07da      	lsls	r2, r3, #31
 800b062:	4605      	mov	r5, r0
 800b064:	d4e4      	bmi.n	800b030 <_fflush_r+0xc>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	059b      	lsls	r3, r3, #22
 800b06a:	d4e1      	bmi.n	800b030 <_fflush_r+0xc>
 800b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06e:	f7ff fb8b 	bl	800a788 <__retarget_lock_release_recursive>
 800b072:	e7dd      	b.n	800b030 <_fflush_r+0xc>

0800b074 <__swhatbuf_r>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	460c      	mov	r4, r1
 800b078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07c:	2900      	cmp	r1, #0
 800b07e:	b096      	sub	sp, #88	@ 0x58
 800b080:	4615      	mov	r5, r2
 800b082:	461e      	mov	r6, r3
 800b084:	da0d      	bge.n	800b0a2 <__swhatbuf_r+0x2e>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b08c:	f04f 0100 	mov.w	r1, #0
 800b090:	bf14      	ite	ne
 800b092:	2340      	movne	r3, #64	@ 0x40
 800b094:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b098:	2000      	movs	r0, #0
 800b09a:	6031      	str	r1, [r6, #0]
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	b016      	add	sp, #88	@ 0x58
 800b0a0:	bd70      	pop	{r4, r5, r6, pc}
 800b0a2:	466a      	mov	r2, sp
 800b0a4:	f000 f87c 	bl	800b1a0 <_fstat_r>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dbec      	blt.n	800b086 <__swhatbuf_r+0x12>
 800b0ac:	9901      	ldr	r1, [sp, #4]
 800b0ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0b6:	4259      	negs	r1, r3
 800b0b8:	4159      	adcs	r1, r3
 800b0ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0be:	e7eb      	b.n	800b098 <__swhatbuf_r+0x24>

0800b0c0 <__smakebuf_r>:
 800b0c0:	898b      	ldrh	r3, [r1, #12]
 800b0c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c4:	079d      	lsls	r5, r3, #30
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	d507      	bpl.n	800b0dc <__smakebuf_r+0x1c>
 800b0cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	6123      	str	r3, [r4, #16]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	b003      	add	sp, #12
 800b0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0dc:	ab01      	add	r3, sp, #4
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f7ff ffc8 	bl	800b074 <__swhatbuf_r>
 800b0e4:	9f00      	ldr	r7, [sp, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff fbba 	bl	800a864 <_malloc_r>
 800b0f0:	b948      	cbnz	r0, 800b106 <__smakebuf_r+0x46>
 800b0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f6:	059a      	lsls	r2, r3, #22
 800b0f8:	d4ee      	bmi.n	800b0d8 <__smakebuf_r+0x18>
 800b0fa:	f023 0303 	bic.w	r3, r3, #3
 800b0fe:	f043 0302 	orr.w	r3, r3, #2
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	e7e2      	b.n	800b0cc <__smakebuf_r+0xc>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	6020      	str	r0, [r4, #0]
 800b10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b116:	b15b      	cbz	r3, 800b130 <__smakebuf_r+0x70>
 800b118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b11c:	4630      	mov	r0, r6
 800b11e:	f000 f851 	bl	800b1c4 <_isatty_r>
 800b122:	b128      	cbz	r0, 800b130 <__smakebuf_r+0x70>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	431d      	orrs	r5, r3
 800b134:	81a5      	strh	r5, [r4, #12]
 800b136:	e7cf      	b.n	800b0d8 <__smakebuf_r+0x18>

0800b138 <_putc_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460d      	mov	r5, r1
 800b13c:	4614      	mov	r4, r2
 800b13e:	4606      	mov	r6, r0
 800b140:	b118      	cbz	r0, 800b14a <_putc_r+0x12>
 800b142:	6a03      	ldr	r3, [r0, #32]
 800b144:	b90b      	cbnz	r3, 800b14a <_putc_r+0x12>
 800b146:	f7ff f91f 	bl	800a388 <__sinit>
 800b14a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b14c:	07d8      	lsls	r0, r3, #31
 800b14e:	d405      	bmi.n	800b15c <_putc_r+0x24>
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	0599      	lsls	r1, r3, #22
 800b154:	d402      	bmi.n	800b15c <_putc_r+0x24>
 800b156:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b158:	f7ff fb15 	bl	800a786 <__retarget_lock_acquire_recursive>
 800b15c:	68a3      	ldr	r3, [r4, #8]
 800b15e:	3b01      	subs	r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	60a3      	str	r3, [r4, #8]
 800b164:	da05      	bge.n	800b172 <_putc_r+0x3a>
 800b166:	69a2      	ldr	r2, [r4, #24]
 800b168:	4293      	cmp	r3, r2
 800b16a:	db12      	blt.n	800b192 <_putc_r+0x5a>
 800b16c:	b2eb      	uxtb	r3, r5
 800b16e:	2b0a      	cmp	r3, #10
 800b170:	d00f      	beq.n	800b192 <_putc_r+0x5a>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	701d      	strb	r5, [r3, #0]
 800b17a:	b2ed      	uxtb	r5, r5
 800b17c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b17e:	07da      	lsls	r2, r3, #31
 800b180:	d405      	bmi.n	800b18e <_putc_r+0x56>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	d402      	bmi.n	800b18e <_putc_r+0x56>
 800b188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b18a:	f7ff fafd 	bl	800a788 <__retarget_lock_release_recursive>
 800b18e:	4628      	mov	r0, r5
 800b190:	bd70      	pop	{r4, r5, r6, pc}
 800b192:	4629      	mov	r1, r5
 800b194:	4622      	mov	r2, r4
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff f9e7 	bl	800a56a <__swbuf_r>
 800b19c:	4605      	mov	r5, r0
 800b19e:	e7ed      	b.n	800b17c <_putc_r+0x44>

0800b1a0 <_fstat_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	@ (800b1c0 <_fstat_r+0x20>)
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	602b      	str	r3, [r5, #0]
 800b1ae:	f7f6 f9b8 	bl	8001522 <_fstat>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d102      	bne.n	800b1bc <_fstat_r+0x1c>
 800b1b6:	682b      	ldr	r3, [r5, #0]
 800b1b8:	b103      	cbz	r3, 800b1bc <_fstat_r+0x1c>
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	bd38      	pop	{r3, r4, r5, pc}
 800b1be:	bf00      	nop
 800b1c0:	20005a58 	.word	0x20005a58

0800b1c4 <_isatty_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d06      	ldr	r5, [pc, #24]	@ (800b1e0 <_isatty_r+0x1c>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	f7f6 f9b7 	bl	8001542 <_isatty>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d102      	bne.n	800b1de <_isatty_r+0x1a>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	b103      	cbz	r3, 800b1de <_isatty_r+0x1a>
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	20005a58 	.word	0x20005a58

0800b1e4 <_sbrk_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d06      	ldr	r5, [pc, #24]	@ (800b200 <_sbrk_r+0x1c>)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	f7f6 f9c0 	bl	8001574 <_sbrk>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_sbrk_r+0x1a>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_sbrk_r+0x1a>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	20005a58 	.word	0x20005a58
 800b204:	00000000 	.word	0x00000000

0800b208 <sin>:
 800b208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b20a:	ec53 2b10 	vmov	r2, r3, d0
 800b20e:	4826      	ldr	r0, [pc, #152]	@ (800b2a8 <sin+0xa0>)
 800b210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b214:	4281      	cmp	r1, r0
 800b216:	d807      	bhi.n	800b228 <sin+0x20>
 800b218:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b2a0 <sin+0x98>
 800b21c:	2000      	movs	r0, #0
 800b21e:	b005      	add	sp, #20
 800b220:	f85d eb04 	ldr.w	lr, [sp], #4
 800b224:	f000 b90c 	b.w	800b440 <__kernel_sin>
 800b228:	4820      	ldr	r0, [pc, #128]	@ (800b2ac <sin+0xa4>)
 800b22a:	4281      	cmp	r1, r0
 800b22c:	d908      	bls.n	800b240 <sin+0x38>
 800b22e:	4610      	mov	r0, r2
 800b230:	4619      	mov	r1, r3
 800b232:	f7f5 f96b 	bl	800050c <__aeabi_dsub>
 800b236:	ec41 0b10 	vmov	d0, r0, r1
 800b23a:	b005      	add	sp, #20
 800b23c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b240:	4668      	mov	r0, sp
 800b242:	f000 f9b9 	bl	800b5b8 <__ieee754_rem_pio2>
 800b246:	f000 0003 	and.w	r0, r0, #3
 800b24a:	2801      	cmp	r0, #1
 800b24c:	d00c      	beq.n	800b268 <sin+0x60>
 800b24e:	2802      	cmp	r0, #2
 800b250:	d011      	beq.n	800b276 <sin+0x6e>
 800b252:	b9e8      	cbnz	r0, 800b290 <sin+0x88>
 800b254:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b258:	ed9d 0b00 	vldr	d0, [sp]
 800b25c:	2001      	movs	r0, #1
 800b25e:	f000 f8ef 	bl	800b440 <__kernel_sin>
 800b262:	ec51 0b10 	vmov	r0, r1, d0
 800b266:	e7e6      	b.n	800b236 <sin+0x2e>
 800b268:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b26c:	ed9d 0b00 	vldr	d0, [sp]
 800b270:	f000 f81e 	bl	800b2b0 <__kernel_cos>
 800b274:	e7f5      	b.n	800b262 <sin+0x5a>
 800b276:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b27a:	ed9d 0b00 	vldr	d0, [sp]
 800b27e:	2001      	movs	r0, #1
 800b280:	f000 f8de 	bl	800b440 <__kernel_sin>
 800b284:	ec53 2b10 	vmov	r2, r3, d0
 800b288:	4610      	mov	r0, r2
 800b28a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b28e:	e7d2      	b.n	800b236 <sin+0x2e>
 800b290:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b294:	ed9d 0b00 	vldr	d0, [sp]
 800b298:	f000 f80a 	bl	800b2b0 <__kernel_cos>
 800b29c:	e7f2      	b.n	800b284 <sin+0x7c>
 800b29e:	bf00      	nop
	...
 800b2a8:	3fe921fb 	.word	0x3fe921fb
 800b2ac:	7fefffff 	.word	0x7fefffff

0800b2b0 <__kernel_cos>:
 800b2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	ec57 6b10 	vmov	r6, r7, d0
 800b2b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b2bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b2c0:	ed8d 1b00 	vstr	d1, [sp]
 800b2c4:	d206      	bcs.n	800b2d4 <__kernel_cos+0x24>
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f5 fb5f 	bl	800098c <__aeabi_d2iz>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f000 8088 	beq.w	800b3e4 <__kernel_cos+0x134>
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f4 ffe8 	bl	80002b0 <__aeabi_dmul>
 800b2e0:	4b51      	ldr	r3, [pc, #324]	@ (800b428 <__kernel_cos+0x178>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	460d      	mov	r5, r1
 800b2e8:	f7f4 ffe2 	bl	80002b0 <__aeabi_dmul>
 800b2ec:	a340      	add	r3, pc, #256	@ (adr r3, 800b3f0 <__kernel_cos+0x140>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	4682      	mov	sl, r0
 800b2f4:	468b      	mov	fp, r1
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f4 ffd9 	bl	80002b0 <__aeabi_dmul>
 800b2fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800b3f8 <__kernel_cos+0x148>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f7f5 f904 	bl	8000510 <__adddf3>
 800b308:	4622      	mov	r2, r4
 800b30a:	462b      	mov	r3, r5
 800b30c:	f7f4 ffd0 	bl	80002b0 <__aeabi_dmul>
 800b310:	a33b      	add	r3, pc, #236	@ (adr r3, 800b400 <__kernel_cos+0x150>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f5 f8f9 	bl	800050c <__aeabi_dsub>
 800b31a:	4622      	mov	r2, r4
 800b31c:	462b      	mov	r3, r5
 800b31e:	f7f4 ffc7 	bl	80002b0 <__aeabi_dmul>
 800b322:	a339      	add	r3, pc, #228	@ (adr r3, 800b408 <__kernel_cos+0x158>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f7f5 f8f2 	bl	8000510 <__adddf3>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	f7f4 ffbe 	bl	80002b0 <__aeabi_dmul>
 800b334:	a336      	add	r3, pc, #216	@ (adr r3, 800b410 <__kernel_cos+0x160>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f5 f8e7 	bl	800050c <__aeabi_dsub>
 800b33e:	4622      	mov	r2, r4
 800b340:	462b      	mov	r3, r5
 800b342:	f7f4 ffb5 	bl	80002b0 <__aeabi_dmul>
 800b346:	a334      	add	r3, pc, #208	@ (adr r3, 800b418 <__kernel_cos+0x168>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f5 f8e0 	bl	8000510 <__adddf3>
 800b350:	4622      	mov	r2, r4
 800b352:	462b      	mov	r3, r5
 800b354:	f7f4 ffac 	bl	80002b0 <__aeabi_dmul>
 800b358:	4622      	mov	r2, r4
 800b35a:	462b      	mov	r3, r5
 800b35c:	f7f4 ffa8 	bl	80002b0 <__aeabi_dmul>
 800b360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b364:	4604      	mov	r4, r0
 800b366:	460d      	mov	r5, r1
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f4 ffa0 	bl	80002b0 <__aeabi_dmul>
 800b370:	460b      	mov	r3, r1
 800b372:	4602      	mov	r2, r0
 800b374:	4629      	mov	r1, r5
 800b376:	4620      	mov	r0, r4
 800b378:	f7f5 f8c8 	bl	800050c <__aeabi_dsub>
 800b37c:	4b2b      	ldr	r3, [pc, #172]	@ (800b42c <__kernel_cos+0x17c>)
 800b37e:	4598      	cmp	r8, r3
 800b380:	4606      	mov	r6, r0
 800b382:	460f      	mov	r7, r1
 800b384:	d810      	bhi.n	800b3a8 <__kernel_cos+0xf8>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4650      	mov	r0, sl
 800b38c:	4659      	mov	r1, fp
 800b38e:	f7f5 f8bd 	bl	800050c <__aeabi_dsub>
 800b392:	460b      	mov	r3, r1
 800b394:	4926      	ldr	r1, [pc, #152]	@ (800b430 <__kernel_cos+0x180>)
 800b396:	4602      	mov	r2, r0
 800b398:	2000      	movs	r0, #0
 800b39a:	f7f5 f8b7 	bl	800050c <__aeabi_dsub>
 800b39e:	ec41 0b10 	vmov	d0, r0, r1
 800b3a2:	b003      	add	sp, #12
 800b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a8:	4b22      	ldr	r3, [pc, #136]	@ (800b434 <__kernel_cos+0x184>)
 800b3aa:	4921      	ldr	r1, [pc, #132]	@ (800b430 <__kernel_cos+0x180>)
 800b3ac:	4598      	cmp	r8, r3
 800b3ae:	bf8c      	ite	hi
 800b3b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800b438 <__kernel_cos+0x188>)
 800b3b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b3b6:	2400      	movs	r4, #0
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	2000      	movs	r0, #0
 800b3be:	f7f5 f8a5 	bl	800050c <__aeabi_dsub>
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	4689      	mov	r9, r1
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	f7f5 f89d 	bl	800050c <__aeabi_dsub>
 800b3d2:	4632      	mov	r2, r6
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f7f5 f899 	bl	800050c <__aeabi_dsub>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	e7da      	b.n	800b39a <__kernel_cos+0xea>
 800b3e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b420 <__kernel_cos+0x170>
 800b3e8:	e7db      	b.n	800b3a2 <__kernel_cos+0xf2>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	be8838d4 	.word	0xbe8838d4
 800b3f4:	bda8fae9 	.word	0xbda8fae9
 800b3f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3fc:	3e21ee9e 	.word	0x3e21ee9e
 800b400:	809c52ad 	.word	0x809c52ad
 800b404:	3e927e4f 	.word	0x3e927e4f
 800b408:	19cb1590 	.word	0x19cb1590
 800b40c:	3efa01a0 	.word	0x3efa01a0
 800b410:	16c15177 	.word	0x16c15177
 800b414:	3f56c16c 	.word	0x3f56c16c
 800b418:	5555554c 	.word	0x5555554c
 800b41c:	3fa55555 	.word	0x3fa55555
 800b420:	00000000 	.word	0x00000000
 800b424:	3ff00000 	.word	0x3ff00000
 800b428:	3fe00000 	.word	0x3fe00000
 800b42c:	3fd33332 	.word	0x3fd33332
 800b430:	3ff00000 	.word	0x3ff00000
 800b434:	3fe90000 	.word	0x3fe90000
 800b438:	3fd20000 	.word	0x3fd20000
 800b43c:	00000000 	.word	0x00000000

0800b440 <__kernel_sin>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	ec55 4b10 	vmov	r4, r5, d0
 800b448:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b44c:	b085      	sub	sp, #20
 800b44e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b452:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b456:	4680      	mov	r8, r0
 800b458:	d205      	bcs.n	800b466 <__kernel_sin+0x26>
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	f7f5 fa95 	bl	800098c <__aeabi_d2iz>
 800b462:	2800      	cmp	r0, #0
 800b464:	d052      	beq.n	800b50c <__kernel_sin+0xcc>
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f4 ff1f 	bl	80002b0 <__aeabi_dmul>
 800b472:	4682      	mov	sl, r0
 800b474:	468b      	mov	fp, r1
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4620      	mov	r0, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	f7f4 ff17 	bl	80002b0 <__aeabi_dmul>
 800b482:	a342      	add	r3, pc, #264	@ (adr r3, 800b58c <__kernel_sin+0x14c>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	e9cd 0100 	strd	r0, r1, [sp]
 800b48c:	4650      	mov	r0, sl
 800b48e:	4659      	mov	r1, fp
 800b490:	f7f4 ff0e 	bl	80002b0 <__aeabi_dmul>
 800b494:	a33f      	add	r3, pc, #252	@ (adr r3, 800b594 <__kernel_sin+0x154>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f5 f837 	bl	800050c <__aeabi_dsub>
 800b49e:	4652      	mov	r2, sl
 800b4a0:	465b      	mov	r3, fp
 800b4a2:	f7f4 ff05 	bl	80002b0 <__aeabi_dmul>
 800b4a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800b59c <__kernel_sin+0x15c>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f5 f830 	bl	8000510 <__adddf3>
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	465b      	mov	r3, fp
 800b4b4:	f7f4 fefc 	bl	80002b0 <__aeabi_dmul>
 800b4b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800b5a4 <__kernel_sin+0x164>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f5 f825 	bl	800050c <__aeabi_dsub>
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	f7f4 fef3 	bl	80002b0 <__aeabi_dmul>
 800b4ca:	a338      	add	r3, pc, #224	@ (adr r3, 800b5ac <__kernel_sin+0x16c>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f5 f81e 	bl	8000510 <__adddf3>
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	f1b8 0f00 	cmp.w	r8, #0
 800b4dc:	d11b      	bne.n	800b516 <__kernel_sin+0xd6>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	f7f4 fee3 	bl	80002b0 <__aeabi_dmul>
 800b4ea:	a325      	add	r3, pc, #148	@ (adr r3, 800b580 <__kernel_sin+0x140>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f5 f80c 	bl	800050c <__aeabi_dsub>
 800b4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f8:	f7f4 feda 	bl	80002b0 <__aeabi_dmul>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4620      	mov	r0, r4
 800b502:	4629      	mov	r1, r5
 800b504:	f7f5 f804 	bl	8000510 <__adddf3>
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	ec45 4b10 	vmov	d0, r4, r5
 800b510:	b005      	add	sp, #20
 800b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51a:	4b1b      	ldr	r3, [pc, #108]	@ (800b588 <__kernel_sin+0x148>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	f7f4 fec7 	bl	80002b0 <__aeabi_dmul>
 800b522:	4632      	mov	r2, r6
 800b524:	4680      	mov	r8, r0
 800b526:	4689      	mov	r9, r1
 800b528:	463b      	mov	r3, r7
 800b52a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b52e:	f7f4 febf 	bl	80002b0 <__aeabi_dmul>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4640      	mov	r0, r8
 800b538:	4649      	mov	r1, r9
 800b53a:	f7f4 ffe7 	bl	800050c <__aeabi_dsub>
 800b53e:	4652      	mov	r2, sl
 800b540:	465b      	mov	r3, fp
 800b542:	f7f4 feb5 	bl	80002b0 <__aeabi_dmul>
 800b546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b54a:	f7f4 ffdf 	bl	800050c <__aeabi_dsub>
 800b54e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b580 <__kernel_sin+0x140>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b55c:	f7f4 fea8 	bl	80002b0 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f4 ffd2 	bl	8000510 <__adddf3>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f4 ffca 	bl	800050c <__aeabi_dsub>
 800b578:	e7c6      	b.n	800b508 <__kernel_sin+0xc8>
 800b57a:	bf00      	nop
 800b57c:	f3af 8000 	nop.w
 800b580:	55555549 	.word	0x55555549
 800b584:	3fc55555 	.word	0x3fc55555
 800b588:	3fe00000 	.word	0x3fe00000
 800b58c:	5acfd57c 	.word	0x5acfd57c
 800b590:	3de5d93a 	.word	0x3de5d93a
 800b594:	8a2b9ceb 	.word	0x8a2b9ceb
 800b598:	3e5ae5e6 	.word	0x3e5ae5e6
 800b59c:	57b1fe7d 	.word	0x57b1fe7d
 800b5a0:	3ec71de3 	.word	0x3ec71de3
 800b5a4:	19c161d5 	.word	0x19c161d5
 800b5a8:	3f2a01a0 	.word	0x3f2a01a0
 800b5ac:	1110f8a6 	.word	0x1110f8a6
 800b5b0:	3f811111 	.word	0x3f811111
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <__ieee754_rem_pio2>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	ec57 6b10 	vmov	r6, r7, d0
 800b5c0:	4bc5      	ldr	r3, [pc, #788]	@ (800b8d8 <__ieee754_rem_pio2+0x320>)
 800b5c2:	b08d      	sub	sp, #52	@ 0x34
 800b5c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b5c8:	4598      	cmp	r8, r3
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	9704      	str	r7, [sp, #16]
 800b5ce:	d807      	bhi.n	800b5e0 <__ieee754_rem_pio2+0x28>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	ed80 0b00 	vstr	d0, [r0]
 800b5d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b5dc:	2500      	movs	r5, #0
 800b5de:	e028      	b.n	800b632 <__ieee754_rem_pio2+0x7a>
 800b5e0:	4bbe      	ldr	r3, [pc, #760]	@ (800b8dc <__ieee754_rem_pio2+0x324>)
 800b5e2:	4598      	cmp	r8, r3
 800b5e4:	d878      	bhi.n	800b6d8 <__ieee754_rem_pio2+0x120>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	4dbd      	ldr	r5, [pc, #756]	@ (800b8e0 <__ieee754_rem_pio2+0x328>)
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b8a0 <__ieee754_rem_pio2+0x2e8>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	dd38      	ble.n	800b66a <__ieee754_rem_pio2+0xb2>
 800b5f8:	f7f4 ff88 	bl	800050c <__aeabi_dsub>
 800b5fc:	45a8      	cmp	r8, r5
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	d01a      	beq.n	800b63a <__ieee754_rem_pio2+0x82>
 800b604:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f0>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 ff7f 	bl	800050c <__aeabi_dsub>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 ff77 	bl	800050c <__aeabi_dsub>
 800b61e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f0>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f4 ff72 	bl	800050c <__aeabi_dsub>
 800b628:	e9c4 8900 	strd	r8, r9, [r4]
 800b62c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b630:	2501      	movs	r5, #1
 800b632:	4628      	mov	r0, r5
 800b634:	b00d      	add	sp, #52	@ 0x34
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63a:	a39d      	add	r3, pc, #628	@ (adr r3, 800b8b0 <__ieee754_rem_pio2+0x2f8>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f7f4 ff64 	bl	800050c <__aeabi_dsub>
 800b644:	a39c      	add	r3, pc, #624	@ (adr r3, 800b8b8 <__ieee754_rem_pio2+0x300>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	4606      	mov	r6, r0
 800b64c:	460f      	mov	r7, r1
 800b64e:	f7f4 ff5d 	bl	800050c <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4680      	mov	r8, r0
 800b658:	4689      	mov	r9, r1
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f4 ff55 	bl	800050c <__aeabi_dsub>
 800b662:	a395      	add	r3, pc, #596	@ (adr r3, 800b8b8 <__ieee754_rem_pio2+0x300>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	e7dc      	b.n	800b624 <__ieee754_rem_pio2+0x6c>
 800b66a:	f7f4 ff51 	bl	8000510 <__adddf3>
 800b66e:	45a8      	cmp	r8, r5
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	d018      	beq.n	800b6a8 <__ieee754_rem_pio2+0xf0>
 800b676:	a38c      	add	r3, pc, #560	@ (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f0>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 ff48 	bl	8000510 <__adddf3>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f4 ff3e 	bl	800050c <__aeabi_dsub>
 800b690:	a385      	add	r3, pc, #532	@ (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f0>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f7f4 ff3b 	bl	8000510 <__adddf3>
 800b69a:	f04f 35ff 	mov.w	r5, #4294967295
 800b69e:	e9c4 8900 	strd	r8, r9, [r4]
 800b6a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6a6:	e7c4      	b.n	800b632 <__ieee754_rem_pio2+0x7a>
 800b6a8:	a381      	add	r3, pc, #516	@ (adr r3, 800b8b0 <__ieee754_rem_pio2+0x2f8>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	f7f4 ff2f 	bl	8000510 <__adddf3>
 800b6b2:	a381      	add	r3, pc, #516	@ (adr r3, 800b8b8 <__ieee754_rem_pio2+0x300>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	460f      	mov	r7, r1
 800b6bc:	f7f4 ff28 	bl	8000510 <__adddf3>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	4689      	mov	r9, r1
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	f7f4 ff1e 	bl	800050c <__aeabi_dsub>
 800b6d0:	a379      	add	r3, pc, #484	@ (adr r3, 800b8b8 <__ieee754_rem_pio2+0x300>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	e7de      	b.n	800b696 <__ieee754_rem_pio2+0xde>
 800b6d8:	4b82      	ldr	r3, [pc, #520]	@ (800b8e4 <__ieee754_rem_pio2+0x32c>)
 800b6da:	4598      	cmp	r8, r3
 800b6dc:	f200 80d1 	bhi.w	800b882 <__ieee754_rem_pio2+0x2ca>
 800b6e0:	f000 f966 	bl	800b9b0 <fabs>
 800b6e4:	ec57 6b10 	vmov	r6, r7, d0
 800b6e8:	a375      	add	r3, pc, #468	@ (adr r3, 800b8c0 <__ieee754_rem_pio2+0x308>)
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	f7f4 fddd 	bl	80002b0 <__aeabi_dmul>
 800b6f6:	4b7c      	ldr	r3, [pc, #496]	@ (800b8e8 <__ieee754_rem_pio2+0x330>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f7f4 ff09 	bl	8000510 <__adddf3>
 800b6fe:	f7f5 f945 	bl	800098c <__aeabi_d2iz>
 800b702:	4605      	mov	r5, r0
 800b704:	f7f5 f850 	bl	80007a8 <__aeabi_i2d>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b710:	a363      	add	r3, pc, #396	@ (adr r3, 800b8a0 <__ieee754_rem_pio2+0x2e8>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f4 fdcb 	bl	80002b0 <__aeabi_dmul>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4630      	mov	r0, r6
 800b720:	4639      	mov	r1, r7
 800b722:	f7f4 fef3 	bl	800050c <__aeabi_dsub>
 800b726:	a360      	add	r3, pc, #384	@ (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f0>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	4682      	mov	sl, r0
 800b72e:	468b      	mov	fp, r1
 800b730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b734:	f7f4 fdbc 	bl	80002b0 <__aeabi_dmul>
 800b738:	2d1f      	cmp	r5, #31
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	dc0c      	bgt.n	800b75a <__ieee754_rem_pio2+0x1a2>
 800b740:	4b6a      	ldr	r3, [pc, #424]	@ (800b8ec <__ieee754_rem_pio2+0x334>)
 800b742:	1e6a      	subs	r2, r5, #1
 800b744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b748:	4543      	cmp	r3, r8
 800b74a:	d006      	beq.n	800b75a <__ieee754_rem_pio2+0x1a2>
 800b74c:	4632      	mov	r2, r6
 800b74e:	463b      	mov	r3, r7
 800b750:	4650      	mov	r0, sl
 800b752:	4659      	mov	r1, fp
 800b754:	f7f4 feda 	bl	800050c <__aeabi_dsub>
 800b758:	e00e      	b.n	800b778 <__ieee754_rem_pio2+0x1c0>
 800b75a:	463b      	mov	r3, r7
 800b75c:	4632      	mov	r2, r6
 800b75e:	4650      	mov	r0, sl
 800b760:	4659      	mov	r1, fp
 800b762:	f7f4 fed3 	bl	800050c <__aeabi_dsub>
 800b766:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b770:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b774:	2b10      	cmp	r3, #16
 800b776:	dc02      	bgt.n	800b77e <__ieee754_rem_pio2+0x1c6>
 800b778:	e9c4 0100 	strd	r0, r1, [r4]
 800b77c:	e039      	b.n	800b7f2 <__ieee754_rem_pio2+0x23a>
 800b77e:	a34c      	add	r3, pc, #304	@ (adr r3, 800b8b0 <__ieee754_rem_pio2+0x2f8>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b788:	f7f4 fd92 	bl	80002b0 <__aeabi_dmul>
 800b78c:	4606      	mov	r6, r0
 800b78e:	460f      	mov	r7, r1
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4650      	mov	r0, sl
 800b796:	4659      	mov	r1, fp
 800b798:	f7f4 feb8 	bl	800050c <__aeabi_dsub>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	4689      	mov	r9, r1
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	f7f4 feb0 	bl	800050c <__aeabi_dsub>
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	f7f4 feac 	bl	800050c <__aeabi_dsub>
 800b7b4:	a340      	add	r3, pc, #256	@ (adr r3, 800b8b8 <__ieee754_rem_pio2+0x300>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c2:	f7f4 fd75 	bl	80002b0 <__aeabi_dmul>
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	463b      	mov	r3, r7
 800b7ca:	f7f4 fe9f 	bl	800050c <__aeabi_dsub>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 fe97 	bl	800050c <__aeabi_dsub>
 800b7de:	9a05      	ldr	r2, [sp, #20]
 800b7e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b31      	cmp	r3, #49	@ 0x31
 800b7e8:	dc20      	bgt.n	800b82c <__ieee754_rem_pio2+0x274>
 800b7ea:	e9c4 0100 	strd	r0, r1, [r4]
 800b7ee:	46c2      	mov	sl, r8
 800b7f0:	46cb      	mov	fp, r9
 800b7f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 fe85 	bl	800050c <__aeabi_dsub>
 800b802:	463b      	mov	r3, r7
 800b804:	4632      	mov	r2, r6
 800b806:	f7f4 fe81 	bl	800050c <__aeabi_dsub>
 800b80a:	9b04      	ldr	r3, [sp, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b812:	f6bf af0e 	bge.w	800b632 <__ieee754_rem_pio2+0x7a>
 800b816:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b81a:	6063      	str	r3, [r4, #4]
 800b81c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b820:	f8c4 8000 	str.w	r8, [r4]
 800b824:	60a0      	str	r0, [r4, #8]
 800b826:	60e3      	str	r3, [r4, #12]
 800b828:	426d      	negs	r5, r5
 800b82a:	e702      	b.n	800b632 <__ieee754_rem_pio2+0x7a>
 800b82c:	a326      	add	r3, pc, #152	@ (adr r3, 800b8c8 <__ieee754_rem_pio2+0x310>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b836:	f7f4 fd3b 	bl	80002b0 <__aeabi_dmul>
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4640      	mov	r0, r8
 800b844:	4649      	mov	r1, r9
 800b846:	f7f4 fe61 	bl	800050c <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4682      	mov	sl, r0
 800b850:	468b      	mov	fp, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f4 fe59 	bl	800050c <__aeabi_dsub>
 800b85a:	4632      	mov	r2, r6
 800b85c:	463b      	mov	r3, r7
 800b85e:	f7f4 fe55 	bl	800050c <__aeabi_dsub>
 800b862:	a31b      	add	r3, pc, #108	@ (adr r3, 800b8d0 <__ieee754_rem_pio2+0x318>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b870:	f7f4 fd1e 	bl	80002b0 <__aeabi_dmul>
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	f7f4 fe48 	bl	800050c <__aeabi_dsub>
 800b87c:	4606      	mov	r6, r0
 800b87e:	460f      	mov	r7, r1
 800b880:	e764      	b.n	800b74c <__ieee754_rem_pio2+0x194>
 800b882:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f0 <__ieee754_rem_pio2+0x338>)
 800b884:	4598      	cmp	r8, r3
 800b886:	d935      	bls.n	800b8f4 <__ieee754_rem_pio2+0x33c>
 800b888:	4632      	mov	r2, r6
 800b88a:	463b      	mov	r3, r7
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	f7f4 fe3c 	bl	800050c <__aeabi_dsub>
 800b894:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b898:	e9c4 0100 	strd	r0, r1, [r4]
 800b89c:	e69e      	b.n	800b5dc <__ieee754_rem_pio2+0x24>
 800b89e:	bf00      	nop
 800b8a0:	54400000 	.word	0x54400000
 800b8a4:	3ff921fb 	.word	0x3ff921fb
 800b8a8:	1a626331 	.word	0x1a626331
 800b8ac:	3dd0b461 	.word	0x3dd0b461
 800b8b0:	1a600000 	.word	0x1a600000
 800b8b4:	3dd0b461 	.word	0x3dd0b461
 800b8b8:	2e037073 	.word	0x2e037073
 800b8bc:	3ba3198a 	.word	0x3ba3198a
 800b8c0:	6dc9c883 	.word	0x6dc9c883
 800b8c4:	3fe45f30 	.word	0x3fe45f30
 800b8c8:	2e000000 	.word	0x2e000000
 800b8cc:	3ba3198a 	.word	0x3ba3198a
 800b8d0:	252049c1 	.word	0x252049c1
 800b8d4:	397b839a 	.word	0x397b839a
 800b8d8:	3fe921fb 	.word	0x3fe921fb
 800b8dc:	4002d97b 	.word	0x4002d97b
 800b8e0:	3ff921fb 	.word	0x3ff921fb
 800b8e4:	413921fb 	.word	0x413921fb
 800b8e8:	3fe00000 	.word	0x3fe00000
 800b8ec:	0800c350 	.word	0x0800c350
 800b8f0:	7fefffff 	.word	0x7fefffff
 800b8f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b8f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b8fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b900:	4630      	mov	r0, r6
 800b902:	460f      	mov	r7, r1
 800b904:	f7f5 f842 	bl	800098c <__aeabi_d2iz>
 800b908:	f7f4 ff4e 	bl	80007a8 <__aeabi_i2d>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4630      	mov	r0, r6
 800b912:	4639      	mov	r1, r7
 800b914:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b918:	f7f4 fdf8 	bl	800050c <__aeabi_dsub>
 800b91c:	4b22      	ldr	r3, [pc, #136]	@ (800b9a8 <__ieee754_rem_pio2+0x3f0>)
 800b91e:	2200      	movs	r2, #0
 800b920:	f7f4 fcc6 	bl	80002b0 <__aeabi_dmul>
 800b924:	460f      	mov	r7, r1
 800b926:	4606      	mov	r6, r0
 800b928:	f7f5 f830 	bl	800098c <__aeabi_d2iz>
 800b92c:	f7f4 ff3c 	bl	80007a8 <__aeabi_i2d>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4630      	mov	r0, r6
 800b936:	4639      	mov	r1, r7
 800b938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b93c:	f7f4 fde6 	bl	800050c <__aeabi_dsub>
 800b940:	4b19      	ldr	r3, [pc, #100]	@ (800b9a8 <__ieee754_rem_pio2+0x3f0>)
 800b942:	2200      	movs	r2, #0
 800b944:	f7f4 fcb4 	bl	80002b0 <__aeabi_dmul>
 800b948:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b94c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b950:	f04f 0803 	mov.w	r8, #3
 800b954:	2600      	movs	r6, #0
 800b956:	2700      	movs	r7, #0
 800b958:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	46c2      	mov	sl, r8
 800b962:	f108 38ff 	add.w	r8, r8, #4294967295
 800b966:	f7f4 ffdf 	bl	8000928 <__aeabi_dcmpeq>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d1f4      	bne.n	800b958 <__ieee754_rem_pio2+0x3a0>
 800b96e:	4b0f      	ldr	r3, [pc, #60]	@ (800b9ac <__ieee754_rem_pio2+0x3f4>)
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	2302      	movs	r3, #2
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	462a      	mov	r2, r5
 800b978:	4653      	mov	r3, sl
 800b97a:	4621      	mov	r1, r4
 800b97c:	a806      	add	r0, sp, #24
 800b97e:	f000 f81f 	bl	800b9c0 <__kernel_rem_pio2>
 800b982:	9b04      	ldr	r3, [sp, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	4605      	mov	r5, r0
 800b988:	f6bf ae53 	bge.w	800b632 <__ieee754_rem_pio2+0x7a>
 800b98c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b994:	e9c4 2300 	strd	r2, r3, [r4]
 800b998:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b99c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b9a4:	e740      	b.n	800b828 <__ieee754_rem_pio2+0x270>
 800b9a6:	bf00      	nop
 800b9a8:	41700000 	.word	0x41700000
 800b9ac:	0800c3d0 	.word	0x0800c3d0

0800b9b0 <fabs>:
 800b9b0:	ec51 0b10 	vmov	r0, r1, d0
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9ba:	ec43 2b10 	vmov	d0, r2, r3
 800b9be:	4770      	bx	lr

0800b9c0 <__kernel_rem_pio2>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	ed2d 8b02 	vpush	{d8}
 800b9c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b9cc:	f112 0f14 	cmn.w	r2, #20
 800b9d0:	9306      	str	r3, [sp, #24]
 800b9d2:	9104      	str	r1, [sp, #16]
 800b9d4:	4bbe      	ldr	r3, [pc, #760]	@ (800bcd0 <__kernel_rem_pio2+0x310>)
 800b9d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b9d8:	9008      	str	r0, [sp, #32]
 800b9da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	9b06      	ldr	r3, [sp, #24]
 800b9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9e6:	bfa8      	it	ge
 800b9e8:	1ed4      	subge	r4, r2, #3
 800b9ea:	9305      	str	r3, [sp, #20]
 800b9ec:	bfb2      	itee	lt
 800b9ee:	2400      	movlt	r4, #0
 800b9f0:	2318      	movge	r3, #24
 800b9f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b9f6:	f06f 0317 	mvn.w	r3, #23
 800b9fa:	fb04 3303 	mla	r3, r4, r3, r3
 800b9fe:	eb03 0b02 	add.w	fp, r3, r2
 800ba02:	9b00      	ldr	r3, [sp, #0]
 800ba04:	9a05      	ldr	r2, [sp, #20]
 800ba06:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800bcc0 <__kernel_rem_pio2+0x300>
 800ba0a:	eb03 0802 	add.w	r8, r3, r2
 800ba0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ba10:	1aa7      	subs	r7, r4, r2
 800ba12:	ae20      	add	r6, sp, #128	@ 0x80
 800ba14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba18:	2500      	movs	r5, #0
 800ba1a:	4545      	cmp	r5, r8
 800ba1c:	dd13      	ble.n	800ba46 <__kernel_rem_pio2+0x86>
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	aa20      	add	r2, sp, #128	@ 0x80
 800ba22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ba26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ba2a:	f04f 0800 	mov.w	r8, #0
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	4598      	cmp	r8, r3
 800ba32:	dc31      	bgt.n	800ba98 <__kernel_rem_pio2+0xd8>
 800ba34:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800bcc0 <__kernel_rem_pio2+0x300>
 800ba38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba40:	462f      	mov	r7, r5
 800ba42:	2600      	movs	r6, #0
 800ba44:	e01b      	b.n	800ba7e <__kernel_rem_pio2+0xbe>
 800ba46:	42ef      	cmn	r7, r5
 800ba48:	d407      	bmi.n	800ba5a <__kernel_rem_pio2+0x9a>
 800ba4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba4e:	f7f4 feab 	bl	80007a8 <__aeabi_i2d>
 800ba52:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba56:	3501      	adds	r5, #1
 800ba58:	e7df      	b.n	800ba1a <__kernel_rem_pio2+0x5a>
 800ba5a:	ec51 0b18 	vmov	r0, r1, d8
 800ba5e:	e7f8      	b.n	800ba52 <__kernel_rem_pio2+0x92>
 800ba60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ba68:	f7f4 fc22 	bl	80002b0 <__aeabi_dmul>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba74:	f7f4 fd4c 	bl	8000510 <__adddf3>
 800ba78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	9b05      	ldr	r3, [sp, #20]
 800ba80:	429e      	cmp	r6, r3
 800ba82:	f1a7 0708 	sub.w	r7, r7, #8
 800ba86:	ddeb      	ble.n	800ba60 <__kernel_rem_pio2+0xa0>
 800ba88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba8c:	f108 0801 	add.w	r8, r8, #1
 800ba90:	ecaa 7b02 	vstmia	sl!, {d7}
 800ba94:	3508      	adds	r5, #8
 800ba96:	e7ca      	b.n	800ba2e <__kernel_rem_pio2+0x6e>
 800ba98:	9b00      	ldr	r3, [sp, #0]
 800ba9a:	f8dd 8000 	ldr.w	r8, [sp]
 800ba9e:	aa0c      	add	r2, sp, #48	@ 0x30
 800baa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800baa8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800baac:	9309      	str	r3, [sp, #36]	@ 0x24
 800baae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bab4:	ab98      	add	r3, sp, #608	@ 0x260
 800bab6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800baba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800babe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bac2:	ac0c      	add	r4, sp, #48	@ 0x30
 800bac4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bac6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800baca:	46a1      	mov	r9, r4
 800bacc:	46c2      	mov	sl, r8
 800bace:	f1ba 0f00 	cmp.w	sl, #0
 800bad2:	f1a5 0508 	sub.w	r5, r5, #8
 800bad6:	dc77      	bgt.n	800bbc8 <__kernel_rem_pio2+0x208>
 800bad8:	4658      	mov	r0, fp
 800bada:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bade:	f000 fac7 	bl	800c070 <scalbn>
 800bae2:	ec57 6b10 	vmov	r6, r7, d0
 800bae6:	2200      	movs	r2, #0
 800bae8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fbde 	bl	80002b0 <__aeabi_dmul>
 800baf4:	ec41 0b10 	vmov	d0, r0, r1
 800baf8:	f000 fb3a 	bl	800c170 <floor>
 800bafc:	4b75      	ldr	r3, [pc, #468]	@ (800bcd4 <__kernel_rem_pio2+0x314>)
 800bafe:	ec51 0b10 	vmov	r0, r1, d0
 800bb02:	2200      	movs	r2, #0
 800bb04:	f7f4 fbd4 	bl	80002b0 <__aeabi_dmul>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	4639      	mov	r1, r7
 800bb10:	f7f4 fcfc 	bl	800050c <__aeabi_dsub>
 800bb14:	460f      	mov	r7, r1
 800bb16:	4606      	mov	r6, r0
 800bb18:	f7f4 ff38 	bl	800098c <__aeabi_d2iz>
 800bb1c:	9002      	str	r0, [sp, #8]
 800bb1e:	f7f4 fe43 	bl	80007a8 <__aeabi_i2d>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f4 fcef 	bl	800050c <__aeabi_dsub>
 800bb2e:	f1bb 0f00 	cmp.w	fp, #0
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	dd6c      	ble.n	800bc12 <__kernel_rem_pio2+0x252>
 800bb38:	f108 31ff 	add.w	r1, r8, #4294967295
 800bb3c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb3e:	9d02      	ldr	r5, [sp, #8]
 800bb40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb44:	f1cb 0018 	rsb	r0, fp, #24
 800bb48:	fa43 f200 	asr.w	r2, r3, r0
 800bb4c:	4415      	add	r5, r2
 800bb4e:	4082      	lsls	r2, r0
 800bb50:	1a9b      	subs	r3, r3, r2
 800bb52:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb54:	9502      	str	r5, [sp, #8]
 800bb56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bb5a:	f1cb 0217 	rsb	r2, fp, #23
 800bb5e:	fa43 f902 	asr.w	r9, r3, r2
 800bb62:	f1b9 0f00 	cmp.w	r9, #0
 800bb66:	dd64      	ble.n	800bc32 <__kernel_rem_pio2+0x272>
 800bb68:	9b02      	ldr	r3, [sp, #8]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	9302      	str	r3, [sp, #8]
 800bb70:	4615      	mov	r5, r2
 800bb72:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bb76:	4590      	cmp	r8, r2
 800bb78:	f300 80b8 	bgt.w	800bcec <__kernel_rem_pio2+0x32c>
 800bb7c:	f1bb 0f00 	cmp.w	fp, #0
 800bb80:	dd07      	ble.n	800bb92 <__kernel_rem_pio2+0x1d2>
 800bb82:	f1bb 0f01 	cmp.w	fp, #1
 800bb86:	f000 80bf 	beq.w	800bd08 <__kernel_rem_pio2+0x348>
 800bb8a:	f1bb 0f02 	cmp.w	fp, #2
 800bb8e:	f000 80c6 	beq.w	800bd1e <__kernel_rem_pio2+0x35e>
 800bb92:	f1b9 0f02 	cmp.w	r9, #2
 800bb96:	d14c      	bne.n	800bc32 <__kernel_rem_pio2+0x272>
 800bb98:	4632      	mov	r2, r6
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	494e      	ldr	r1, [pc, #312]	@ (800bcd8 <__kernel_rem_pio2+0x318>)
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f7f4 fcb4 	bl	800050c <__aeabi_dsub>
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	d042      	beq.n	800bc32 <__kernel_rem_pio2+0x272>
 800bbac:	4658      	mov	r0, fp
 800bbae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bcc8 <__kernel_rem_pio2+0x308>
 800bbb2:	f000 fa5d 	bl	800c070 <scalbn>
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	ec53 2b10 	vmov	r2, r3, d0
 800bbbe:	f7f4 fca5 	bl	800050c <__aeabi_dsub>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460f      	mov	r7, r1
 800bbc6:	e034      	b.n	800bc32 <__kernel_rem_pio2+0x272>
 800bbc8:	4b44      	ldr	r3, [pc, #272]	@ (800bcdc <__kernel_rem_pio2+0x31c>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd0:	f7f4 fb6e 	bl	80002b0 <__aeabi_dmul>
 800bbd4:	f7f4 feda 	bl	800098c <__aeabi_d2iz>
 800bbd8:	f7f4 fde6 	bl	80007a8 <__aeabi_i2d>
 800bbdc:	4b40      	ldr	r3, [pc, #256]	@ (800bce0 <__kernel_rem_pio2+0x320>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	f7f4 fb64 	bl	80002b0 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf0:	f7f4 fc8c 	bl	800050c <__aeabi_dsub>
 800bbf4:	f7f4 feca 	bl	800098c <__aeabi_d2iz>
 800bbf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbfc:	f849 0b04 	str.w	r0, [r9], #4
 800bc00:	4639      	mov	r1, r7
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7f4 fc84 	bl	8000510 <__adddf3>
 800bc08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc10:	e75d      	b.n	800bace <__kernel_rem_pio2+0x10e>
 800bc12:	d107      	bne.n	800bc24 <__kernel_rem_pio2+0x264>
 800bc14:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc18:	aa0c      	add	r2, sp, #48	@ 0x30
 800bc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bc22:	e79e      	b.n	800bb62 <__kernel_rem_pio2+0x1a2>
 800bc24:	4b2f      	ldr	r3, [pc, #188]	@ (800bce4 <__kernel_rem_pio2+0x324>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fe9c 	bl	8000964 <__aeabi_dcmpge>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d143      	bne.n	800bcb8 <__kernel_rem_pio2+0x2f8>
 800bc30:	4681      	mov	r9, r0
 800bc32:	2200      	movs	r2, #0
 800bc34:	2300      	movs	r3, #0
 800bc36:	4630      	mov	r0, r6
 800bc38:	4639      	mov	r1, r7
 800bc3a:	f7f4 fe75 	bl	8000928 <__aeabi_dcmpeq>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f000 80bf 	beq.w	800bdc2 <__kernel_rem_pio2+0x402>
 800bc44:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc48:	2200      	movs	r2, #0
 800bc4a:	9900      	ldr	r1, [sp, #0]
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	da6e      	bge.n	800bd2e <__kernel_rem_pio2+0x36e>
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	f000 8089 	beq.w	800bd68 <__kernel_rem_pio2+0x3a8>
 800bc56:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc5c:	f1ab 0b18 	sub.w	fp, fp, #24
 800bc60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0f6      	beq.n	800bc56 <__kernel_rem_pio2+0x296>
 800bc68:	4658      	mov	r0, fp
 800bc6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bcc8 <__kernel_rem_pio2+0x308>
 800bc6e:	f000 f9ff 	bl	800c070 <scalbn>
 800bc72:	f108 0301 	add.w	r3, r8, #1
 800bc76:	00da      	lsls	r2, r3, #3
 800bc78:	9205      	str	r2, [sp, #20]
 800bc7a:	ec55 4b10 	vmov	r4, r5, d0
 800bc7e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bc80:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bcdc <__kernel_rem_pio2+0x31c>
 800bc84:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bc88:	4646      	mov	r6, r8
 800bc8a:	f04f 0a00 	mov.w	sl, #0
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	f280 80cf 	bge.w	800be32 <__kernel_rem_pio2+0x472>
 800bc94:	4644      	mov	r4, r8
 800bc96:	2c00      	cmp	r4, #0
 800bc98:	f2c0 80fd 	blt.w	800be96 <__kernel_rem_pio2+0x4d6>
 800bc9c:	4b12      	ldr	r3, [pc, #72]	@ (800bce8 <__kernel_rem_pio2+0x328>)
 800bc9e:	461f      	mov	r7, r3
 800bca0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bca2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bca6:	9306      	str	r3, [sp, #24]
 800bca8:	f04f 0a00 	mov.w	sl, #0
 800bcac:	f04f 0b00 	mov.w	fp, #0
 800bcb0:	2600      	movs	r6, #0
 800bcb2:	eba8 0504 	sub.w	r5, r8, r4
 800bcb6:	e0e2      	b.n	800be7e <__kernel_rem_pio2+0x4be>
 800bcb8:	f04f 0902 	mov.w	r9, #2
 800bcbc:	e754      	b.n	800bb68 <__kernel_rem_pio2+0x1a8>
 800bcbe:	bf00      	nop
	...
 800bccc:	3ff00000 	.word	0x3ff00000
 800bcd0:	0800c518 	.word	0x0800c518
 800bcd4:	40200000 	.word	0x40200000
 800bcd8:	3ff00000 	.word	0x3ff00000
 800bcdc:	3e700000 	.word	0x3e700000
 800bce0:	41700000 	.word	0x41700000
 800bce4:	3fe00000 	.word	0x3fe00000
 800bce8:	0800c4d8 	.word	0x0800c4d8
 800bcec:	f854 3b04 	ldr.w	r3, [r4], #4
 800bcf0:	b945      	cbnz	r5, 800bd04 <__kernel_rem_pio2+0x344>
 800bcf2:	b123      	cbz	r3, 800bcfe <__kernel_rem_pio2+0x33e>
 800bcf4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bcf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	3201      	adds	r2, #1
 800bd00:	461d      	mov	r5, r3
 800bd02:	e738      	b.n	800bb76 <__kernel_rem_pio2+0x1b6>
 800bd04:	1acb      	subs	r3, r1, r3
 800bd06:	e7f7      	b.n	800bcf8 <__kernel_rem_pio2+0x338>
 800bd08:	f108 32ff 	add.w	r2, r8, #4294967295
 800bd0c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd16:	a90c      	add	r1, sp, #48	@ 0x30
 800bd18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd1c:	e739      	b.n	800bb92 <__kernel_rem_pio2+0x1d2>
 800bd1e:	f108 32ff 	add.w	r2, r8, #4294967295
 800bd22:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd2c:	e7f3      	b.n	800bd16 <__kernel_rem_pio2+0x356>
 800bd2e:	a90c      	add	r1, sp, #48	@ 0x30
 800bd30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	430a      	orrs	r2, r1
 800bd38:	e787      	b.n	800bc4a <__kernel_rem_pio2+0x28a>
 800bd3a:	3401      	adds	r4, #1
 800bd3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	d0fa      	beq.n	800bd3a <__kernel_rem_pio2+0x37a>
 800bd44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd4a:	eb0d 0503 	add.w	r5, sp, r3
 800bd4e:	9b06      	ldr	r3, [sp, #24]
 800bd50:	aa20      	add	r2, sp, #128	@ 0x80
 800bd52:	4443      	add	r3, r8
 800bd54:	f108 0701 	add.w	r7, r8, #1
 800bd58:	3d98      	subs	r5, #152	@ 0x98
 800bd5a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bd5e:	4444      	add	r4, r8
 800bd60:	42bc      	cmp	r4, r7
 800bd62:	da04      	bge.n	800bd6e <__kernel_rem_pio2+0x3ae>
 800bd64:	46a0      	mov	r8, r4
 800bd66:	e6a2      	b.n	800baae <__kernel_rem_pio2+0xee>
 800bd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd6a:	2401      	movs	r4, #1
 800bd6c:	e7e6      	b.n	800bd3c <__kernel_rem_pio2+0x37c>
 800bd6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bd74:	f7f4 fd18 	bl	80007a8 <__aeabi_i2d>
 800bd78:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c040 <__kernel_rem_pio2+0x680>
 800bd7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd88:	46b2      	mov	sl, r6
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	4598      	cmp	r8, r3
 800bd92:	dd05      	ble.n	800bda0 <__kernel_rem_pio2+0x3e0>
 800bd94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd98:	3701      	adds	r7, #1
 800bd9a:	eca5 7b02 	vstmia	r5!, {d7}
 800bd9e:	e7df      	b.n	800bd60 <__kernel_rem_pio2+0x3a0>
 800bda0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bda4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bda8:	f7f4 fa82 	bl	80002b0 <__aeabi_dmul>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb4:	f7f4 fbac 	bl	8000510 <__adddf3>
 800bdb8:	f108 0801 	add.w	r8, r8, #1
 800bdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc0:	e7e5      	b.n	800bd8e <__kernel_rem_pio2+0x3ce>
 800bdc2:	f1cb 0000 	rsb	r0, fp, #0
 800bdc6:	ec47 6b10 	vmov	d0, r6, r7
 800bdca:	f000 f951 	bl	800c070 <scalbn>
 800bdce:	ec55 4b10 	vmov	r4, r5, d0
 800bdd2:	4b9d      	ldr	r3, [pc, #628]	@ (800c048 <__kernel_rem_pio2+0x688>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	f7f4 fdc3 	bl	8000964 <__aeabi_dcmpge>
 800bdde:	b300      	cbz	r0, 800be22 <__kernel_rem_pio2+0x462>
 800bde0:	4b9a      	ldr	r3, [pc, #616]	@ (800c04c <__kernel_rem_pio2+0x68c>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	4620      	mov	r0, r4
 800bde6:	4629      	mov	r1, r5
 800bde8:	f7f4 fa62 	bl	80002b0 <__aeabi_dmul>
 800bdec:	f7f4 fdce 	bl	800098c <__aeabi_d2iz>
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	f7f4 fcd9 	bl	80007a8 <__aeabi_i2d>
 800bdf6:	4b94      	ldr	r3, [pc, #592]	@ (800c048 <__kernel_rem_pio2+0x688>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f7f4 fa59 	bl	80002b0 <__aeabi_dmul>
 800bdfe:	460b      	mov	r3, r1
 800be00:	4602      	mov	r2, r0
 800be02:	4629      	mov	r1, r5
 800be04:	4620      	mov	r0, r4
 800be06:	f7f4 fb81 	bl	800050c <__aeabi_dsub>
 800be0a:	f7f4 fdbf 	bl	800098c <__aeabi_d2iz>
 800be0e:	ab0c      	add	r3, sp, #48	@ 0x30
 800be10:	f10b 0b18 	add.w	fp, fp, #24
 800be14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800be18:	f108 0801 	add.w	r8, r8, #1
 800be1c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800be20:	e722      	b.n	800bc68 <__kernel_rem_pio2+0x2a8>
 800be22:	4620      	mov	r0, r4
 800be24:	4629      	mov	r1, r5
 800be26:	f7f4 fdb1 	bl	800098c <__aeabi_d2iz>
 800be2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800be2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800be30:	e71a      	b.n	800bc68 <__kernel_rem_pio2+0x2a8>
 800be32:	ab0c      	add	r3, sp, #48	@ 0x30
 800be34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be38:	f7f4 fcb6 	bl	80007a8 <__aeabi_i2d>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fa36 	bl	80002b0 <__aeabi_dmul>
 800be44:	4652      	mov	r2, sl
 800be46:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800be4a:	465b      	mov	r3, fp
 800be4c:	4620      	mov	r0, r4
 800be4e:	4629      	mov	r1, r5
 800be50:	f7f4 fa2e 	bl	80002b0 <__aeabi_dmul>
 800be54:	3e01      	subs	r6, #1
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	e718      	b.n	800bc8e <__kernel_rem_pio2+0x2ce>
 800be5c:	9906      	ldr	r1, [sp, #24]
 800be5e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800be62:	9106      	str	r1, [sp, #24]
 800be64:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800be68:	f7f4 fa22 	bl	80002b0 <__aeabi_dmul>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4650      	mov	r0, sl
 800be72:	4659      	mov	r1, fp
 800be74:	f7f4 fb4c 	bl	8000510 <__adddf3>
 800be78:	3601      	adds	r6, #1
 800be7a:	4682      	mov	sl, r0
 800be7c:	468b      	mov	fp, r1
 800be7e:	9b00      	ldr	r3, [sp, #0]
 800be80:	429e      	cmp	r6, r3
 800be82:	dc01      	bgt.n	800be88 <__kernel_rem_pio2+0x4c8>
 800be84:	42b5      	cmp	r5, r6
 800be86:	dae9      	bge.n	800be5c <__kernel_rem_pio2+0x49c>
 800be88:	ab48      	add	r3, sp, #288	@ 0x120
 800be8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be8e:	e9c5 ab00 	strd	sl, fp, [r5]
 800be92:	3c01      	subs	r4, #1
 800be94:	e6ff      	b.n	800bc96 <__kernel_rem_pio2+0x2d6>
 800be96:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800be98:	2b02      	cmp	r3, #2
 800be9a:	dc0b      	bgt.n	800beb4 <__kernel_rem_pio2+0x4f4>
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dc39      	bgt.n	800bf14 <__kernel_rem_pio2+0x554>
 800bea0:	d05d      	beq.n	800bf5e <__kernel_rem_pio2+0x59e>
 800bea2:	9b02      	ldr	r3, [sp, #8]
 800bea4:	f003 0007 	and.w	r0, r3, #7
 800bea8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800beac:	ecbd 8b02 	vpop	{d8}
 800beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d1f3      	bne.n	800bea2 <__kernel_rem_pio2+0x4e2>
 800beba:	9b05      	ldr	r3, [sp, #20]
 800bebc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bec0:	eb0d 0403 	add.w	r4, sp, r3
 800bec4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800bec8:	4625      	mov	r5, r4
 800beca:	46c2      	mov	sl, r8
 800becc:	f1ba 0f00 	cmp.w	sl, #0
 800bed0:	f1a5 0508 	sub.w	r5, r5, #8
 800bed4:	dc6b      	bgt.n	800bfae <__kernel_rem_pio2+0x5ee>
 800bed6:	4645      	mov	r5, r8
 800bed8:	2d01      	cmp	r5, #1
 800beda:	f1a4 0408 	sub.w	r4, r4, #8
 800bede:	f300 8087 	bgt.w	800bff0 <__kernel_rem_pio2+0x630>
 800bee2:	9c05      	ldr	r4, [sp, #20]
 800bee4:	ab48      	add	r3, sp, #288	@ 0x120
 800bee6:	441c      	add	r4, r3
 800bee8:	2000      	movs	r0, #0
 800beea:	2100      	movs	r1, #0
 800beec:	f1b8 0f01 	cmp.w	r8, #1
 800bef0:	f300 809c 	bgt.w	800c02c <__kernel_rem_pio2+0x66c>
 800bef4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bef8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800befc:	f1b9 0f00 	cmp.w	r9, #0
 800bf00:	f040 80a6 	bne.w	800c050 <__kernel_rem_pio2+0x690>
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	e9c3 7800 	strd	r7, r8, [r3]
 800bf0a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bf0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf12:	e7c6      	b.n	800bea2 <__kernel_rem_pio2+0x4e2>
 800bf14:	9d05      	ldr	r5, [sp, #20]
 800bf16:	ab48      	add	r3, sp, #288	@ 0x120
 800bf18:	441d      	add	r5, r3
 800bf1a:	4644      	mov	r4, r8
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	2c00      	cmp	r4, #0
 800bf22:	da35      	bge.n	800bf90 <__kernel_rem_pio2+0x5d0>
 800bf24:	f1b9 0f00 	cmp.w	r9, #0
 800bf28:	d038      	beq.n	800bf9c <__kernel_rem_pio2+0x5dc>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf30:	9c04      	ldr	r4, [sp, #16]
 800bf32:	e9c4 2300 	strd	r2, r3, [r4]
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bf3e:	f7f4 fae5 	bl	800050c <__aeabi_dsub>
 800bf42:	ad4a      	add	r5, sp, #296	@ 0x128
 800bf44:	2401      	movs	r4, #1
 800bf46:	45a0      	cmp	r8, r4
 800bf48:	da2b      	bge.n	800bfa2 <__kernel_rem_pio2+0x5e2>
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d002      	beq.n	800bf56 <__kernel_rem_pio2+0x596>
 800bf50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf54:	4619      	mov	r1, r3
 800bf56:	9b04      	ldr	r3, [sp, #16]
 800bf58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bf5c:	e7a1      	b.n	800bea2 <__kernel_rem_pio2+0x4e2>
 800bf5e:	9c05      	ldr	r4, [sp, #20]
 800bf60:	ab48      	add	r3, sp, #288	@ 0x120
 800bf62:	441c      	add	r4, r3
 800bf64:	2000      	movs	r0, #0
 800bf66:	2100      	movs	r1, #0
 800bf68:	f1b8 0f00 	cmp.w	r8, #0
 800bf6c:	da09      	bge.n	800bf82 <__kernel_rem_pio2+0x5c2>
 800bf6e:	f1b9 0f00 	cmp.w	r9, #0
 800bf72:	d002      	beq.n	800bf7a <__kernel_rem_pio2+0x5ba>
 800bf74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf78:	4619      	mov	r1, r3
 800bf7a:	9b04      	ldr	r3, [sp, #16]
 800bf7c:	e9c3 0100 	strd	r0, r1, [r3]
 800bf80:	e78f      	b.n	800bea2 <__kernel_rem_pio2+0x4e2>
 800bf82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf86:	f7f4 fac3 	bl	8000510 <__adddf3>
 800bf8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf8e:	e7eb      	b.n	800bf68 <__kernel_rem_pio2+0x5a8>
 800bf90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf94:	f7f4 fabc 	bl	8000510 <__adddf3>
 800bf98:	3c01      	subs	r4, #1
 800bf9a:	e7c1      	b.n	800bf20 <__kernel_rem_pio2+0x560>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	e7c6      	b.n	800bf30 <__kernel_rem_pio2+0x570>
 800bfa2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bfa6:	f7f4 fab3 	bl	8000510 <__adddf3>
 800bfaa:	3401      	adds	r4, #1
 800bfac:	e7cb      	b.n	800bf46 <__kernel_rem_pio2+0x586>
 800bfae:	ed95 7b00 	vldr	d7, [r5]
 800bfb2:	ed8d 7b00 	vstr	d7, [sp]
 800bfb6:	ed95 7b02 	vldr	d7, [r5, #8]
 800bfba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbe:	ec53 2b17 	vmov	r2, r3, d7
 800bfc2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfc6:	f7f4 faa3 	bl	8000510 <__adddf3>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd6:	f7f4 fa99 	bl	800050c <__aeabi_dsub>
 800bfda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfde:	f7f4 fa97 	bl	8000510 <__adddf3>
 800bfe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfe6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bfea:	e9c5 6700 	strd	r6, r7, [r5]
 800bfee:	e76d      	b.n	800becc <__kernel_rem_pio2+0x50c>
 800bff0:	ed94 7b00 	vldr	d7, [r4]
 800bff4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bff8:	ec51 0b17 	vmov	r0, r1, d7
 800bffc:	4652      	mov	r2, sl
 800bffe:	465b      	mov	r3, fp
 800c000:	ed8d 7b00 	vstr	d7, [sp]
 800c004:	f7f4 fa84 	bl	8000510 <__adddf3>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4606      	mov	r6, r0
 800c00e:	460f      	mov	r7, r1
 800c010:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c014:	f7f4 fa7a 	bl	800050c <__aeabi_dsub>
 800c018:	4652      	mov	r2, sl
 800c01a:	465b      	mov	r3, fp
 800c01c:	f7f4 fa78 	bl	8000510 <__adddf3>
 800c020:	3d01      	subs	r5, #1
 800c022:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c026:	e9c4 6700 	strd	r6, r7, [r4]
 800c02a:	e755      	b.n	800bed8 <__kernel_rem_pio2+0x518>
 800c02c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c030:	f7f4 fa6e 	bl	8000510 <__adddf3>
 800c034:	f108 38ff 	add.w	r8, r8, #4294967295
 800c038:	e758      	b.n	800beec <__kernel_rem_pio2+0x52c>
 800c03a:	bf00      	nop
 800c03c:	f3af 8000 	nop.w
	...
 800c048:	41700000 	.word	0x41700000
 800c04c:	3e700000 	.word	0x3e700000
 800c050:	9b04      	ldr	r3, [sp, #16]
 800c052:	9a04      	ldr	r2, [sp, #16]
 800c054:	601f      	str	r7, [r3, #0]
 800c056:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c05a:	605c      	str	r4, [r3, #4]
 800c05c:	609d      	str	r5, [r3, #8]
 800c05e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c062:	60d3      	str	r3, [r2, #12]
 800c064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c068:	6110      	str	r0, [r2, #16]
 800c06a:	6153      	str	r3, [r2, #20]
 800c06c:	e719      	b.n	800bea2 <__kernel_rem_pio2+0x4e2>
 800c06e:	bf00      	nop

0800c070 <scalbn>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	ec55 4b10 	vmov	r4, r5, d0
 800c076:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c07a:	4606      	mov	r6, r0
 800c07c:	462b      	mov	r3, r5
 800c07e:	b991      	cbnz	r1, 800c0a6 <scalbn+0x36>
 800c080:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c084:	4323      	orrs	r3, r4
 800c086:	d03d      	beq.n	800c104 <scalbn+0x94>
 800c088:	4b35      	ldr	r3, [pc, #212]	@ (800c160 <scalbn+0xf0>)
 800c08a:	4620      	mov	r0, r4
 800c08c:	4629      	mov	r1, r5
 800c08e:	2200      	movs	r2, #0
 800c090:	f7f4 f90e 	bl	80002b0 <__aeabi_dmul>
 800c094:	4b33      	ldr	r3, [pc, #204]	@ (800c164 <scalbn+0xf4>)
 800c096:	429e      	cmp	r6, r3
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	da0f      	bge.n	800c0be <scalbn+0x4e>
 800c09e:	a328      	add	r3, pc, #160	@ (adr r3, 800c140 <scalbn+0xd0>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	e01e      	b.n	800c0e4 <scalbn+0x74>
 800c0a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c0aa:	4291      	cmp	r1, r2
 800c0ac:	d10b      	bne.n	800c0c6 <scalbn+0x56>
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7f4 fa2c 	bl	8000510 <__adddf3>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	e022      	b.n	800c104 <scalbn+0x94>
 800c0be:	460b      	mov	r3, r1
 800c0c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c0c4:	3936      	subs	r1, #54	@ 0x36
 800c0c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c0ca:	4296      	cmp	r6, r2
 800c0cc:	dd0d      	ble.n	800c0ea <scalbn+0x7a>
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c148 <scalbn+0xd8>)
 800c0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d6:	da02      	bge.n	800c0de <scalbn+0x6e>
 800c0d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c150 <scalbn+0xe0>)
 800c0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0de:	a31a      	add	r3, pc, #104	@ (adr r3, 800c148 <scalbn+0xd8>)
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	f7f4 f8e4 	bl	80002b0 <__aeabi_dmul>
 800c0e8:	e7e6      	b.n	800c0b8 <scalbn+0x48>
 800c0ea:	1872      	adds	r2, r6, r1
 800c0ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c0f0:	428a      	cmp	r2, r1
 800c0f2:	dcec      	bgt.n	800c0ce <scalbn+0x5e>
 800c0f4:	2a00      	cmp	r2, #0
 800c0f6:	dd08      	ble.n	800c10a <scalbn+0x9a>
 800c0f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c0fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c100:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c104:	ec45 4b10 	vmov	d0, r4, r5
 800c108:	bd70      	pop	{r4, r5, r6, pc}
 800c10a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c10e:	da08      	bge.n	800c122 <scalbn+0xb2>
 800c110:	2d00      	cmp	r5, #0
 800c112:	a10b      	add	r1, pc, #44	@ (adr r1, 800c140 <scalbn+0xd0>)
 800c114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c118:	dac1      	bge.n	800c09e <scalbn+0x2e>
 800c11a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c158 <scalbn+0xe8>)
 800c11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c120:	e7bd      	b.n	800c09e <scalbn+0x2e>
 800c122:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c126:	3236      	adds	r2, #54	@ 0x36
 800c128:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c12c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c130:	4620      	mov	r0, r4
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <scalbn+0xf8>)
 800c134:	4629      	mov	r1, r5
 800c136:	2200      	movs	r2, #0
 800c138:	e7d4      	b.n	800c0e4 <scalbn+0x74>
 800c13a:	bf00      	nop
 800c13c:	f3af 8000 	nop.w
 800c140:	c2f8f359 	.word	0xc2f8f359
 800c144:	01a56e1f 	.word	0x01a56e1f
 800c148:	8800759c 	.word	0x8800759c
 800c14c:	7e37e43c 	.word	0x7e37e43c
 800c150:	8800759c 	.word	0x8800759c
 800c154:	fe37e43c 	.word	0xfe37e43c
 800c158:	c2f8f359 	.word	0xc2f8f359
 800c15c:	81a56e1f 	.word	0x81a56e1f
 800c160:	43500000 	.word	0x43500000
 800c164:	ffff3cb0 	.word	0xffff3cb0
 800c168:	3c900000 	.word	0x3c900000
 800c16c:	00000000 	.word	0x00000000

0800c170 <floor>:
 800c170:	ec51 0b10 	vmov	r0, r1, d0
 800c174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c180:	2e13      	cmp	r6, #19
 800c182:	460c      	mov	r4, r1
 800c184:	4605      	mov	r5, r0
 800c186:	4680      	mov	r8, r0
 800c188:	dc34      	bgt.n	800c1f4 <floor+0x84>
 800c18a:	2e00      	cmp	r6, #0
 800c18c:	da17      	bge.n	800c1be <floor+0x4e>
 800c18e:	a332      	add	r3, pc, #200	@ (adr r3, 800c258 <floor+0xe8>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f7f4 f9bc 	bl	8000510 <__adddf3>
 800c198:	2200      	movs	r2, #0
 800c19a:	2300      	movs	r3, #0
 800c19c:	f7f4 fbec 	bl	8000978 <__aeabi_dcmpgt>
 800c1a0:	b150      	cbz	r0, 800c1b8 <floor+0x48>
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	da55      	bge.n	800c252 <floor+0xe2>
 800c1a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c1aa:	432c      	orrs	r4, r5
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	42ac      	cmp	r4, r5
 800c1b0:	4c2b      	ldr	r4, [pc, #172]	@ (800c260 <floor+0xf0>)
 800c1b2:	bf08      	it	eq
 800c1b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	e023      	b.n	800c206 <floor+0x96>
 800c1be:	4f29      	ldr	r7, [pc, #164]	@ (800c264 <floor+0xf4>)
 800c1c0:	4137      	asrs	r7, r6
 800c1c2:	ea01 0307 	and.w	r3, r1, r7
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	d01d      	beq.n	800c206 <floor+0x96>
 800c1ca:	a323      	add	r3, pc, #140	@ (adr r3, 800c258 <floor+0xe8>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 f99e 	bl	8000510 <__adddf3>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f7f4 fbce 	bl	8000978 <__aeabi_dcmpgt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d0eb      	beq.n	800c1b8 <floor+0x48>
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	bfbe      	ittt	lt
 800c1e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c1e8:	4133      	asrlt	r3, r6
 800c1ea:	18e4      	addlt	r4, r4, r3
 800c1ec:	ea24 0407 	bic.w	r4, r4, r7
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	e7e1      	b.n	800c1b8 <floor+0x48>
 800c1f4:	2e33      	cmp	r6, #51	@ 0x33
 800c1f6:	dd0a      	ble.n	800c20e <floor+0x9e>
 800c1f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c1fc:	d103      	bne.n	800c206 <floor+0x96>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	f7f4 f985 	bl	8000510 <__adddf3>
 800c206:	ec41 0b10 	vmov	d0, r0, r1
 800c20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c212:	f04f 37ff 	mov.w	r7, #4294967295
 800c216:	40df      	lsrs	r7, r3
 800c218:	4207      	tst	r7, r0
 800c21a:	d0f4      	beq.n	800c206 <floor+0x96>
 800c21c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c258 <floor+0xe8>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f4 f975 	bl	8000510 <__adddf3>
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	f7f4 fba5 	bl	8000978 <__aeabi_dcmpgt>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0c2      	beq.n	800c1b8 <floor+0x48>
 800c232:	2c00      	cmp	r4, #0
 800c234:	da0a      	bge.n	800c24c <floor+0xdc>
 800c236:	2e14      	cmp	r6, #20
 800c238:	d101      	bne.n	800c23e <floor+0xce>
 800c23a:	3401      	adds	r4, #1
 800c23c:	e006      	b.n	800c24c <floor+0xdc>
 800c23e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c242:	2301      	movs	r3, #1
 800c244:	40b3      	lsls	r3, r6
 800c246:	441d      	add	r5, r3
 800c248:	4545      	cmp	r5, r8
 800c24a:	d3f6      	bcc.n	800c23a <floor+0xca>
 800c24c:	ea25 0507 	bic.w	r5, r5, r7
 800c250:	e7b2      	b.n	800c1b8 <floor+0x48>
 800c252:	2500      	movs	r5, #0
 800c254:	462c      	mov	r4, r5
 800c256:	e7af      	b.n	800c1b8 <floor+0x48>
 800c258:	8800759c 	.word	0x8800759c
 800c25c:	7e37e43c 	.word	0x7e37e43c
 800c260:	bff00000 	.word	0xbff00000
 800c264:	000fffff 	.word	0x000fffff

0800c268 <_init>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr

0800c274 <_fini>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr
